{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/touxiang1.jpeg","path":"images/touxiang1.jpeg","modified":0,"renderable":0},{"_id":"source/images/tx2.jpeg","path":"images/tx2.jpeg","modified":0,"renderable":0},{"_id":"themes/aria/source/fonts/lg.eot","path":"fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/aria/source/fonts/lg.svg","path":"fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/aria/source/fonts/lg.ttf","path":"fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/aria/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/fonts/lg.woff","path":"fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/aria/source/css/atom-one-dark.css","path":"css/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/comment.styl","path":"css/comment.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/atom-one-light.css","path":"css/atom-one-light.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/footer.styl","path":"css/footer.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/header.styl","path":"css/header.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/commentjs.css","path":"css/commentjs.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/info.styl","path":"css/info.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/nav.styl","path":"css/nav.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/lightgallery.min.css","path":"css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/page.styl","path":"css/page.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/post.styl","path":"css/post.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/reward.styl","path":"css/reward.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/sidebar.styl","path":"css/sidebar.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/solarized-dark.css","path":"css/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/aria/source/css/solarized-light.css","path":"css/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/aria/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/aria/source/js/busuanzi.pure.mini.js","path":"js/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/custom.js","path":"js/custom.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/commentjs.js","path":"js/commentjs.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/highlight.min.js","path":"js/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-fullscreen.min.js","path":"js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-thumbnail.min.js","path":"js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-pager.min.js","path":"js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-zoom.min.js","path":"js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-hash.min.js","path":"js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/marked.min.js","path":"js/marked.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lightgallery.min.js","path":"js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/timeago.min.js","path":"js/timeago.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/util.js","path":"js/util.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/images/background.png","path":"images/background.png","modified":0,"renderable":1},{"_id":"themes/aria/source/js/fontawesome-all.min.js","path":"js/fontawesome-all.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/aria/.gitignore","hash":"56f762c37cacd5c14c1a4adc6b292c9a396bf911","modified":1551772846000},{"_id":"themes/aria/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1551772846000},{"_id":"themes/aria/README.md","hash":"efc87a35b4dd92458d46414d44fadc4320e8628f","modified":1551772846000},{"_id":"themes/aria/_config.yml.example","hash":"b0b73c6cce2dac9fce940ad3630d848bc7b207ae","modified":1551772846000},{"_id":"themes/aria/package.json","hash":"5b2ace3e57e7ca95420ecc061ff073eda89664b5","modified":1551772846000},{"_id":"themes/aria/_config.yml","hash":"119950680f757c64d24aa692cd1ffef77cc370be","modified":1551772846000},{"_id":"themes/aria/README.zh_CN.md","hash":"c9c9d6ef5401aa7f806b4cc4bea9facc26ccf724","modified":1551772846000},{"_id":"source/categories/index.md","hash":"2a5beb2b63c0b0e658c9871f9cd258b04bff47ed","modified":1551772846000},{"_id":"source/tags/index.md","hash":"822b1f765b15595a61a7523c9db74208ee0f38c6","modified":1551772846000},{"_id":"themes/aria/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1551772846000},{"_id":"source/images/touxiang1.jpeg","hash":"cd9735b5a22bbeeda9ca13b9c3562489e5c44f0a","modified":1551772846000},{"_id":"themes/aria/.git/index","hash":"396c5bbb0b9733a6cfa4ebc60fb3d193a9934137","modified":1551772846000},{"_id":"themes/aria/.git/config","hash":"f0c91634befc5059c1c25ba8064b02636eae9502","modified":1551772846000},{"_id":"themes/aria/.git/packed-refs","hash":"b4ac388d99bf00006fc5788450c54ac6e401e1a5","modified":1551772846000},{"_id":"themes/aria/.github/CODE_OF_CONDUCT.md","hash":"5e0539f910e39b8ade342190ac25e063d6ee5c51","modified":1551772846000},{"_id":"themes/aria/.github/CONTRIBUTING.md","hash":"21d46543d34276329205ccbf6c358b2d445dc78d","modified":1551772846000},{"_id":"themes/aria/.github/ISSUE_TEMPLATE.md","hash":"eb3960c0ee2c61d2a15511484ebcb6f7916c6f55","modified":1551772846000},{"_id":"themes/aria/.github/PULL_REQUEST_TEMPLATE.md","hash":"3b4168de0d6910399bf3ec1726fe7c49fd879244","modified":1551772846000},{"_id":"source/_posts/01-二进制：不了解计算机的源头，你学什么编程.md","hash":"6fa75d0f5d50dbd69abff6d011c04e1677cb0eba","modified":1551800886092},{"_id":"source/_posts/02-余数：原来取余操作本身就是个哈希函数.md","hash":"6681b421bae75d491cbcf71011f672b011064e06","modified":1552489696167},{"_id":"themes/aria/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1551772846000},{"_id":"source/_posts/03-迭代法：不用编程语言的自带函数，你会如何计算平方根.md","hash":"c4e5c067ae9aee1c53ac7001da4648b470bcc9b5","modified":1552812212952},{"_id":"source/_posts/05-递归（上）：泛化数学归纳，如何将复杂问题简单化？.md","hash":"5c7c00ea0a0cdc0607cb2f165a3d54b836451f67","modified":1553842293689},{"_id":"source/_posts/04-数学归纳法：如何用数学归纳提升代码的运行效率？.md","hash":"1f2a89e4d2f49f8d91c385d14bcc9cba79051a87","modified":1552826840851},{"_id":"source/_posts/06-递归（下）：分而治之，从归并排序到MapReduce.md","hash":"e263999ef380a52a81705301e40b5c567b4d8075","modified":1554214083564},{"_id":"source/_posts/Leetcode面试题-01.md","hash":"9bf8f378e275b47c781c6f01e48229d51d7d8cf6","modified":1552485736300},{"_id":"source/_posts/Leetcode面试题-03.md","hash":"6503995c8edf3cfa546f14ced90ef10e3cbfd450","modified":1553435011658},{"_id":"source/_posts/堆栈算法面试题.md","hash":"445c17079a030946bb64132e8bfb9961241a9796","modified":1552318433334},{"_id":"source/_posts/Leetcode面试题-04.md","hash":"47c83ca4d1a10781047428df740a4ee23ceca928","modified":1554041755869},{"_id":"source/_posts/Leetcode面试题-02.md","hash":"90dbc3eaaaa0a6802558cef75b9470d6b79056c9","modified":1553095081841},{"_id":"source/_posts/数学专栏课外加餐（一）-我们为什么需要反码和补码？.md","hash":"7b71878960dc88a958c115e81f0312bfef1477ee","modified":1554214779693},{"_id":"source/_posts/数学专栏课外加餐（二）-位操作的三个应用实例.md","hash":"d171393cf8756c8850f0df5d1a36409938dc6455","modified":1554215266556},{"_id":"source/_posts/Leetcode面试题-05.md","hash":"a6caeb63462a7f326f805f4e7924d8e40fabadd5","modified":1554041796553},{"_id":"source/_posts/文章结构构建.md","hash":"c64f36f96bfbe206661a84f459dba987aadc9e13","modified":1552318137253},{"_id":"source/_posts/硬汉计划第一天.md","hash":"b956e8bd9c5e69d579ec05270cfa593982bce684","modified":1553843107842},{"_id":"source/_posts/硬汉计划第三天.md","hash":"bb71efe28ffcc72a000cb96016d1de0c4d969948","modified":1553843739314},{"_id":"source/_posts/硬汉计划第二天.md","hash":"dea6ce4b7983654fa70be938ae7a7fcd5c7efffd","modified":1554022903928},{"_id":"source/_posts/硬汉计划第五天.md","hash":"fe0309f741547e8850a85de5d15185fda1593037","modified":1554022856748},{"_id":"source/_posts/硬汉计划第六天.md","hash":"13c54887ac0706e74b463ef2f155492c42fbf07d","modified":1554041698217},{"_id":"source/_posts/硬汉计划第四天.md","hash":"3861359f40ea1cd9f049218d26c51537f0f228fc","modified":1553853521557},{"_id":"themes/aria/images/touxiang1.jpeg","hash":"cd9735b5a22bbeeda9ca13b9c3562489e5c44f0a","modified":1551772846000},{"_id":"themes/aria/layout/categories.njk","hash":"231d1fa407836245331659479cd12b3e803e7fe0","modified":1551772846000},{"_id":"source/_posts/硬汉计划第七天.md","hash":"02813bd6388875d93d3484fcdb3670ace9a3d866","modified":1554134956483},{"_id":"themes/aria/layout/archive.njk","hash":"b1a66de640bbbd1ff7c6ecaf99e2f545b123fa85","modified":1551772846000},{"_id":"themes/aria/layout/comment.njk","hash":"249dd02822b6de8c5dc80080d8cc25f6e629898d","modified":1551772846000},{"_id":"themes/aria/layout/category.njk","hash":"7ab9a47f75d9bd83b3ced1a805d44a952bb3b675","modified":1551772846000},{"_id":"themes/aria/layout/footer.njk","hash":"980f4ad22f2cf8b5c0599e433d20efa09a532287","modified":1551772846000},{"_id":"themes/aria/layout/index.njk","hash":"d3acaac5908cd41b106f8d0bc0d09a4b3dde0df5","modified":1551772846000},{"_id":"themes/aria/layout/header.njk","hash":"2fb823c697702f065ffbaf17d92888c8ca0839d7","modified":1551772846000},{"_id":"themes/aria/layout/info.njk","hash":"8eedd696aff1c56c21f6cfa6bc532b34567cf6c1","modified":1551772846000},{"_id":"themes/aria/layout/page.njk","hash":"19147f4f85c89fbce8d215986a99e743f451a3f1","modified":1551772846000},{"_id":"themes/aria/layout/reward.njk","hash":"92d2646b593bbffccd0c9daf0f90828f17d14ab4","modified":1551772846000},{"_id":"themes/aria/layout/post.njk","hash":"1e288a91c1787db9e353029386bb2cc511f9368a","modified":1551772846000},{"_id":"themes/aria/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1551772846000},{"_id":"themes/aria/layout/tag.njk","hash":"653093fc9ce3cfd3c6d68685d5c0fd9b763d2ed2","modified":1551772846000},{"_id":"themes/aria/layout/sidebar.njk","hash":"c4eadc5c82e3ff26be6d94acec9a8c4fbe7caa96","modified":1551772846000},{"_id":"themes/aria/scripts/regexp-tags.js","hash":"72227879bc9a543628661ff121965062f105e0d8","modified":1551772846000},{"_id":"themes/aria/layout/tags.njk","hash":"fe2150ec15caa109f2d67e8a1e77e16821acb0cf","modified":1551772846000},{"_id":"themes/aria/languages/en.yml","hash":"ab81f3ccb132625a81c28f19c760a18a46838dfe","modified":1551772846000},{"_id":"themes/aria/languages/zh_TW.yml","hash":"d2520872c650b2cc1e7450a7bb476a162e6deb0d","modified":1551772846000},{"_id":"themes/aria/languages/zh_CN.yml","hash":"78e2c45c05062203df3c31472cc94e861494f80f","modified":1551772846000},{"_id":"themes/aria/languages/zh_HK.yml","hash":"b17246baa97115b39a02a5c91d0f388dcbc8b339","modified":1551772846000},{"_id":"themes/aria/source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1551783379000},{"_id":"source/images/tx2.jpeg","hash":"f5a806eae77bbffa3c90b8498839b88adf5cb85b","modified":1551772846000},{"_id":"themes/aria/layout/_layout.njk","hash":"d015e9f665bb3a7c45c8c787101be199484456a5","modified":1551772846000},{"_id":"themes/aria/images/tx2.jpeg","hash":"f5a806eae77bbffa3c90b8498839b88adf5cb85b","modified":1551772846000},{"_id":"themes/aria/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1551772846000},{"_id":"themes/aria/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1551772846000},{"_id":"themes/aria/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1551772846000},{"_id":"themes/aria/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1551772846000},{"_id":"themes/aria/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1551772846000},{"_id":"themes/aria/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1551772846000},{"_id":"themes/aria/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1551772846000},{"_id":"themes/aria/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1551772846000},{"_id":"themes/aria/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1551772846000},{"_id":"themes/aria/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1551772846000},{"_id":"themes/aria/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1551772846000},{"_id":"themes/aria/.git/logs/HEAD","hash":"54be5946151a6907496316a9aa2ae7df91c11ce6","modified":1551772846000},{"_id":"themes/aria/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1551772846000},{"_id":"source/_posts/硬汉计划第一天/yiquan.jpg","hash":"11bd0e2c2e0a683466e7a1dea546adb170aaca43","modified":1553842653812},{"_id":"source/_posts/硬汉计划第二天/jiayou.jpg","hash":"06d86a487078988428b85a559c7664901595ca43","modified":1553842712595},{"_id":"source/_posts/硬汉计划第三天/jiayou.jpg","hash":"60f926eb91d0d702f6928f531bfcb897418e5679","modified":1553843677876},{"_id":"source/_posts/硬汉计划第五天/jiayou.jpg","hash":"345ad5d7c31fc259af6401da7b0a9ef49c7f6946","modified":1554022737819},{"_id":"source/_posts/硬汉计划第四天/jiayou.jpg","hash":"a196b61a247d1dd72e8932a5a93b40fa6d350509","modified":1553853270307},{"_id":"themes/aria/source/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1551772846000},{"_id":"themes/aria/source/fonts/lg.svg","hash":"1dba95664d2933fe1c22fb95a2e1e3a21839870b","modified":1551772846000},{"_id":"themes/aria/source/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1551772846000},{"_id":"themes/aria/source/css/custom.styl","hash":"38ce5ca0147b93e89d56b76064267c874685b2fe","modified":1551772846000},{"_id":"themes/aria/source/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1551772846000},{"_id":"source/_posts/硬汉计划第七天/jiayou.jpg","hash":"169df485c3be4d76f521c866062699ab6c0c453f","modified":1554134943891},{"_id":"themes/aria/source/css/atom-one-dark.css","hash":"91671ed42c0ce1363843144a9666d34faddb7e27","modified":1551772846000},{"_id":"themes/aria/source/css/comment.styl","hash":"2db33daa184a980aa83733c51c5e53159474f123","modified":1551772846000},{"_id":"themes/aria/source/css/atom-one-light.css","hash":"e432dc56345e4c5e74baffb36ea1b72f469ec2b5","modified":1551772846000},{"_id":"themes/aria/source/css/footer.styl","hash":"8419751222b2dec293e78deca1f3d6bac69d8968","modified":1551772846000},{"_id":"themes/aria/source/css/header.styl","hash":"c59f08a5edb4c91830b55da1c3b7e35ce7ac0b6d","modified":1551772846000},{"_id":"themes/aria/source/css/index.styl","hash":"6c3f2925de059e9852154e179707591ae75ddcd4","modified":1551772846000},{"_id":"themes/aria/source/css/commentjs.css","hash":"c9121d34acb984b285f6e3ff17c1757cf76dad09","modified":1551772846000},{"_id":"themes/aria/source/css/info.styl","hash":"d39f52598109c96a39b24962499c3c4d17b92aed","modified":1551772846000},{"_id":"themes/aria/source/css/main.styl","hash":"82ec2e07158ba9c114bbde3b2b94d7dc4aaad0f8","modified":1551772846000},{"_id":"themes/aria/source/css/nav.styl","hash":"c76ff6ef6c2cda6662bd2a7adc480788e9dbbde4","modified":1551772846000},{"_id":"themes/aria/source/css/lightgallery.min.css","hash":"9e76bdad163856774a96b1230a08dc506600a973","modified":1551772846000},{"_id":"themes/aria/source/css/page.styl","hash":"dc76eb2d489ab66950120c849e98ebdce21ba167","modified":1551772846000},{"_id":"themes/aria/source/css/normalize.css","hash":"826bdf28095ebc25f5be69d58eadfc9e1b49b7f7","modified":1551772846000},{"_id":"themes/aria/source/css/post.styl","hash":"f35475bac616276916673a837931cf017e7d544b","modified":1551772846000},{"_id":"themes/aria/source/css/reward.styl","hash":"2e95f749d4750052c6a3b5cf79679c51453e7f2b","modified":1551772846000},{"_id":"themes/aria/source/css/sidebar.styl","hash":"7f62abecf246460d8debdb9c018086d66472672c","modified":1551772846000},{"_id":"themes/aria/source/css/solarized-dark.css","hash":"97bba4362e3001a93f1b111a140895cbe6047a81","modified":1551772846000},{"_id":"themes/aria/source/css/variables.styl","hash":"eb65f4b33bd8b2ec5dc256f1744e450384d4652e","modified":1551772846000},{"_id":"themes/aria/source/images/avatar.png","hash":"e63be2fab169a0478af27c47240d1d123fa2b2ba","modified":1551772846000},{"_id":"themes/aria/source/css/solarized-light.css","hash":"fe6779c179c3e6136384e463fdc6d3b08ff88ba7","modified":1551772846000},{"_id":"themes/aria/source/images/logo.png","hash":"fa35ee718a416900fd4b401300fa995a86c234ad","modified":1551772846000},{"_id":"themes/aria/source/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1551772846000},{"_id":"themes/aria/source/js/custom.js","hash":"4d04585e457716454ccb46843a7ff903981f7438","modified":1551772846000},{"_id":"themes/aria/source/js/commentjs.js","hash":"4a86e2daea116dc875445fe31815f0f43a8a7c78","modified":1551772846000},{"_id":"themes/aria/source/js/highlight.min.js","hash":"a8442546e96c3c319f4298bfb2fab7060d389f50","modified":1551772846000},{"_id":"themes/aria/source/js/clipboard.min.js","hash":"dc144353ec85169bb3c5f3c6d68b4e75f9bf28ea","modified":1551772846000},{"_id":"themes/aria/source/js/index.js","hash":"83f17690cf6be124187bbec321592b0b1d8062e0","modified":1551772846000},{"_id":"themes/aria/source/js/lg-fullscreen.min.js","hash":"70c5a8c3598c19af1a50a7e5d1567483fb63c3c5","modified":1551772846000},{"_id":"themes/aria/source/js/lg-thumbnail.min.js","hash":"703c7d187625f4cf16891748250b00aeb6ca5479","modified":1551772846000},{"_id":"themes/aria/source/js/lg-pager.min.js","hash":"6f7572b2a27d1b4902eda27882c01e608ae59e06","modified":1551772846000},{"_id":"themes/aria/source/js/lg-zoom.min.js","hash":"8f22823a55f11dc651700f59318fffd65eb47692","modified":1551772846000},{"_id":"themes/aria/source/js/lg-hash.min.js","hash":"52c10707088f9fcbdef6a7974d31de2b6190a679","modified":1551772846000},{"_id":"themes/aria/source/js/marked.min.js","hash":"00b4113ded8994ff7b495c36e013a19bc142375e","modified":1551772846000},{"_id":"themes/aria/source/js/lightgallery.min.js","hash":"5fac1b0ebb11c99e2ac268b19ed172191e55d23d","modified":1551772846000},{"_id":"themes/aria/source/js/scrollspy.js","hash":"2eafc89dae69269d6d4c47d7bd746e717bd38230","modified":1551772846000},{"_id":"themes/aria/source/js/search.js","hash":"a38041aa761971a1cfe18bf6b6474e3d9412c065","modified":1551772846000},{"_id":"themes/aria/source/js/timeago.min.js","hash":"d220fcc47be00effec6b5181b97cc0929d10031e","modified":1551772846000},{"_id":"themes/aria/source/js/util.js","hash":"bb56df6fc3768eb27d20ca7eab92c9654397d25e","modified":1551772846000},{"_id":"source/_posts/06-递归（下）：分而治之，从归并排序到MapReduce/1.jpg","hash":"37b0027591254698b85099c49301720ca4d34c84","modified":1554043279442},{"_id":"themes/aria/source/js/jquery.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1551772846000},{"_id":"themes/aria/.git/refs/heads/master","hash":"95ab7a0fc6b42cd06a0757e2c93839846ce9f506","modified":1551772846000},{"_id":"themes/aria/.git/objects/pack/pack-2582a1919cf989d520e3ae880f0f632ebd8b0c42.idx","hash":"5cd907a35764937da71d87f83f6a654eb3abdab2","modified":1551772846000},{"_id":"themes/aria/images/Sublime Text Build 3176 x64 Setup.exe.crdownload","hash":"d06786c987c5487b97773e8021efe9b8f4eac6bd","modified":1551772846000},{"_id":"themes/aria/ARIA.png","hash":"4d9349d81236b2ad3384d92b5af789aafe71926e","modified":1551772846000},{"_id":"themes/aria/.git/logs/refs/heads/master","hash":"54be5946151a6907496316a9aa2ae7df91c11ce6","modified":1551772846000},{"_id":"themes/aria/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1551772846000},{"_id":"themes/aria/source/images/background.png","hash":"c34366140a0250afbd73d62abdc58b1e00e10355","modified":1551772846000},{"_id":"themes/aria/.git/logs/refs/remotes/origin/HEAD","hash":"54be5946151a6907496316a9aa2ae7df91c11ce6","modified":1551772846000},{"_id":"source/_posts/05-递归（上）：泛化数学归纳，如何将复杂问题简单化？/lesson5.jpg","hash":"c4fed5aeb42253a7faeefa1591f7067a3813bf21","modified":1552827942853},{"_id":"source/_posts/06-递归（下）：分而治之，从归并排序到MapReduce/2.jpg","hash":"370d5afa4999af8aa59a312a424865215798a18d","modified":1554044251504},{"_id":"source/_posts/03-迭代法：不用编程语言的自带函数，你会如何计算平方根/lessons3.jpg","hash":"c0fb202a3c10df2bc6a1481ccc1a8ab931684ec6","modified":1551885133104},{"_id":"source/_posts/01-二进制：不了解计算机的源头，你学什么编程/lesson1.jpg","hash":"b00e5f5f6e87880e06ddffa2ab7c50a91eb720d3","modified":1551775719000},{"_id":"source/_posts/02-余数：原来取余操作本身就是个哈希函数/lesson2.jpg","hash":"708c331ce4b281a62bc3e2ec0f1f3712087bbd39","modified":1551801230090},{"_id":"source/_posts/04-数学归纳法：如何用数学归纳提升代码的运行效率？/lesson4.jpg","hash":"83f40f8e8a8d5323f65f4f6d1af03ac1ac31ec16","modified":1551972574055},{"_id":"themes/aria/source/js/fontawesome-all.min.js","hash":"4dc5c54d10fc5c7eada0464e6060002a12859af7","modified":1551772846000},{"_id":"source/_posts/06-递归（下）：分而治之，从归并排序到MapReduce/lesson6.jpg","hash":"b0bcfe337ff5538f852699f056065905bab822bc","modified":1554044306024},{"_id":"source/_posts/硬汉计划第六天/jiayou.png","hash":"95cf28f93ede3a3c70dc52929e546c8f8e0a8880","modified":1554041630308},{"_id":"themes/aria/.git/objects/pack/pack-2582a1919cf989d520e3ae880f0f632ebd8b0c42.pack","hash":"1ca1a026b8dfb0d0ffb53e51d61ad8de79bda1d7","modified":1551772846000},{"_id":"public/atom.xml","hash":"2ba73ff2e1552d309ad9fb6b7d115ad93ba76060","modified":1554216673849},{"_id":"public/search.xml","hash":"3bf40ec4b38b4a2277f76ef6ec3b311a8b0d1a3b","modified":1554216673849},{"_id":"public/categories/index.html","hash":"9b979420822b703621e7d7dbffe782a49ea7362d","modified":1554213791079},{"_id":"public/tags/index.html","hash":"2abfa7c8c262dcf4161f3546325763d003612fc0","modified":1554213791087},{"_id":"public/2019/03/31/硬汉计划第六天/index.html","hash":"4a72d7f2e4cff93d6b70b1e8983e3c517ed66ca3","modified":1554213791087},{"_id":"public/2019/03/30/硬汉计划第五天/index.html","hash":"dc0657d56188002757db4c760671cf2f7da214ec","modified":1554213791090},{"_id":"public/2019/03/29/硬汉计划第四天/index.html","hash":"8e9dda9fa2afe01fe0fbb12756e744ded5188777","modified":1554213791090},{"_id":"public/2019/03/28/硬汉计划第三天/index.html","hash":"3585d9a29f9b6254ba22d3185d03428c85855abb","modified":1554213791091},{"_id":"public/2019/03/26/硬汉计划第二天/index.html","hash":"ae1d07dce26303f7552e36528609c219f9913c16","modified":1554213791091},{"_id":"public/2019/03/25/硬汉计划第一天/index.html","hash":"9c2049068c725adf6217f830fc8b57edd4144b8a","modified":1554213791091},{"_id":"public/2019/03/31/数学专栏课外加餐（一）-我们为什么需要反码和补码？/index.html","hash":"bb5a1514287d4b27a83e0f65ea087e359055fb72","modified":1554216674787},{"_id":"public/2019/03/31/数学专栏课外加餐（二）-位操作的三个应用实例/index.html","hash":"a53deb9d28f87aca7ced3a282b1ab62b8c1139d1","modified":1554216674781},{"_id":"public/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/index.html","hash":"eb8eb2bf9b54692d1ea60fef6818660a3342b119","modified":1554216674788},{"_id":"public/2019/03/29/Leetcode面试题-05/index.html","hash":"6c32c4599aa6422737ef26ce6e4e788ae7466a02","modified":1554213791091},{"_id":"public/2019/03/29/Leetcode面试题-04/index.html","hash":"2a806891c4db1c3b447a962de13dffb01ad0b575","modified":1554213791091},{"_id":"public/2019/03/24/Leetcode面试题-03/index.html","hash":"eeca2d88b126846d1748b4b0eb0977bcfa2d657f","modified":1554213791091},{"_id":"public/2019/03/17/05-递归（上）：泛化数学归纳，如何将复杂问题简单化？/index.html","hash":"25d8c47521360d858a96f9b3f0d496180851e72a","modified":1554213791092},{"_id":"public/2019/03/20/Leetcode面试题-02/index.html","hash":"e73ffbc4402f57e1d36dbe796a2996227a75786f","modified":1554213791092},{"_id":"public/2019/03/13/Leetcode面试题-01/index.html","hash":"bb3a613788b39e8a8f55e25f2d70b1e93ec0b172","modified":1554213791092},{"_id":"public/2019/03/07/04-数学归纳法：如何用数学归纳提升代码的运行效率？/index.html","hash":"0439f9efd2bbb2e85a1a4c90fc82ee3b776ccc54","modified":1554213791092},{"_id":"public/2019/03/11/堆栈算法面试题/index.html","hash":"3ea7df63b16b726d3f4f76c7cae0ecc8a84519f4","modified":1554213791092},{"_id":"public/2019/03/06/03-迭代法：不用编程语言的自带函数，你会如何计算平方根/index.html","hash":"fbefb671975b303f8ff1b17efa5f2cf62f9a7ef0","modified":1554213791092},{"_id":"public/2019/03/05/02-余数：原来取余操作本身就是个哈希函数/index.html","hash":"f80260c665093dd35952c21addf5181ea7a918f9","modified":1554213791092},{"_id":"public/2019/03/05/01-二进制：不了解计算机的源头，你学什么编程/index.html","hash":"315052616550bd642123d9bda9797a0dc28f4a1e","modified":1554213791092},{"_id":"public/2019/04/02/硬汉计划第七天/index.html","hash":"1b86015bd29d3bfa8b48530baf45628a23986204","modified":1554213791120},{"_id":"public/2019/03/04/文章结构构建/index.html","hash":"9e8eb5866ed385e88c20e4e5ba5712cd304961fb","modified":1554213791121},{"_id":"public/categories/算法/index.html","hash":"99e7e0b3cfff27b73e2d4391cb956b147838a504","modified":1554213791121},{"_id":"public/categories/网络学习/index.html","hash":"7583884d7524c8926d737a9f4041118842af4150","modified":1554213791121},{"_id":"public/categories/算法/Leetcode/index.html","hash":"86ecbcf8e0a6c4303fca7d60cc2825ee8ecc2c49","modified":1554213791122},{"_id":"public/categories/网络学习/极客时间/index.html","hash":"c5cd052e4d630acaa7b054d63ea9684cb817c601","modified":1554213791122},{"_id":"public/categories/网络学习/极客时间/程序员的数学基础课/index.html","hash":"f00d1302a197ccec5adf4b6b3d83ba15266b9fd4","modified":1554213791122},{"_id":"public/categories/算法/面试题/index.html","hash":"4dacc7c3386958a4ae240ed3d9395e23897e0de2","modified":1554213791122},{"_id":"public/archives/page/3/index.html","hash":"f4ad40784bab1804e91d6bb6651e97b5a1312bd3","modified":1554213791122},{"_id":"public/archives/2019/page/3/index.html","hash":"be19d81024f98bc20f99d17a9880da30fa5d8b71","modified":1554213791122},{"_id":"public/archives/2019/03/page/3/index.html","hash":"72112dc3150ce54cbf6f604ada0506883b3aaac1","modified":1554213791122},{"_id":"public/page/3/index.html","hash":"41e9f9ec171177a007417c3319ff8bf393a2dc47","modified":1554213791122},{"_id":"public/tags/计算机/index.html","hash":"a1256e5ff413ee73891257194ed1b915bf3fbf70","modified":1554213791123},{"_id":"public/tags/数组/index.html","hash":"e00ce4c6493dc6aa0c145696dac1ba52366765a5","modified":1554213791123},{"_id":"public/tags/堆栈/index.html","hash":"d679fb88de395e58b66946028ed32b0942f872fd","modified":1554213791123},{"_id":"public/tags/字符串/index.html","hash":"727b3ae9c113575105c8d4e6b59d452abecf0382","modified":1554213791123},{"_id":"public/tags/数学归纳法/index.html","hash":"4ebd6c6e448a349cf6713849f4c252560a12c016","modified":1554213791123},{"_id":"public/tags/栈/index.html","hash":"45c394d9d49bc16ae1828ee8030c29c61bc070f3","modified":1554213791123},{"_id":"public/tags/堆/index.html","hash":"1dc8ce7edf35064a09266e0288a50967c2fe37db","modified":1554213791123},{"_id":"public/tags/生活/index.html","hash":"5ce3a4a259708f7a70e160908ead53d90aa6730b","modified":1554213791123},{"_id":"public/archives/index.html","hash":"bf69b685ede5151e4c68ef5a989da1ff25584c8d","modified":1554213791124},{"_id":"public/archives/page/2/index.html","hash":"01551a1eb77fe7a43632807c6bb5d5b5d2dcbeeb","modified":1554213791124},{"_id":"public/archives/2019/page/2/index.html","hash":"5b8e53ae0f019fdf630922c02837694ba6e62451","modified":1554213791124},{"_id":"public/archives/2019/index.html","hash":"a4616b0db2d084cf919b1487f9ac61959e09adde","modified":1554213791124},{"_id":"public/archives/2019/03/index.html","hash":"72f49f9ba81803db74bfbd4af7f529ab48abf993","modified":1554213791124},{"_id":"public/archives/2019/03/page/2/index.html","hash":"539294258caa93f05a10627e88175882ece03653","modified":1554213791124},{"_id":"public/index.html","hash":"e774919224fc9705b64669e7cba4f751dcf0e7d3","modified":1554216674801},{"_id":"public/page/2/index.html","hash":"01465717fccf57df28c41a0f9dffc85f5027e91a","modified":1554213791124},{"_id":"public/archives/2019/04/index.html","hash":"603c74bfffeef2de09f422ee803bba1254d8cbd1","modified":1554213791130},{"_id":"public/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1554213791130},{"_id":"public/fonts/lg.svg","hash":"1dba95664d2933fe1c22fb95a2e1e3a21839870b","modified":1554213791130},{"_id":"public/images/touxiang1.jpeg","hash":"cd9735b5a22bbeeda9ca13b9c3562489e5c44f0a","modified":1554213791130},{"_id":"public/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1554213791130},{"_id":"public/images/avatar.png","hash":"e63be2fab169a0478af27c47240d1d123fa2b2ba","modified":1554213791131},{"_id":"public/images/logo.png","hash":"fa35ee718a416900fd4b401300fa995a86c234ad","modified":1554213791131},{"_id":"public/2019/03/28/硬汉计划第三天/jiayou.jpg","hash":"60f926eb91d0d702f6928f531bfcb897418e5679","modified":1554213791131},{"_id":"public/2019/03/30/硬汉计划第五天/jiayou.jpg","hash":"345ad5d7c31fc259af6401da7b0a9ef49c7f6946","modified":1554213791131},{"_id":"public/2019/03/25/硬汉计划第一天/yiquan.jpg","hash":"11bd0e2c2e0a683466e7a1dea546adb170aaca43","modified":1554213791131},{"_id":"public/2019/03/29/硬汉计划第四天/jiayou.jpg","hash":"a196b61a247d1dd72e8932a5a93b40fa6d350509","modified":1554213791131},{"_id":"public/2019/03/26/硬汉计划第二天/jiayou.jpg","hash":"06d86a487078988428b85a559c7664901595ca43","modified":1554213791131},{"_id":"public/2019/04/02/硬汉计划第七天/jiayou.jpg","hash":"169df485c3be4d76f521c866062699ab6c0c453f","modified":1554213791132},{"_id":"public/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1554213793087},{"_id":"public/images/tx2.jpeg","hash":"f5a806eae77bbffa3c90b8498839b88adf5cb85b","modified":1554213793087},{"_id":"public/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/1.jpg","hash":"37b0027591254698b85099c49301720ca4d34c84","modified":1554213793088},{"_id":"public/css/custom.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554213793097},{"_id":"public/css/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1554213793097},{"_id":"public/css/footer.css","hash":"d8607ae9fa69b6d24f9245153a7cc1b12b38c20b","modified":1554213793098},{"_id":"public/css/comment.css","hash":"167aa274488ac5ce8b70ae9e3bbb4273d1b300fa","modified":1554213793098},{"_id":"public/css/commentjs.css","hash":"d00731f87a5946fe70c893ba52ccc2b29c1f7ae6","modified":1554213793098},{"_id":"public/css/header.css","hash":"31071ddf899aa442c27f396ed7192cb7a27bc7ad","modified":1554213793098},{"_id":"public/css/atom-one-light.css","hash":"13e7620fe2842fa91cb309391a0b01a0c8712f12","modified":1554213793098},{"_id":"public/css/info.css","hash":"ac778ad846013100e29be192f1ad008de0e4c058","modified":1554213793098},{"_id":"public/css/nav.css","hash":"c0d2d727de09ca89abd037463b8e87710f949755","modified":1554213793098},{"_id":"public/css/page.css","hash":"54b17e0ef8efbcca9cdcd0124630b2206b02b513","modified":1554213793098},{"_id":"public/css/main.css","hash":"bd51af8cb9b6ce7943ee6fca0bddebc41a8e622d","modified":1554213793098},{"_id":"public/css/normalize.css","hash":"734a72e6c28d4a3a870404fb4abf72723c754296","modified":1554213793098},{"_id":"public/css/post.css","hash":"bbe31bc54cda70466033bbd16728496a75fe6d3a","modified":1554213793098},{"_id":"public/css/reward.css","hash":"67f442ef493d49dd2ca682992611408bae224506","modified":1554213793098},{"_id":"public/css/sidebar.css","hash":"e1874d4449e5d54df3c513b22e2df0e24d6ea861","modified":1554213793098},{"_id":"public/css/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1554213793098},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554213793098},{"_id":"public/css/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1554213793099},{"_id":"public/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1554213793099},{"_id":"public/js/custom.js","hash":"7e3e36b3ba8de9c168fa50d4b77449d9865b011a","modified":1554213793099},{"_id":"public/js/index.js","hash":"8984287c5a1492bcfcd12cb0aef79345fe4bb3fd","modified":1554213793099},{"_id":"public/js/lg-pager.min.js","hash":"c4f5c7d91c87761f1626ebb411e5ed6d456799f0","modified":1554213793099},{"_id":"public/js/lg-fullscreen.min.js","hash":"71cf4fbc9ebbc7ccf1c580cd0389f0a28df64bd6","modified":1554213793099},{"_id":"public/js/lg-hash.min.js","hash":"163a3eb6bdd227549bb7b5be61dffed36af474fa","modified":1554213793099},{"_id":"public/js/timeago.min.js","hash":"d220fcc47be00effec6b5181b97cc0929d10031e","modified":1554213793099},{"_id":"public/js/util.js","hash":"f4d0034baaf346b532d1a1602c0b48963a018f23","modified":1554213793099},{"_id":"public/css/index.css","hash":"ccaba264732439700cbf1041e03e0740a1d4df11","modified":1554213793100},{"_id":"public/js/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1554213793110},{"_id":"public/js/lg-thumbnail.min.js","hash":"3f3024b3ff6a5266bd40ed890398d7f2393cd5a5","modified":1554213793110},{"_id":"public/js/lg-zoom.min.js","hash":"b26f6070ad290f937c49289bd52014677dd6073c","modified":1554213793111},{"_id":"public/js/marked.min.js","hash":"c9eb834a28665addef7e66ee1a787fa1cbbb43eb","modified":1554213793111},{"_id":"public/js/scrollspy.js","hash":"724f9a0e12bd5c6a9d8cbf299ef4255621433cbf","modified":1554213793111},{"_id":"public/js/search.js","hash":"9ac9f869aa245a33f1bd72ea58c8168a2f0e9824","modified":1554213793111},{"_id":"public/css/lightgallery.min.css","hash":"9e76bdad163856774a96b1230a08dc506600a973","modified":1554213793115},{"_id":"public/js/commentjs.js","hash":"c60e44a9aa66628bfcc0912ee3a10469b3c2899b","modified":1554213793116},{"_id":"public/js/lightgallery.min.js","hash":"c2101bab37ebcb47cc21a3b92611493a165e5a79","modified":1554213793120},{"_id":"public/images/background.png","hash":"c34366140a0250afbd73d62abdc58b1e00e10355","modified":1554213793125},{"_id":"public/js/highlight.min.js","hash":"02bb4cdaf43c85b7ee4ef6ccf1f3fe8e82fd3ceb","modified":1554213793130},{"_id":"public/2019/03/17/05-递归（上）：泛化数学归纳，如何将复杂问题简单化？/lesson5.jpg","hash":"c4fed5aeb42253a7faeefa1591f7067a3813bf21","modified":1554213793142},{"_id":"public/2019/03/06/03-迭代法：不用编程语言的自带函数，你会如何计算平方根/lessons3.jpg","hash":"c0fb202a3c10df2bc6a1481ccc1a8ab931684ec6","modified":1554213793144},{"_id":"public/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/2.jpg","hash":"370d5afa4999af8aa59a312a424865215798a18d","modified":1554213793145},{"_id":"public/js/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1554213793147},{"_id":"public/2019/03/05/02-余数：原来取余操作本身就是个哈希函数/lesson2.jpg","hash":"708c331ce4b281a62bc3e2ec0f1f3712087bbd39","modified":1554213793147},{"_id":"public/2019/03/07/04-数学归纳法：如何用数学归纳提升代码的运行效率？/lesson4.jpg","hash":"83f40f8e8a8d5323f65f4f6d1af03ac1ac31ec16","modified":1554213793150},{"_id":"public/2019/03/05/01-二进制：不了解计算机的源头，你学什么编程/lesson1.jpg","hash":"b00e5f5f6e87880e06ddffa2ab7c50a91eb720d3","modified":1554213793152},{"_id":"public/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/lesson6.jpg","hash":"b0bcfe337ff5538f852699f056065905bab822bc","modified":1554213793155},{"_id":"public/2019/03/31/硬汉计划第六天/jiayou.png","hash":"95cf28f93ede3a3c70dc52929e546c8f8e0a8880","modified":1554213793158},{"_id":"public/js/fontawesome-all.min.js","hash":"d7ff2806086f5924e06910e90a79b44492b52450","modified":1554213793189},{"_id":"source/_posts/数学专栏课外加餐（一）-我们为什么需要反码和补码？/1.jpg","hash":"7c4e7e638c6cec366b1931f6d09149414ffbbbb1","modified":1554214644379},{"_id":"source/_posts/数学专栏课外加餐（二）-位操作的三个应用实例/1.jpg","hash":"e9d9d5984b74efb5538e4c0c5aea44b17c6cb692","modified":1554214968206},{"_id":"public/2019/03/31/数学专栏课外加餐（一）-我们为什么需要反码和补码？/1.jpg","hash":"7c4e7e638c6cec366b1931f6d09149414ffbbbb1","modified":1554216674802},{"_id":"public/2019/03/31/数学专栏课外加餐（二）-位操作的三个应用实例/1.jpg","hash":"e9d9d5984b74efb5538e4c0c5aea44b17c6cb692","modified":1554216674802}],"Category":[{"name":"网络学习","_id":"cjtzureeg0004a0tsk17300r8"},{"name":"极客时间","parent":"cjtzureeg0004a0tsk17300r8","_id":"cjtzurefc000la0tsiczisvel"},{"name":"算法","_id":"cjtzuregf001ea0tstvu499md"},{"name":"程序员的数学基础课","parent":"cjtzurefc000la0tsiczisvel","_id":"cjtzuregy001wa0tsts6e1o5g"},{"name":"Leetcode","parent":"cjtzuregf001ea0tstvu499md","_id":"cjtzurehn002na0tscqfvlo8k"},{"name":"面试题","parent":"cjtzuregf001ea0tstvu499md","_id":"cjtzurehy002xa0ts9zaegkzz"}],"Data":[],"Page":[{"title":"categories","date":"2019-03-03T14:26:53.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-03-03 22:26:53\ntype: \"categories\"\n---\n","updated":"2019-03-05T08:00:46.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjtzureds0000a0ts1u8hhiwb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-03-03T14:27:11.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-03-03 22:27:11\ntype: \"tags\"\n---\n","updated":"2019-03-05T08:00:46.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjtzuree90002a0tsgdedg0e6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"01 | 二进制：不了解计算机的源头，你学什么编程","date":"2019-03-05T04:25:04.000Z","_content":"\n计算机起源是数学中的二进制法。\n二进制用于很多概念和思想,如逻辑判断，二分法，二叉树等\n<!-- more -->\n\n# 摘要\n\n计算机起源是数学中的二进制法。\n二进制用于很多概念和思想,如逻辑判断，二分法，二叉树等\n\n\n# 疑问\n\n\n## 什么是二进制\n\n\n十进制是以10为基数，二进制是以2为基数\n二进制就是2^n的形式 \n\n\njava二进制转十进制和十进制转二进制\n\n\n\n```java\n /**\n * @Description: 十进制转换成二进制\n * @param decimalSource\n * @return String\n */\npublic static String decimalToBinary(int decimalSource) {\n    BigInteger bi = new BigInteger(String.valueOf(decimalSource)); // 转换成 BigInteger 类型，默认是十进制\n    return bi.toString(2); // 参数 2 指定的是转化成二进制\n}\n\n/**\n * @Description: 二进制转换成十进制\n * @param binarySource\n * @return int\n */\npublic static int binaryToDecimal(String binarySource) {\n    BigInteger bi = new BigInteger(binarySource, 2);  // 转换为 BigInteger 类型，参数 2 指定的是二进制\n    return Integer.parseInt(bi.toString());     // 默认转换成十进制\n}\n```\n\n\n\n\n## 为什么计算机使用二进制？\n\n\n计算机的逻辑电路只有2个状态，断开与接通，一般断开是0，接通为1\n二进制的数据表达具有抗干扰能力强，可靠性高的优点，也符合逻辑运算！\n\n\n# 基本内容\n\n\n## 位操作\n\n\n向左位移 <<\n向右位移 >> 或 >>>\n逻辑位移 >> 算数右移 >>> \n逻辑右移：最高位补0\n算数右移： 最高位原位\n\n\n\n\n```java\n/**\n * @Description: 向左移位\n * @param num- 等待移位的十进制数, m- 向左移的位数\n * @return int- 移位后的十进制数\n */\npublic static int leftShift(int num, int m) {\n    return num << m;\n}\n\n/**\n * @Description: 向右移位\n * @param num- 等待移位的十进制数, m- 向右移的位数\n * @return int- 移位后的十进制数\n */\npublic static int rightShift(int num, int m) {\n    return num >>> m;\n}\n```\n\n\n\n\n## 位运算\n\n\n二进制的0,1分别对应逻辑中的真和假\n或 0 | 1 = 1\n与 0 & 1 = 0\n异或 0 ^ 1 = 1 （只要2进制相同位上的2个数不同，即为真）\n\n\n\n```java\n/**\n * @Description: 二进制按位“或”的操作\n * @param num1- 第一个数字，num2- 第二个数字\n * @return 二进制按位“或”的结果\n */\npublic static int or(int num1, int num2) {\n\n    return (num1 | num2);\n\n}\n\n/**\n * @Description: 二进制按位“与”的操作\n * @param num1- 第一个数字，num2- 第二个数字\n * @return 二进制按位“与”的结果\n */\npublic static int and(int num1, int num2) {\n\n    return (num1 & num2);\n\n}\n\n/**\n\n * @Description: 二进制按位“异或”的操作\n * @param num1- 第一个数字，num2- 第二个数字\n * @return 二进制按位“异或”的结果\n */\n\npublic static int xor(int num1, int num2) {\n\n    return (num1 ^ num2);\n\n    }\n```\n\n\n\n# 思考题\n\n\n## 用什么方法来实现十进制到二进制的转化？(不使用BigInteger类)\n\n\n补充： BigInteger类无法打印负数的2进制！！就无法用于验证了，具体验证方法看扩展的反码补码源码\n\n\n个人思路整理：\n1. 用位移运算 首先与1做与操作，获取一位2进制的结果 \n2. 再用右位移1位的操作， 再与1做与操作， 获取第二位2进制的结果 \n3. 上述过程以此类推，获取到的字符串再做个倒序即可（获取的第一位是二进制的最后一位。）\n\n\n\n```java\npublic static String manual_decimal2binary(int num){\n    String result = \"\";\n    for (int i = 0; i < 32; i++) {\n        int tmp = (num >> i) & 1;\n        result += String.valueOf(tmp);\n    }\n\n    return new StringBuilder(result).reverse().toString();\n}\n```\n\n\n\n网上答案： \n\n\n\n```java\n/**\n * @Title: decimalToBinary\n * @Description: 十进制转二进制，方法1：余数短除法除以二\n * @param decimalSource\n * @return: String\n */\n/*public static String decimalToBinary(int decimalSource) {\n    StringBuilder sb = new StringBuilder();\n    while (decimalSource != 0) {\n        sb.append(decimalSource % 2);\n        decimalSource = decimalSource >> 1;\n    }\n    return sb.reverse().toString();\n}*/\n\n/**\n * @Title: decimalToBinary\n * @Description: 十进制转二进制，方法2：降二次幂及减法混合运算\n * @param decimalSource\n * @return: String\n */\n/*public static String decimalToBinary(int decimalSource) {\n    int length = (int) (Math.log(decimalSource) / Math.log(2));\n    StringBuffer sb = new StringBuffer();\n    do {\n        decimalSource = (int) (decimalSource - Math.pow(2, length));\n        int power = decimalSource <= 0 ? -1 : (int) (Math.log(decimalSource) / Math.log(2));\n        for (int i = length; i > power; i--) {\n            if (i == length) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        length = power;\n    } while (decimalSource > 0);\n    return sb.toString();\n}*/\n/**\n *\n * @Title: decimalToBinary\n * @Description: 十进制转二进制，方法3：位运算法\n * @param decimalSource\n * @return\n * @return: String\n */\npublic static String decimalToBinary(int decimalSource) {\n    StringBuffer sb = new StringBuffer();\n    while (decimalSource != 0) {\n        //此&运算，decimalSource & 1，目的是获取最低位的二进制数值\n        sb.append(decimalSource & 1);\n        //此>>运算，decimalSource >> 1，目的是将获取到的最低位二进制数值除去\n        decimalSource = decimalSource >> 1;\n    }\n    return sb.reverse().toString();\n}\n```\n\n\n\n# 扩展\n\n\n## 原码与反码与补码\n\n\n 原码：一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补1，称为原码。 \n 比如 00000000 00000000 00000000 00000101 是 5的 原码；10000000 00000000 00000000 00000101 是 -5的 原码。 　\n\n 反码：正数的反码与原码相同，负数的反码为对该数的原码除符号位外各位取反。 \n 取反操作指：原为1，得0；原为0，得1。（1变0; 0变1） \n 比如：正数00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101 ； \n 负数10000000 00000000 00000000 00000101每一位取反（除符号位），得11111111 11111111 11111111 11111010。 \n 称：10000000 00000000 00000000 00000101 和 11111111 11111111 11111111 11111010互为反码。 　\n\n 补码：正数的补码与原码相同，负数的补码为对该数的原码除符号位外各位取反，然后在最后一位加1. \n 比如：10000000 00000000 00000000 00000101 的反码是：11111111 11111111 11111111 11111010。 \n 那么，补码为： \n 11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011 \n 所以，-5 在计算机中表达为：11111111 11111111 11111111 11111011。转换为十六进制：0xFFFFFFFB。\n \n 假设这也是一个int类型，那么： \n 1. 先取-1的原码：10000000 00000000 00000000 00000001 \n 2. 得反码： 11111111 11111111 11111111 11111110（除符号位按位取反） \n 3. 得补码： 11111111 11111111 11111111 11111111 \n 可见，－1在计算机里用二进制表达就是全1。16进制为：0xFFFFFF\n\n\n## 位移运算 小窍门\n\n\n向左位移1位 等于原数乘以2\n向右位移1位 等于原数除以2的整数商\n\n\n\n# 小结\n\n![](lesson1.jpg)\n","source":"_posts/01-二进制：不了解计算机的源头，你学什么编程.md","raw":"---\ntitle: 01 | 二进制：不了解计算机的源头，你学什么编程\ndate: 2019-03-05 12:25:04\ntags: 计算机\ncategories: \n- 网络学习\n- 极客时间\n- 程序员的数学基础课\n---\n\n计算机起源是数学中的二进制法。\n二进制用于很多概念和思想,如逻辑判断，二分法，二叉树等\n<!-- more -->\n\n# 摘要\n\n计算机起源是数学中的二进制法。\n二进制用于很多概念和思想,如逻辑判断，二分法，二叉树等\n\n\n# 疑问\n\n\n## 什么是二进制\n\n\n十进制是以10为基数，二进制是以2为基数\n二进制就是2^n的形式 \n\n\njava二进制转十进制和十进制转二进制\n\n\n\n```java\n /**\n * @Description: 十进制转换成二进制\n * @param decimalSource\n * @return String\n */\npublic static String decimalToBinary(int decimalSource) {\n    BigInteger bi = new BigInteger(String.valueOf(decimalSource)); // 转换成 BigInteger 类型，默认是十进制\n    return bi.toString(2); // 参数 2 指定的是转化成二进制\n}\n\n/**\n * @Description: 二进制转换成十进制\n * @param binarySource\n * @return int\n */\npublic static int binaryToDecimal(String binarySource) {\n    BigInteger bi = new BigInteger(binarySource, 2);  // 转换为 BigInteger 类型，参数 2 指定的是二进制\n    return Integer.parseInt(bi.toString());     // 默认转换成十进制\n}\n```\n\n\n\n\n## 为什么计算机使用二进制？\n\n\n计算机的逻辑电路只有2个状态，断开与接通，一般断开是0，接通为1\n二进制的数据表达具有抗干扰能力强，可靠性高的优点，也符合逻辑运算！\n\n\n# 基本内容\n\n\n## 位操作\n\n\n向左位移 <<\n向右位移 >> 或 >>>\n逻辑位移 >> 算数右移 >>> \n逻辑右移：最高位补0\n算数右移： 最高位原位\n\n\n\n\n```java\n/**\n * @Description: 向左移位\n * @param num- 等待移位的十进制数, m- 向左移的位数\n * @return int- 移位后的十进制数\n */\npublic static int leftShift(int num, int m) {\n    return num << m;\n}\n\n/**\n * @Description: 向右移位\n * @param num- 等待移位的十进制数, m- 向右移的位数\n * @return int- 移位后的十进制数\n */\npublic static int rightShift(int num, int m) {\n    return num >>> m;\n}\n```\n\n\n\n\n## 位运算\n\n\n二进制的0,1分别对应逻辑中的真和假\n或 0 | 1 = 1\n与 0 & 1 = 0\n异或 0 ^ 1 = 1 （只要2进制相同位上的2个数不同，即为真）\n\n\n\n```java\n/**\n * @Description: 二进制按位“或”的操作\n * @param num1- 第一个数字，num2- 第二个数字\n * @return 二进制按位“或”的结果\n */\npublic static int or(int num1, int num2) {\n\n    return (num1 | num2);\n\n}\n\n/**\n * @Description: 二进制按位“与”的操作\n * @param num1- 第一个数字，num2- 第二个数字\n * @return 二进制按位“与”的结果\n */\npublic static int and(int num1, int num2) {\n\n    return (num1 & num2);\n\n}\n\n/**\n\n * @Description: 二进制按位“异或”的操作\n * @param num1- 第一个数字，num2- 第二个数字\n * @return 二进制按位“异或”的结果\n */\n\npublic static int xor(int num1, int num2) {\n\n    return (num1 ^ num2);\n\n    }\n```\n\n\n\n# 思考题\n\n\n## 用什么方法来实现十进制到二进制的转化？(不使用BigInteger类)\n\n\n补充： BigInteger类无法打印负数的2进制！！就无法用于验证了，具体验证方法看扩展的反码补码源码\n\n\n个人思路整理：\n1. 用位移运算 首先与1做与操作，获取一位2进制的结果 \n2. 再用右位移1位的操作， 再与1做与操作， 获取第二位2进制的结果 \n3. 上述过程以此类推，获取到的字符串再做个倒序即可（获取的第一位是二进制的最后一位。）\n\n\n\n```java\npublic static String manual_decimal2binary(int num){\n    String result = \"\";\n    for (int i = 0; i < 32; i++) {\n        int tmp = (num >> i) & 1;\n        result += String.valueOf(tmp);\n    }\n\n    return new StringBuilder(result).reverse().toString();\n}\n```\n\n\n\n网上答案： \n\n\n\n```java\n/**\n * @Title: decimalToBinary\n * @Description: 十进制转二进制，方法1：余数短除法除以二\n * @param decimalSource\n * @return: String\n */\n/*public static String decimalToBinary(int decimalSource) {\n    StringBuilder sb = new StringBuilder();\n    while (decimalSource != 0) {\n        sb.append(decimalSource % 2);\n        decimalSource = decimalSource >> 1;\n    }\n    return sb.reverse().toString();\n}*/\n\n/**\n * @Title: decimalToBinary\n * @Description: 十进制转二进制，方法2：降二次幂及减法混合运算\n * @param decimalSource\n * @return: String\n */\n/*public static String decimalToBinary(int decimalSource) {\n    int length = (int) (Math.log(decimalSource) / Math.log(2));\n    StringBuffer sb = new StringBuffer();\n    do {\n        decimalSource = (int) (decimalSource - Math.pow(2, length));\n        int power = decimalSource <= 0 ? -1 : (int) (Math.log(decimalSource) / Math.log(2));\n        for (int i = length; i > power; i--) {\n            if (i == length) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        length = power;\n    } while (decimalSource > 0);\n    return sb.toString();\n}*/\n/**\n *\n * @Title: decimalToBinary\n * @Description: 十进制转二进制，方法3：位运算法\n * @param decimalSource\n * @return\n * @return: String\n */\npublic static String decimalToBinary(int decimalSource) {\n    StringBuffer sb = new StringBuffer();\n    while (decimalSource != 0) {\n        //此&运算，decimalSource & 1，目的是获取最低位的二进制数值\n        sb.append(decimalSource & 1);\n        //此>>运算，decimalSource >> 1，目的是将获取到的最低位二进制数值除去\n        decimalSource = decimalSource >> 1;\n    }\n    return sb.reverse().toString();\n}\n```\n\n\n\n# 扩展\n\n\n## 原码与反码与补码\n\n\n 原码：一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补1，称为原码。 \n 比如 00000000 00000000 00000000 00000101 是 5的 原码；10000000 00000000 00000000 00000101 是 -5的 原码。 　\n\n 反码：正数的反码与原码相同，负数的反码为对该数的原码除符号位外各位取反。 \n 取反操作指：原为1，得0；原为0，得1。（1变0; 0变1） \n 比如：正数00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101 ； \n 负数10000000 00000000 00000000 00000101每一位取反（除符号位），得11111111 11111111 11111111 11111010。 \n 称：10000000 00000000 00000000 00000101 和 11111111 11111111 11111111 11111010互为反码。 　\n\n 补码：正数的补码与原码相同，负数的补码为对该数的原码除符号位外各位取反，然后在最后一位加1. \n 比如：10000000 00000000 00000000 00000101 的反码是：11111111 11111111 11111111 11111010。 \n 那么，补码为： \n 11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011 \n 所以，-5 在计算机中表达为：11111111 11111111 11111111 11111011。转换为十六进制：0xFFFFFFFB。\n \n 假设这也是一个int类型，那么： \n 1. 先取-1的原码：10000000 00000000 00000000 00000001 \n 2. 得反码： 11111111 11111111 11111111 11111110（除符号位按位取反） \n 3. 得补码： 11111111 11111111 11111111 11111111 \n 可见，－1在计算机里用二进制表达就是全1。16进制为：0xFFFFFF\n\n\n## 位移运算 小窍门\n\n\n向左位移1位 等于原数乘以2\n向右位移1位 等于原数除以2的整数商\n\n\n\n# 小结\n\n![](lesson1.jpg)\n","slug":"01-二进制：不了解计算机的源头，你学什么编程","published":1,"updated":"2019-03-05T15:48:06.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzuree10001a0tsheeywlyb","content":"<p>计算机起源是数学中的二进制法。<br>二进制用于很多概念和思想,如逻辑判断，二分法，二叉树等<br><a id=\"more\"></a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>计算机起源是数学中的二进制法。<br>二进制用于很多概念和思想,如逻辑判断，二分法，二叉树等</p>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"什么是二进制\"><a href=\"#什么是二进制\" class=\"headerlink\" title=\"什么是二进制\"></a>什么是二进制</h2><p>十进制是以10为基数，二进制是以2为基数<br>二进制就是2^n的形式 </p>\n<p>java二进制转十进制和十进制转二进制</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 十进制转换成二进制</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> decimalSource</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> String</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decimalToBinary</span><span class=\"params\">(<span class=\"keyword\">int</span> decimalSource)</span> </span>&#123;</span><br><span class=\"line\">    BigInteger bi = <span class=\"keyword\">new</span> BigInteger(String.valueOf(decimalSource)); <span class=\"comment\">// 转换成 BigInteger 类型，默认是十进制</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bi.toString(<span class=\"number\">2</span>); <span class=\"comment\">// 参数 2 指定的是转化成二进制</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 二进制转换成十进制</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> binarySource</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binaryToDecimal</span><span class=\"params\">(String binarySource)</span> </span>&#123;</span><br><span class=\"line\">    BigInteger bi = <span class=\"keyword\">new</span> BigInteger(binarySource, <span class=\"number\">2</span>);  <span class=\"comment\">// 转换为 BigInteger 类型，参数 2 指定的是二进制</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Integer.parseInt(bi.toString());     <span class=\"comment\">// 默认转换成十进制</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么计算机使用二进制？\"><a href=\"#为什么计算机使用二进制？\" class=\"headerlink\" title=\"为什么计算机使用二进制？\"></a>为什么计算机使用二进制？</h2><p>计算机的逻辑电路只有2个状态，断开与接通，一般断开是0，接通为1<br>二进制的数据表达具有抗干扰能力强，可靠性高的优点，也符合逻辑运算！</p>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"位操作\"><a href=\"#位操作\" class=\"headerlink\" title=\"位操作\"></a>位操作</h2><p>向左位移 &lt;&lt;<br>向右位移 &gt;&gt; 或 &gt;&gt;&gt;<br>逻辑位移 &gt;&gt; 算数右移 &gt;&gt;&gt;<br>逻辑右移：最高位补0<br>算数右移： 最高位原位</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 向左移位</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num- 等待移位的十进制数, m- 向左移的位数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int- 移位后的十进制数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">leftShift</span><span class=\"params\">(<span class=\"keyword\">int</span> num, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &lt;&lt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 向右移位</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num- 等待移位的十进制数, m- 向右移的位数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int- 移位后的十进制数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">rightShift</span><span class=\"params\">(<span class=\"keyword\">int</span> num, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &gt;&gt;&gt; m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><p>二进制的0,1分别对应逻辑中的真和假<br>或 0 | 1 = 1<br>与 0 &amp; 1 = 0<br>异或 0 ^ 1 = 1 （只要2进制相同位上的2个数不同，即为真）</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 二进制按位“或”的操作</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num1- 第一个数字，num2- 第二个数字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二进制按位“或”的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">or</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num1 | num2);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 二进制按位“与”的操作</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num1- 第一个数字，num2- 第二个数字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二进制按位“与”的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">and</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num1 &amp; num2);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 二进制按位“异或”的操作</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num1- 第一个数字，num2- 第二个数字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二进制按位“异或”的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">xor</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num1 ^ num2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"用什么方法来实现十进制到二进制的转化？-不使用BigInteger类\"><a href=\"#用什么方法来实现十进制到二进制的转化？-不使用BigInteger类\" class=\"headerlink\" title=\"用什么方法来实现十进制到二进制的转化？(不使用BigInteger类)\"></a>用什么方法来实现十进制到二进制的转化？(不使用BigInteger类)</h2><p>补充： BigInteger类无法打印负数的2进制！！就无法用于验证了，具体验证方法看扩展的反码补码源码</p>\n<p>个人思路整理：</p>\n<ol>\n<li>用位移运算 首先与1做与操作，获取一位2进制的结果 </li>\n<li>再用右位移1位的操作， 再与1做与操作， 获取第二位2进制的结果 </li>\n<li>上述过程以此类推，获取到的字符串再做个倒序即可（获取的第一位是二进制的最后一位。）</li>\n</ol>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">manual_decimal2binary</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    String result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = (num &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        result += String.valueOf(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StringBuilder(result).reverse().toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>网上答案： </p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Title</span>: decimalToBinary</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 十进制转二进制，方法1：余数短除法除以二</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> decimalSource</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span>: String</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/*public static String decimalToBinary(int decimalSource) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    StringBuilder sb = new StringBuilder();</span></span><br><span class=\"line\"><span class=\"comment\">    while (decimalSource != 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        sb.append(decimalSource % 2);</span></span><br><span class=\"line\"><span class=\"comment\">        decimalSource = decimalSource &gt;&gt; 1;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    return sb.reverse().toString();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Title</span>: decimalToBinary</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 十进制转二进制，方法2：降二次幂及减法混合运算</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> decimalSource</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span>: String</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/*public static String decimalToBinary(int decimalSource) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int length = (int) (Math.log(decimalSource) / Math.log(2));</span></span><br><span class=\"line\"><span class=\"comment\">    StringBuffer sb = new StringBuffer();</span></span><br><span class=\"line\"><span class=\"comment\">    do &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        decimalSource = (int) (decimalSource - Math.pow(2, length));</span></span><br><span class=\"line\"><span class=\"comment\">        int power = decimalSource &lt;= 0 ? -1 : (int) (Math.log(decimalSource) / Math.log(2));</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = length; i &gt; power; i--) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if (i == length) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                sb.append(\"1\");</span></span><br><span class=\"line\"><span class=\"comment\">            &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                sb.append(\"0\");</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        length = power;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; while (decimalSource &gt; 0);</span></span><br><span class=\"line\"><span class=\"comment\">    return sb.toString();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Title</span>: decimalToBinary</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 十进制转二进制，方法3：位运算法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> decimalSource</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span>: String</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decimalToBinary</span><span class=\"params\">(<span class=\"keyword\">int</span> decimalSource)</span> </span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (decimalSource != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//此&amp;运算，decimalSource &amp; 1，目的是获取最低位的二进制数值</span></span><br><span class=\"line\">        sb.append(decimalSource &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//此&gt;&gt;运算，decimalSource &gt;&gt; 1，目的是将获取到的最低位二进制数值除去</span></span><br><span class=\"line\">        decimalSource = decimalSource &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.reverse().toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"原码与反码与补码\"><a href=\"#原码与反码与补码\" class=\"headerlink\" title=\"原码与反码与补码\"></a>原码与反码与补码</h2><p> 原码：一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补1，称为原码。<br> 比如 00000000 00000000 00000000 00000101 是 5的 原码；10000000 00000000 00000000 00000101 是 -5的 原码。 　</p>\n<p> 反码：正数的反码与原码相同，负数的反码为对该数的原码除符号位外各位取反。<br> 取反操作指：原为1，得0；原为0，得1。（1变0; 0变1）<br> 比如：正数00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101 ；<br> 负数10000000 00000000 00000000 00000101每一位取反（除符号位），得11111111 11111111 11111111 11111010。<br> 称：10000000 00000000 00000000 00000101 和 11111111 11111111 11111111 11111010互为反码。 　</p>\n<p> 补码：正数的补码与原码相同，负数的补码为对该数的原码除符号位外各位取反，然后在最后一位加1.<br> 比如：10000000 00000000 00000000 00000101 的反码是：11111111 11111111 11111111 11111010。<br> 那么，补码为：<br> 11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011<br> 所以，-5 在计算机中表达为：11111111 11111111 11111111 11111011。转换为十六进制：0xFFFFFFFB。</p>\n<p> 假设这也是一个int类型，那么： </p>\n<ol>\n<li>先取-1的原码：10000000 00000000 00000000 00000001 </li>\n<li>得反码： 11111111 11111111 11111111 11111110（除符号位按位取反） </li>\n<li>得补码： 11111111 11111111 11111111 11111111<br>可见，－1在计算机里用二进制表达就是全1。16进制为：0xFFFFFF</li>\n</ol>\n<h2 id=\"位移运算-小窍门\"><a href=\"#位移运算-小窍门\" class=\"headerlink\" title=\"位移运算 小窍门\"></a>位移运算 小窍门</h2><p>向左位移1位 等于原数乘以2<br>向右位移1位 等于原数除以2的整数商</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/05/01-二进制：不了解计算机的源头，你学什么编程/lesson1.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>计算机起源是数学中的二进制法。<br>二进制用于很多概念和思想,如逻辑判断，二分法，二叉树等<br>","more":"</p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>计算机起源是数学中的二进制法。<br>二进制用于很多概念和思想,如逻辑判断，二分法，二叉树等</p>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"什么是二进制\"><a href=\"#什么是二进制\" class=\"headerlink\" title=\"什么是二进制\"></a>什么是二进制</h2><p>十进制是以10为基数，二进制是以2为基数<br>二进制就是2^n的形式 </p>\n<p>java二进制转十进制和十进制转二进制</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 十进制转换成二进制</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> decimalSource</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> String</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decimalToBinary</span><span class=\"params\">(<span class=\"keyword\">int</span> decimalSource)</span> </span>&#123;</span><br><span class=\"line\">    BigInteger bi = <span class=\"keyword\">new</span> BigInteger(String.valueOf(decimalSource)); <span class=\"comment\">// 转换成 BigInteger 类型，默认是十进制</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bi.toString(<span class=\"number\">2</span>); <span class=\"comment\">// 参数 2 指定的是转化成二进制</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 二进制转换成十进制</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> binarySource</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binaryToDecimal</span><span class=\"params\">(String binarySource)</span> </span>&#123;</span><br><span class=\"line\">    BigInteger bi = <span class=\"keyword\">new</span> BigInteger(binarySource, <span class=\"number\">2</span>);  <span class=\"comment\">// 转换为 BigInteger 类型，参数 2 指定的是二进制</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Integer.parseInt(bi.toString());     <span class=\"comment\">// 默认转换成十进制</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么计算机使用二进制？\"><a href=\"#为什么计算机使用二进制？\" class=\"headerlink\" title=\"为什么计算机使用二进制？\"></a>为什么计算机使用二进制？</h2><p>计算机的逻辑电路只有2个状态，断开与接通，一般断开是0，接通为1<br>二进制的数据表达具有抗干扰能力强，可靠性高的优点，也符合逻辑运算！</p>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"位操作\"><a href=\"#位操作\" class=\"headerlink\" title=\"位操作\"></a>位操作</h2><p>向左位移 &lt;&lt;<br>向右位移 &gt;&gt; 或 &gt;&gt;&gt;<br>逻辑位移 &gt;&gt; 算数右移 &gt;&gt;&gt;<br>逻辑右移：最高位补0<br>算数右移： 最高位原位</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 向左移位</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num- 等待移位的十进制数, m- 向左移的位数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int- 移位后的十进制数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">leftShift</span><span class=\"params\">(<span class=\"keyword\">int</span> num, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &lt;&lt; m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 向右移位</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num- 等待移位的十进制数, m- 向右移的位数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int- 移位后的十进制数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">rightShift</span><span class=\"params\">(<span class=\"keyword\">int</span> num, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &gt;&gt;&gt; m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><p>二进制的0,1分别对应逻辑中的真和假<br>或 0 | 1 = 1<br>与 0 &amp; 1 = 0<br>异或 0 ^ 1 = 1 （只要2进制相同位上的2个数不同，即为真）</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 二进制按位“或”的操作</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num1- 第一个数字，num2- 第二个数字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二进制按位“或”的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">or</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num1 | num2);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 二进制按位“与”的操作</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num1- 第一个数字，num2- 第二个数字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二进制按位“与”的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">and</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num1 &amp; num2);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 二进制按位“异或”的操作</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> num1- 第一个数字，num2- 第二个数字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 二进制按位“异或”的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">xor</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (num1 ^ num2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"用什么方法来实现十进制到二进制的转化？-不使用BigInteger类\"><a href=\"#用什么方法来实现十进制到二进制的转化？-不使用BigInteger类\" class=\"headerlink\" title=\"用什么方法来实现十进制到二进制的转化？(不使用BigInteger类)\"></a>用什么方法来实现十进制到二进制的转化？(不使用BigInteger类)</h2><p>补充： BigInteger类无法打印负数的2进制！！就无法用于验证了，具体验证方法看扩展的反码补码源码</p>\n<p>个人思路整理：</p>\n<ol>\n<li>用位移运算 首先与1做与操作，获取一位2进制的结果 </li>\n<li>再用右位移1位的操作， 再与1做与操作， 获取第二位2进制的结果 </li>\n<li>上述过程以此类推，获取到的字符串再做个倒序即可（获取的第一位是二进制的最后一位。）</li>\n</ol>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">manual_decimal2binary</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    String result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = (num &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        result += String.valueOf(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StringBuilder(result).reverse().toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>网上答案： </p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Title</span>: decimalToBinary</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 十进制转二进制，方法1：余数短除法除以二</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> decimalSource</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span>: String</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/*public static String decimalToBinary(int decimalSource) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    StringBuilder sb = new StringBuilder();</span></span><br><span class=\"line\"><span class=\"comment\">    while (decimalSource != 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        sb.append(decimalSource % 2);</span></span><br><span class=\"line\"><span class=\"comment\">        decimalSource = decimalSource &gt;&gt; 1;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    return sb.reverse().toString();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Title</span>: decimalToBinary</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 十进制转二进制，方法2：降二次幂及减法混合运算</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> decimalSource</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span>: String</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/*public static String decimalToBinary(int decimalSource) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int length = (int) (Math.log(decimalSource) / Math.log(2));</span></span><br><span class=\"line\"><span class=\"comment\">    StringBuffer sb = new StringBuffer();</span></span><br><span class=\"line\"><span class=\"comment\">    do &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        decimalSource = (int) (decimalSource - Math.pow(2, length));</span></span><br><span class=\"line\"><span class=\"comment\">        int power = decimalSource &lt;= 0 ? -1 : (int) (Math.log(decimalSource) / Math.log(2));</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = length; i &gt; power; i--) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if (i == length) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                sb.append(\"1\");</span></span><br><span class=\"line\"><span class=\"comment\">            &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                sb.append(\"0\");</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        length = power;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; while (decimalSource &gt; 0);</span></span><br><span class=\"line\"><span class=\"comment\">    return sb.toString();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Title</span>: decimalToBinary</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 十进制转二进制，方法3：位运算法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> decimalSource</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span>: String</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decimalToBinary</span><span class=\"params\">(<span class=\"keyword\">int</span> decimalSource)</span> </span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (decimalSource != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//此&amp;运算，decimalSource &amp; 1，目的是获取最低位的二进制数值</span></span><br><span class=\"line\">        sb.append(decimalSource &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//此&gt;&gt;运算，decimalSource &gt;&gt; 1，目的是将获取到的最低位二进制数值除去</span></span><br><span class=\"line\">        decimalSource = decimalSource &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.reverse().toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"原码与反码与补码\"><a href=\"#原码与反码与补码\" class=\"headerlink\" title=\"原码与反码与补码\"></a>原码与反码与补码</h2><p> 原码：一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补1，称为原码。<br> 比如 00000000 00000000 00000000 00000101 是 5的 原码；10000000 00000000 00000000 00000101 是 -5的 原码。 　</p>\n<p> 反码：正数的反码与原码相同，负数的反码为对该数的原码除符号位外各位取反。<br> 取反操作指：原为1，得0；原为0，得1。（1变0; 0变1）<br> 比如：正数00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101 ；<br> 负数10000000 00000000 00000000 00000101每一位取反（除符号位），得11111111 11111111 11111111 11111010。<br> 称：10000000 00000000 00000000 00000101 和 11111111 11111111 11111111 11111010互为反码。 　</p>\n<p> 补码：正数的补码与原码相同，负数的补码为对该数的原码除符号位外各位取反，然后在最后一位加1.<br> 比如：10000000 00000000 00000000 00000101 的反码是：11111111 11111111 11111111 11111010。<br> 那么，补码为：<br> 11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011<br> 所以，-5 在计算机中表达为：11111111 11111111 11111111 11111011。转换为十六进制：0xFFFFFFFB。</p>\n<p> 假设这也是一个int类型，那么： </p>\n<ol>\n<li>先取-1的原码：10000000 00000000 00000000 00000001 </li>\n<li>得反码： 11111111 11111111 11111111 11111110（除符号位按位取反） </li>\n<li>得补码： 11111111 11111111 11111111 11111111<br>可见，－1在计算机里用二进制表达就是全1。16进制为：0xFFFFFF</li>\n</ol>\n<h2 id=\"位移运算-小窍门\"><a href=\"#位移运算-小窍门\" class=\"headerlink\" title=\"位移运算 小窍门\"></a>位移运算 小窍门</h2><p>向左位移1位 等于原数乘以2<br>向右位移1位 等于原数除以2的整数商</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/05/01-二进制：不了解计算机的源头，你学什么编程/lesson1.jpg\" alt></p>"},{"title":"02 | 余数：原来取余操作本身就是个哈希函数 ","date":"2019-03-05T10:07:45.000Z","_content":"余数总是在一个固定的范围内。\n余数的应用场景，WEB分页，散列函数，加密算法，也有循环冗余校验等\n\n<!-- more -->\n\n# 摘要\n\n\n余数总是在一个固定的范围内。\n余数的应用场景WEB分页，散列函数，加密算法，也有循环冗余校验等\n\n\n# 疑问\n\n\n## 当1900年1月1日为周三时，这天后的第10000天是周几？\n\n\n思路：\n10000/7的余数是 4\n那么1900年1月1日后的10000天就是周3+4天那就是周7\n\n\n```java\npublic static void main(String[] args) {\n\ttry {\n\t\tSystem.out.println(\"10000/7 的余数 ：\" + 10000%7);\n\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tDate date = sdf.parse(\"1991-01-01\");\n\t\tCalendar  ca = Calendar.getInstance();\n\t\tca.setTime(date);\n\t\tint weekday=ca.get(Calendar.DAY_OF_WEEK);\n\t\tSystem.out.println(\"1991-01-01 是周几 ：\"+weekday);\n\n\t\tca.add(Calendar.DATE, 10000);\n\t\tint dt = ca.get(Calendar.DAY_OF_WEEK);\n\t\tSystem.out.println(\"1991-01-01 后的10000天 是周几 ：\"+dt);\n\t} catch (ParseException e) {\n\t\te.printStackTrace();\n\t}\n\t\n}\n```\n\n\n# 基本内容\n\n## 同余定理\n\n\n基本概念：\n数论中的重要概念。给定一个正整数m，如果两个整数a和b满足a-b能够被m整除，即(a-b)/m得到一个整数，那么就称整数a与b对模m同余，记作a≡b(mod m)。对模m同余是整数的一个等价关系。\n\n\n举例说明：\n今天是星期一，从今天开始的 100 天里，都有多少个星期呢？你拿 100 除以 7，得到商 14 余 2，也就是说这 100 天里有 14 周多 2 天。\n换个角度看，我们可以说，这 100 天里，你的第 1 天、第 8 天、第 15 天等等，在余数的世界里都被认为是同一天，因为它们的余数都是 1，都是星期一.\n同理，第 2 天、第 9 天、第 16 天余数都是 2，它们都是星期二。\n\n\n结论：\n同余定理其实就是用来分类的\n\n\n## 哈希\n\n基本概念：\n任意长度的输入，通过哈希算法，压缩为某一固定长的输出。\n\n举例说明：\n有100万调数据需要存放，为了实现快速的写入和读取。\n可以使用hash。好处是不用将数据都存在一个连续的地址空间。\n可以开辟多个连续地址空间，通过余数，将任意数值转换为有限范围内的一个数值，\n然后根据这个数值，确定新存放的地址空间。\n\n扩充说明：\n可以增加一个最大值，来增加它散列的随机程度。\n假如： 原本是 1 %9 = 1 存放到1号地址空间\n那么现在 （1 + 590199） % 9 = 7 现在就存放到了7号地址空间\n像这样的场景一般用于加密算法，mapreduce的数据分发，记录的高速查询和定位等\n\n## 加密算法\n\n\n自己定义一个加密算法，加密规则：\n1.先对每个三位数的个、十和百位数，都加上一个较大的随机数。\n2.然后将每位上的数都除以9，用所得的余数代替原有的个、十、百位数\n3.最后将第一位和第三位交换\n\n\n```java\n//加密\npublic static String encrypt_str(int org){\n\tint fix_bigint = 298357;\n\tString org_s = String.valueOf(org);\n\tint bai = Integer.valueOf(String.valueOf(org_s.charAt(0)));\n\tint shi = Integer.valueOf(String.valueOf(org_s.toCharArray()[1]));\n\tint ge = Integer.valueOf(String.valueOf(org_s.toCharArray()[2]));\n\tint new_bai = (bai + fix_bigint) % 9;\n\tint new_shi = (shi + fix_bigint) % 9;\n\tint new_ge = (ge + fix_bigint) % 9;\n\tString result = String.valueOf(new_ge) + String.valueOf(new_shi) + String.valueOf(new_bai);\n\treturn result;\n}\n\npublic static int yu_count(int shi, int base){\n\tint new_shi = shi;\n\tif(shi< base){\n\t\tnew_shi = 9 - base + shi;\n\t}else if(shi> base){\n\t\tnew_shi = shi - base;\n\t}else{\n\t\tnew_shi = 0;\n\t}\n\treturn new_shi;\n}\n//解密\npublic static String dencrypt_str(int org){\n\tint fix_bigint = 298357;\n\tString org_s = String.valueOf(org);\n\tint bai = Integer.valueOf(String.valueOf(org_s.charAt(0)));\n\tint shi = Integer.valueOf(String.valueOf(org_s.toCharArray()[1]));\n\tint ge = Integer.valueOf(String.valueOf(org_s.toCharArray()[2]));\n\tint base = 298357 % 9;\n\tint new_bai = yu_count(bai, base);\n\tint new_shi = yu_count(shi, base);\n\tint new_ge = yu_count(ge, base);\n\n\tString result = String.valueOf(new_ge) + String.valueOf(new_shi) + String.valueOf(new_bai);\n\treturn result;\n}\n```\n\n# 思考题\n\n\n## 生活和编程中哪些用到了余数思想？\n\n\nmapreduce，reduce端的partition\n\n\n网上的答案：\n\n生活中的话，闰年的计算就是典型的余数决定了\n\n\n# 扩展\n\n## 闰年\n\n闰年是能被4整除但是不能被100整除，但是能被400整除。\n\n### 判断那年是闰年\n\n```java\npublic  static boolean is_runnian(String nian){\n\tboolean flag =false;\n\tint int_nian = Integer.valueOf(nian);\n\tif((int_nian % 4 ==0 && int_nian % 100 !=0) || int_nian % 400 == 0){\n\t\tflag = true;\n\t}\n\treturn flag;\n}\n```\n\n# 小结\n\n\n![](lesson2.jpg)","source":"_posts/02-余数：原来取余操作本身就是个哈希函数.md","raw":"---\ntitle: '02 | 余数：原来取余操作本身就是个哈希函数 '\ndate: 2019-03-05 18:07:45\ntags: 计算机\ncategories: \n- 网络学习\n- 极客时间\n- 程序员的数学基础课\n---\n余数总是在一个固定的范围内。\n余数的应用场景，WEB分页，散列函数，加密算法，也有循环冗余校验等\n\n<!-- more -->\n\n# 摘要\n\n\n余数总是在一个固定的范围内。\n余数的应用场景WEB分页，散列函数，加密算法，也有循环冗余校验等\n\n\n# 疑问\n\n\n## 当1900年1月1日为周三时，这天后的第10000天是周几？\n\n\n思路：\n10000/7的余数是 4\n那么1900年1月1日后的10000天就是周3+4天那就是周7\n\n\n```java\npublic static void main(String[] args) {\n\ttry {\n\t\tSystem.out.println(\"10000/7 的余数 ：\" + 10000%7);\n\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tDate date = sdf.parse(\"1991-01-01\");\n\t\tCalendar  ca = Calendar.getInstance();\n\t\tca.setTime(date);\n\t\tint weekday=ca.get(Calendar.DAY_OF_WEEK);\n\t\tSystem.out.println(\"1991-01-01 是周几 ：\"+weekday);\n\n\t\tca.add(Calendar.DATE, 10000);\n\t\tint dt = ca.get(Calendar.DAY_OF_WEEK);\n\t\tSystem.out.println(\"1991-01-01 后的10000天 是周几 ：\"+dt);\n\t} catch (ParseException e) {\n\t\te.printStackTrace();\n\t}\n\t\n}\n```\n\n\n# 基本内容\n\n## 同余定理\n\n\n基本概念：\n数论中的重要概念。给定一个正整数m，如果两个整数a和b满足a-b能够被m整除，即(a-b)/m得到一个整数，那么就称整数a与b对模m同余，记作a≡b(mod m)。对模m同余是整数的一个等价关系。\n\n\n举例说明：\n今天是星期一，从今天开始的 100 天里，都有多少个星期呢？你拿 100 除以 7，得到商 14 余 2，也就是说这 100 天里有 14 周多 2 天。\n换个角度看，我们可以说，这 100 天里，你的第 1 天、第 8 天、第 15 天等等，在余数的世界里都被认为是同一天，因为它们的余数都是 1，都是星期一.\n同理，第 2 天、第 9 天、第 16 天余数都是 2，它们都是星期二。\n\n\n结论：\n同余定理其实就是用来分类的\n\n\n## 哈希\n\n基本概念：\n任意长度的输入，通过哈希算法，压缩为某一固定长的输出。\n\n举例说明：\n有100万调数据需要存放，为了实现快速的写入和读取。\n可以使用hash。好处是不用将数据都存在一个连续的地址空间。\n可以开辟多个连续地址空间，通过余数，将任意数值转换为有限范围内的一个数值，\n然后根据这个数值，确定新存放的地址空间。\n\n扩充说明：\n可以增加一个最大值，来增加它散列的随机程度。\n假如： 原本是 1 %9 = 1 存放到1号地址空间\n那么现在 （1 + 590199） % 9 = 7 现在就存放到了7号地址空间\n像这样的场景一般用于加密算法，mapreduce的数据分发，记录的高速查询和定位等\n\n## 加密算法\n\n\n自己定义一个加密算法，加密规则：\n1.先对每个三位数的个、十和百位数，都加上一个较大的随机数。\n2.然后将每位上的数都除以9，用所得的余数代替原有的个、十、百位数\n3.最后将第一位和第三位交换\n\n\n```java\n//加密\npublic static String encrypt_str(int org){\n\tint fix_bigint = 298357;\n\tString org_s = String.valueOf(org);\n\tint bai = Integer.valueOf(String.valueOf(org_s.charAt(0)));\n\tint shi = Integer.valueOf(String.valueOf(org_s.toCharArray()[1]));\n\tint ge = Integer.valueOf(String.valueOf(org_s.toCharArray()[2]));\n\tint new_bai = (bai + fix_bigint) % 9;\n\tint new_shi = (shi + fix_bigint) % 9;\n\tint new_ge = (ge + fix_bigint) % 9;\n\tString result = String.valueOf(new_ge) + String.valueOf(new_shi) + String.valueOf(new_bai);\n\treturn result;\n}\n\npublic static int yu_count(int shi, int base){\n\tint new_shi = shi;\n\tif(shi< base){\n\t\tnew_shi = 9 - base + shi;\n\t}else if(shi> base){\n\t\tnew_shi = shi - base;\n\t}else{\n\t\tnew_shi = 0;\n\t}\n\treturn new_shi;\n}\n//解密\npublic static String dencrypt_str(int org){\n\tint fix_bigint = 298357;\n\tString org_s = String.valueOf(org);\n\tint bai = Integer.valueOf(String.valueOf(org_s.charAt(0)));\n\tint shi = Integer.valueOf(String.valueOf(org_s.toCharArray()[1]));\n\tint ge = Integer.valueOf(String.valueOf(org_s.toCharArray()[2]));\n\tint base = 298357 % 9;\n\tint new_bai = yu_count(bai, base);\n\tint new_shi = yu_count(shi, base);\n\tint new_ge = yu_count(ge, base);\n\n\tString result = String.valueOf(new_ge) + String.valueOf(new_shi) + String.valueOf(new_bai);\n\treturn result;\n}\n```\n\n# 思考题\n\n\n## 生活和编程中哪些用到了余数思想？\n\n\nmapreduce，reduce端的partition\n\n\n网上的答案：\n\n生活中的话，闰年的计算就是典型的余数决定了\n\n\n# 扩展\n\n## 闰年\n\n闰年是能被4整除但是不能被100整除，但是能被400整除。\n\n### 判断那年是闰年\n\n```java\npublic  static boolean is_runnian(String nian){\n\tboolean flag =false;\n\tint int_nian = Integer.valueOf(nian);\n\tif((int_nian % 4 ==0 && int_nian % 100 !=0) || int_nian % 400 == 0){\n\t\tflag = true;\n\t}\n\treturn flag;\n}\n```\n\n# 小结\n\n\n![](lesson2.jpg)","slug":"02-余数：原来取余操作本身就是个哈希函数","published":1,"updated":"2019-03-13T15:08:16.167Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzureeb0003a0tsiql9121x","content":"<p>余数总是在一个固定的范围内。<br>余数的应用场景，WEB分页，散列函数，加密算法，也有循环冗余校验等</p>\n<a id=\"more\"></a>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>余数总是在一个固定的范围内。<br>余数的应用场景WEB分页，散列函数，加密算法，也有循环冗余校验等</p>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"当1900年1月1日为周三时，这天后的第10000天是周几？\"><a href=\"#当1900年1月1日为周三时，这天后的第10000天是周几？\" class=\"headerlink\" title=\"当1900年1月1日为周三时，这天后的第10000天是周几？\"></a>当1900年1月1日为周三时，这天后的第10000天是周几？</h2><p>思路：<br>10000/7的余数是 4<br>那么1900年1月1日后的10000天就是周3+4天那就是周7</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"10000/7 的余数 ：\"</span> + <span class=\"number\">10000</span>%<span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\">\t\tDate date = sdf.parse(<span class=\"string\">\"1991-01-01\"</span>);</span><br><span class=\"line\">\t\tCalendar  ca = Calendar.getInstance();</span><br><span class=\"line\">\t\tca.setTime(date);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> weekday=ca.get(Calendar.DAY_OF_WEEK);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"1991-01-01 是周几 ：\"</span>+weekday);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tca.add(Calendar.DATE, <span class=\"number\">10000</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> dt = ca.get(Calendar.DAY_OF_WEEK);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"1991-01-01 后的10000天 是周几 ：\"</span>+dt);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"同余定理\"><a href=\"#同余定理\" class=\"headerlink\" title=\"同余定理\"></a>同余定理</h2><p>基本概念：<br>数论中的重要概念。给定一个正整数m，如果两个整数a和b满足a-b能够被m整除，即(a-b)/m得到一个整数，那么就称整数a与b对模m同余，记作a≡b(mod m)。对模m同余是整数的一个等价关系。</p>\n<p>举例说明：<br>今天是星期一，从今天开始的 100 天里，都有多少个星期呢？你拿 100 除以 7，得到商 14 余 2，也就是说这 100 天里有 14 周多 2 天。<br>换个角度看，我们可以说，这 100 天里，你的第 1 天、第 8 天、第 15 天等等，在余数的世界里都被认为是同一天，因为它们的余数都是 1，都是星期一.<br>同理，第 2 天、第 9 天、第 16 天余数都是 2，它们都是星期二。</p>\n<p>结论：<br>同余定理其实就是用来分类的</p>\n<h2 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h2><p>基本概念：<br>任意长度的输入，通过哈希算法，压缩为某一固定长的输出。</p>\n<p>举例说明：<br>有100万调数据需要存放，为了实现快速的写入和读取。<br>可以使用hash。好处是不用将数据都存在一个连续的地址空间。<br>可以开辟多个连续地址空间，通过余数，将任意数值转换为有限范围内的一个数值，<br>然后根据这个数值，确定新存放的地址空间。</p>\n<p>扩充说明：<br>可以增加一个最大值，来增加它散列的随机程度。<br>假如： 原本是 1 %9 = 1 存放到1号地址空间<br>那么现在 （1 + 590199） % 9 = 7 现在就存放到了7号地址空间<br>像这样的场景一般用于加密算法，mapreduce的数据分发，记录的高速查询和定位等</p>\n<h2 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h2><p>自己定义一个加密算法，加密规则：<br>1.先对每个三位数的个、十和百位数，都加上一个较大的随机数。<br>2.然后将每位上的数都除以9，用所得的余数代替原有的个、十、百位数<br>3.最后将第一位和第三位交换</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encrypt_str</span><span class=\"params\">(<span class=\"keyword\">int</span> org)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fix_bigint = <span class=\"number\">298357</span>;</span><br><span class=\"line\">\tString org_s = String.valueOf(org);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bai = Integer.valueOf(String.valueOf(org_s.charAt(<span class=\"number\">0</span>)));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> shi = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class=\"number\">1</span>]));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ge = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class=\"number\">2</span>]));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_bai = (bai + fix_bigint) % <span class=\"number\">9</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_shi = (shi + fix_bigint) % <span class=\"number\">9</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_ge = (ge + fix_bigint) % <span class=\"number\">9</span>;</span><br><span class=\"line\">\tString result = String.valueOf(new_ge) + String.valueOf(new_shi) + String.valueOf(new_bai);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">yu_count</span><span class=\"params\">(<span class=\"keyword\">int</span> shi, <span class=\"keyword\">int</span> base)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_shi = shi;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(shi&lt; base)&#123;</span><br><span class=\"line\">\t\tnew_shi = <span class=\"number\">9</span> - base + shi;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shi&gt; base)&#123;</span><br><span class=\"line\">\t\tnew_shi = shi - base;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tnew_shi = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> new_shi;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">dencrypt_str</span><span class=\"params\">(<span class=\"keyword\">int</span> org)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fix_bigint = <span class=\"number\">298357</span>;</span><br><span class=\"line\">\tString org_s = String.valueOf(org);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bai = Integer.valueOf(String.valueOf(org_s.charAt(<span class=\"number\">0</span>)));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> shi = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class=\"number\">1</span>]));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ge = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class=\"number\">2</span>]));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> base = <span class=\"number\">298357</span> % <span class=\"number\">9</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_bai = yu_count(bai, base);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_shi = yu_count(shi, base);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_ge = yu_count(ge, base);</span><br><span class=\"line\"></span><br><span class=\"line\">\tString result = String.valueOf(new_ge) + String.valueOf(new_shi) + String.valueOf(new_bai);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"生活和编程中哪些用到了余数思想？\"><a href=\"#生活和编程中哪些用到了余数思想？\" class=\"headerlink\" title=\"生活和编程中哪些用到了余数思想？\"></a>生活和编程中哪些用到了余数思想？</h2><p>mapreduce，reduce端的partition</p>\n<p>网上的答案：</p>\n<p>生活中的话，闰年的计算就是典型的余数决定了</p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"闰年\"><a href=\"#闰年\" class=\"headerlink\" title=\"闰年\"></a>闰年</h2><p>闰年是能被4整除但是不能被100整除，但是能被400整除。</p>\n<h3 id=\"判断那年是闰年\"><a href=\"#判断那年是闰年\" class=\"headerlink\" title=\"判断那年是闰年\"></a>判断那年是闰年</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is_runnian</span><span class=\"params\">(String nian)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> flag =<span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> int_nian = Integer.valueOf(nian);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((int_nian % <span class=\"number\">4</span> ==<span class=\"number\">0</span> &amp;&amp; int_nian % <span class=\"number\">100</span> !=<span class=\"number\">0</span>) || int_nian % <span class=\"number\">400</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/05/02-余数：原来取余操作本身就是个哈希函数/lesson2.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>余数总是在一个固定的范围内。<br>余数的应用场景，WEB分页，散列函数，加密算法，也有循环冗余校验等</p>","more":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>余数总是在一个固定的范围内。<br>余数的应用场景WEB分页，散列函数，加密算法，也有循环冗余校验等</p>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"当1900年1月1日为周三时，这天后的第10000天是周几？\"><a href=\"#当1900年1月1日为周三时，这天后的第10000天是周几？\" class=\"headerlink\" title=\"当1900年1月1日为周三时，这天后的第10000天是周几？\"></a>当1900年1月1日为周三时，这天后的第10000天是周几？</h2><p>思路：<br>10000/7的余数是 4<br>那么1900年1月1日后的10000天就是周3+4天那就是周7</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"10000/7 的余数 ：\"</span> + <span class=\"number\">10000</span>%<span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</span><br><span class=\"line\">\t\tDate date = sdf.parse(<span class=\"string\">\"1991-01-01\"</span>);</span><br><span class=\"line\">\t\tCalendar  ca = Calendar.getInstance();</span><br><span class=\"line\">\t\tca.setTime(date);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> weekday=ca.get(Calendar.DAY_OF_WEEK);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"1991-01-01 是周几 ：\"</span>+weekday);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tca.add(Calendar.DATE, <span class=\"number\">10000</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> dt = ca.get(Calendar.DAY_OF_WEEK);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"1991-01-01 后的10000天 是周几 ：\"</span>+dt);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"同余定理\"><a href=\"#同余定理\" class=\"headerlink\" title=\"同余定理\"></a>同余定理</h2><p>基本概念：<br>数论中的重要概念。给定一个正整数m，如果两个整数a和b满足a-b能够被m整除，即(a-b)/m得到一个整数，那么就称整数a与b对模m同余，记作a≡b(mod m)。对模m同余是整数的一个等价关系。</p>\n<p>举例说明：<br>今天是星期一，从今天开始的 100 天里，都有多少个星期呢？你拿 100 除以 7，得到商 14 余 2，也就是说这 100 天里有 14 周多 2 天。<br>换个角度看，我们可以说，这 100 天里，你的第 1 天、第 8 天、第 15 天等等，在余数的世界里都被认为是同一天，因为它们的余数都是 1，都是星期一.<br>同理，第 2 天、第 9 天、第 16 天余数都是 2，它们都是星期二。</p>\n<p>结论：<br>同余定理其实就是用来分类的</p>\n<h2 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h2><p>基本概念：<br>任意长度的输入，通过哈希算法，压缩为某一固定长的输出。</p>\n<p>举例说明：<br>有100万调数据需要存放，为了实现快速的写入和读取。<br>可以使用hash。好处是不用将数据都存在一个连续的地址空间。<br>可以开辟多个连续地址空间，通过余数，将任意数值转换为有限范围内的一个数值，<br>然后根据这个数值，确定新存放的地址空间。</p>\n<p>扩充说明：<br>可以增加一个最大值，来增加它散列的随机程度。<br>假如： 原本是 1 %9 = 1 存放到1号地址空间<br>那么现在 （1 + 590199） % 9 = 7 现在就存放到了7号地址空间<br>像这样的场景一般用于加密算法，mapreduce的数据分发，记录的高速查询和定位等</p>\n<h2 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h2><p>自己定义一个加密算法，加密规则：<br>1.先对每个三位数的个、十和百位数，都加上一个较大的随机数。<br>2.然后将每位上的数都除以9，用所得的余数代替原有的个、十、百位数<br>3.最后将第一位和第三位交换</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encrypt_str</span><span class=\"params\">(<span class=\"keyword\">int</span> org)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fix_bigint = <span class=\"number\">298357</span>;</span><br><span class=\"line\">\tString org_s = String.valueOf(org);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bai = Integer.valueOf(String.valueOf(org_s.charAt(<span class=\"number\">0</span>)));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> shi = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class=\"number\">1</span>]));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ge = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class=\"number\">2</span>]));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_bai = (bai + fix_bigint) % <span class=\"number\">9</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_shi = (shi + fix_bigint) % <span class=\"number\">9</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_ge = (ge + fix_bigint) % <span class=\"number\">9</span>;</span><br><span class=\"line\">\tString result = String.valueOf(new_ge) + String.valueOf(new_shi) + String.valueOf(new_bai);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">yu_count</span><span class=\"params\">(<span class=\"keyword\">int</span> shi, <span class=\"keyword\">int</span> base)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_shi = shi;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(shi&lt; base)&#123;</span><br><span class=\"line\">\t\tnew_shi = <span class=\"number\">9</span> - base + shi;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shi&gt; base)&#123;</span><br><span class=\"line\">\t\tnew_shi = shi - base;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tnew_shi = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> new_shi;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">dencrypt_str</span><span class=\"params\">(<span class=\"keyword\">int</span> org)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fix_bigint = <span class=\"number\">298357</span>;</span><br><span class=\"line\">\tString org_s = String.valueOf(org);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bai = Integer.valueOf(String.valueOf(org_s.charAt(<span class=\"number\">0</span>)));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> shi = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class=\"number\">1</span>]));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ge = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class=\"number\">2</span>]));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> base = <span class=\"number\">298357</span> % <span class=\"number\">9</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_bai = yu_count(bai, base);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_shi = yu_count(shi, base);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_ge = yu_count(ge, base);</span><br><span class=\"line\"></span><br><span class=\"line\">\tString result = String.valueOf(new_ge) + String.valueOf(new_shi) + String.valueOf(new_bai);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"生活和编程中哪些用到了余数思想？\"><a href=\"#生活和编程中哪些用到了余数思想？\" class=\"headerlink\" title=\"生活和编程中哪些用到了余数思想？\"></a>生活和编程中哪些用到了余数思想？</h2><p>mapreduce，reduce端的partition</p>\n<p>网上的答案：</p>\n<p>生活中的话，闰年的计算就是典型的余数决定了</p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"闰年\"><a href=\"#闰年\" class=\"headerlink\" title=\"闰年\"></a>闰年</h2><p>闰年是能被4整除但是不能被100整除，但是能被400整除。</p>\n<h3 id=\"判断那年是闰年\"><a href=\"#判断那年是闰年\" class=\"headerlink\" title=\"判断那年是闰年\"></a>判断那年是闰年</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is_runnian</span><span class=\"params\">(String nian)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> flag =<span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> int_nian = Integer.valueOf(nian);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((int_nian % <span class=\"number\">4</span> ==<span class=\"number\">0</span> &amp;&amp; int_nian % <span class=\"number\">100</span> !=<span class=\"number\">0</span>) || int_nian % <span class=\"number\">400</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/05/02-余数：原来取余操作本身就是个哈希函数/lesson2.jpg\" alt></p>"},{"title":"03 | 迭代法：不用编程语言的自带函数，你会如何计算平方根?","date":"2019-03-06T14:56:16.000Z","_content":"\n人不擅长重复性的劳动，但是计算机擅长，以重复为特点的迭代法在编程中有广泛的应用。\n迭代的场景包括求近似解，范围内查找目标值，机器算法中的迭代（局部最优解）等。\n<!-- more -->\n\n# 摘要\n\n\n人不擅长重复性的劳动，但是计算机擅长，以重复为特点的迭代法在编程中有广泛的应用。\n迭代的场景包括求近似解，范围内查找目标值，机器算法中的迭代（局部最优解）等。\n\n\n# 疑问\n\n\n## 什么是迭代？\n\n不断用旧的变量值递推出新的变量值。\n\n## 迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？\n\n\n可以使用循环来解决上述问题。注意：必须使用Long类型不然返回结果为-1\n\n\n```java\npublic static void main(String[] args) {\n\tLong start = 1L;\n\tLong result = 1L;\n\tfor (int i = 2; i < 64; i++) {\n\t\tstart = start * 2;\n\t\tresult = result + start ;\n\t}\n\tSystem.out.println(result);\n}\n\n```\n\n\n## 迭代的具体应用？\n\n\n1.求数值的精确或近似解\n2.范围内查找目标值\n3.机器算法中的迭代（局部最优解），K-MEANS算法，PageRank的马尔科夫链，梯度算法等等\n\n\n# 基本内容\n\n\n## 求方程或者数值的近似解\n\n### 思路\n1.使用指针，指向最小值和最大值，2分法\n2.然后与中间的值平方做大小比较\n3.添加了误差，和最大值的限制，防止无线循环！\n\n### 使用二分法使，必须保证数组是有序的！！！！！！！\n\n```java\n    public static double pinfanggeng(int a){\n        int max_try = 10000;\n        double min = 0;\n        double max = a ;\n        double tmp = (min+max) /2;\n        int count = 0;\n        //误差\n        double wc = 0.00001;\n        for (int i = 0; i < max_try; i++) {\n            double t = tmp* tmp;\n            if(Math.abs(t-a) <= wc){\n                return tmp;\n            }\n            if(t > a){\n                max = tmp;\n                tmp =(min+max) /2;\n            }else if(t < a){\n                min = tmp;\n                tmp = (min+max) /2;\n            }else{\n                break;\n            }\n            count++;\n        }\n        return tmp;\n    }\n```\n\n## 文章内容匹配 \n\n### 在字母a到g中找到f字典\n\n1.还是如上使用2分法\n\n### 字符串的比较用equals, 比较其字符串的大小用compareTo!\n\n```java\n    public static boolean search(String[] dir, String key){\n        int min = 0;\n        int max = dir.length -1;\n        for (int i = 0; i < dir.length; i++) {\n            int tmp = min + (max - min)/2;\n            if(dir[tmp].equals(key)){\n                return true;\n            }\n            if(dir[tmp].compareTo(key) > 0){\n                max = tmp;\n            }else if(dir[tmp].compareTo(key) < 0){\n                min = tmp;\n            }\n        }\n        return false;\n    }\n\n```\n\n\n\n# 思考题\n\n\n## 项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？\n\n\n# 扩展\n\n## PageRank的马尔科夫链\nTODO\n\n# 小结\n\n![](lessons3.jpg)","source":"_posts/03-迭代法：不用编程语言的自带函数，你会如何计算平方根.md","raw":"---\ntitle: 03 | 迭代法：不用编程语言的自带函数，你会如何计算平方根?\ndate: 2019-03-06 22:56:16\ntags: 计算机\ncategories: \n- 网络学习\n- 极客时间\n- 程序员的数学基础课\n---\n\n人不擅长重复性的劳动，但是计算机擅长，以重复为特点的迭代法在编程中有广泛的应用。\n迭代的场景包括求近似解，范围内查找目标值，机器算法中的迭代（局部最优解）等。\n<!-- more -->\n\n# 摘要\n\n\n人不擅长重复性的劳动，但是计算机擅长，以重复为特点的迭代法在编程中有广泛的应用。\n迭代的场景包括求近似解，范围内查找目标值，机器算法中的迭代（局部最优解）等。\n\n\n# 疑问\n\n\n## 什么是迭代？\n\n不断用旧的变量值递推出新的变量值。\n\n## 迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？\n\n\n可以使用循环来解决上述问题。注意：必须使用Long类型不然返回结果为-1\n\n\n```java\npublic static void main(String[] args) {\n\tLong start = 1L;\n\tLong result = 1L;\n\tfor (int i = 2; i < 64; i++) {\n\t\tstart = start * 2;\n\t\tresult = result + start ;\n\t}\n\tSystem.out.println(result);\n}\n\n```\n\n\n## 迭代的具体应用？\n\n\n1.求数值的精确或近似解\n2.范围内查找目标值\n3.机器算法中的迭代（局部最优解），K-MEANS算法，PageRank的马尔科夫链，梯度算法等等\n\n\n# 基本内容\n\n\n## 求方程或者数值的近似解\n\n### 思路\n1.使用指针，指向最小值和最大值，2分法\n2.然后与中间的值平方做大小比较\n3.添加了误差，和最大值的限制，防止无线循环！\n\n### 使用二分法使，必须保证数组是有序的！！！！！！！\n\n```java\n    public static double pinfanggeng(int a){\n        int max_try = 10000;\n        double min = 0;\n        double max = a ;\n        double tmp = (min+max) /2;\n        int count = 0;\n        //误差\n        double wc = 0.00001;\n        for (int i = 0; i < max_try; i++) {\n            double t = tmp* tmp;\n            if(Math.abs(t-a) <= wc){\n                return tmp;\n            }\n            if(t > a){\n                max = tmp;\n                tmp =(min+max) /2;\n            }else if(t < a){\n                min = tmp;\n                tmp = (min+max) /2;\n            }else{\n                break;\n            }\n            count++;\n        }\n        return tmp;\n    }\n```\n\n## 文章内容匹配 \n\n### 在字母a到g中找到f字典\n\n1.还是如上使用2分法\n\n### 字符串的比较用equals, 比较其字符串的大小用compareTo!\n\n```java\n    public static boolean search(String[] dir, String key){\n        int min = 0;\n        int max = dir.length -1;\n        for (int i = 0; i < dir.length; i++) {\n            int tmp = min + (max - min)/2;\n            if(dir[tmp].equals(key)){\n                return true;\n            }\n            if(dir[tmp].compareTo(key) > 0){\n                max = tmp;\n            }else if(dir[tmp].compareTo(key) < 0){\n                min = tmp;\n            }\n        }\n        return false;\n    }\n\n```\n\n\n\n# 思考题\n\n\n## 项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？\n\n\n# 扩展\n\n## PageRank的马尔科夫链\nTODO\n\n# 小结\n\n![](lessons3.jpg)","slug":"03-迭代法：不用编程语言的自带函数，你会如何计算平方根","published":1,"updated":"2019-03-17T08:43:32.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzureel0006a0ts37lddgs1","content":"<p>人不擅长重复性的劳动，但是计算机擅长，以重复为特点的迭代法在编程中有广泛的应用。<br>迭代的场景包括求近似解，范围内查找目标值，机器算法中的迭代（局部最优解）等。<br><a id=\"more\"></a></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>人不擅长重复性的劳动，但是计算机擅长，以重复为特点的迭代法在编程中有广泛的应用。<br>迭代的场景包括求近似解，范围内查找目标值，机器算法中的迭代（局部最优解）等。</p>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"什么是迭代？\"><a href=\"#什么是迭代？\" class=\"headerlink\" title=\"什么是迭代？\"></a>什么是迭代？</h2><p>不断用旧的变量值递推出新的变量值。</p>\n<h2 id=\"迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？\"><a href=\"#迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？\" class=\"headerlink\" title=\"迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？\"></a>迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？</h2><p>可以使用循环来解决上述问题。注意：必须使用Long类型不然返回结果为-1</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tLong start = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\tLong result = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"number\">64</span>; i++) &#123;</span><br><span class=\"line\">\t\tstart = start * <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tresult = result + start ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"迭代的具体应用？\"><a href=\"#迭代的具体应用？\" class=\"headerlink\" title=\"迭代的具体应用？\"></a>迭代的具体应用？</h2><p>1.求数值的精确或近似解<br>2.范围内查找目标值<br>3.机器算法中的迭代（局部最优解），K-MEANS算法，PageRank的马尔科夫链，梯度算法等等</p>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"求方程或者数值的近似解\"><a href=\"#求方程或者数值的近似解\" class=\"headerlink\" title=\"求方程或者数值的近似解\"></a>求方程或者数值的近似解</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>1.使用指针，指向最小值和最大值，2分法<br>2.然后与中间的值平方做大小比较<br>3.添加了误差，和最大值的限制，防止无线循环！</p>\n<h3 id=\"使用二分法使，必须保证数组是有序的！！！！！！！\"><a href=\"#使用二分法使，必须保证数组是有序的！！！！！！！\" class=\"headerlink\" title=\"使用二分法使，必须保证数组是有序的！！！！！！！\"></a>使用二分法使，必须保证数组是有序的！！！！！！！</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">pinfanggeng</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_try = <span class=\"number\">10000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> max = a ;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> tmp = (min+max) /<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//误差</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> wc = <span class=\"number\">0.00001</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max_try; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> t = tmp* tmp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Math.abs(t-a) &lt;= wc)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t &gt; a)&#123;</span><br><span class=\"line\">            max = tmp;</span><br><span class=\"line\">            tmp =(min+max) /<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t &lt; a)&#123;</span><br><span class=\"line\">            min = tmp;</span><br><span class=\"line\">            tmp = (min+max) /<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"文章内容匹配\"><a href=\"#文章内容匹配\" class=\"headerlink\" title=\"文章内容匹配\"></a>文章内容匹配</h2><h3 id=\"在字母a到g中找到f字典\"><a href=\"#在字母a到g中找到f字典\" class=\"headerlink\" title=\"在字母a到g中找到f字典\"></a>在字母a到g中找到f字典</h3><p>1.还是如上使用2分法</p>\n<h3 id=\"字符串的比较用equals-比较其字符串的大小用compareTo\"><a href=\"#字符串的比较用equals-比较其字符串的大小用compareTo\" class=\"headerlink\" title=\"字符串的比较用equals, 比较其字符串的大小用compareTo!\"></a>字符串的比较用equals, 比较其字符串的大小用compareTo!</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(String[] dir, String key)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = dir.length -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dir.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = min + (max - min)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dir[tmp].equals(key))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dir[tmp].compareTo(key) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            max = tmp;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dir[tmp].compareTo(key) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            min = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？\"><a href=\"#项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？\" class=\"headerlink\" title=\"项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？\"></a>项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？</h2><h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"PageRank的马尔科夫链\"><a href=\"#PageRank的马尔科夫链\" class=\"headerlink\" title=\"PageRank的马尔科夫链\"></a>PageRank的马尔科夫链</h2><p>TODO</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/06/03-迭代法：不用编程语言的自带函数，你会如何计算平方根/lessons3.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>人不擅长重复性的劳动，但是计算机擅长，以重复为特点的迭代法在编程中有广泛的应用。<br>迭代的场景包括求近似解，范围内查找目标值，机器算法中的迭代（局部最优解）等。<br>","more":"</p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>人不擅长重复性的劳动，但是计算机擅长，以重复为特点的迭代法在编程中有广泛的应用。<br>迭代的场景包括求近似解，范围内查找目标值，机器算法中的迭代（局部最优解）等。</p>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"什么是迭代？\"><a href=\"#什么是迭代？\" class=\"headerlink\" title=\"什么是迭代？\"></a>什么是迭代？</h2><p>不断用旧的变量值递推出新的变量值。</p>\n<h2 id=\"迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？\"><a href=\"#迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？\" class=\"headerlink\" title=\"迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？\"></a>迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？</h2><p>可以使用循环来解决上述问题。注意：必须使用Long类型不然返回结果为-1</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tLong start = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\tLong result = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"number\">64</span>; i++) &#123;</span><br><span class=\"line\">\t\tstart = start * <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tresult = result + start ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"迭代的具体应用？\"><a href=\"#迭代的具体应用？\" class=\"headerlink\" title=\"迭代的具体应用？\"></a>迭代的具体应用？</h2><p>1.求数值的精确或近似解<br>2.范围内查找目标值<br>3.机器算法中的迭代（局部最优解），K-MEANS算法，PageRank的马尔科夫链，梯度算法等等</p>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"求方程或者数值的近似解\"><a href=\"#求方程或者数值的近似解\" class=\"headerlink\" title=\"求方程或者数值的近似解\"></a>求方程或者数值的近似解</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>1.使用指针，指向最小值和最大值，2分法<br>2.然后与中间的值平方做大小比较<br>3.添加了误差，和最大值的限制，防止无线循环！</p>\n<h3 id=\"使用二分法使，必须保证数组是有序的！！！！！！！\"><a href=\"#使用二分法使，必须保证数组是有序的！！！！！！！\" class=\"headerlink\" title=\"使用二分法使，必须保证数组是有序的！！！！！！！\"></a>使用二分法使，必须保证数组是有序的！！！！！！！</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">pinfanggeng</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_try = <span class=\"number\">10000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> max = a ;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> tmp = (min+max) /<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//误差</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> wc = <span class=\"number\">0.00001</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max_try; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> t = tmp* tmp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Math.abs(t-a) &lt;= wc)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t &gt; a)&#123;</span><br><span class=\"line\">            max = tmp;</span><br><span class=\"line\">            tmp =(min+max) /<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t &lt; a)&#123;</span><br><span class=\"line\">            min = tmp;</span><br><span class=\"line\">            tmp = (min+max) /<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"文章内容匹配\"><a href=\"#文章内容匹配\" class=\"headerlink\" title=\"文章内容匹配\"></a>文章内容匹配</h2><h3 id=\"在字母a到g中找到f字典\"><a href=\"#在字母a到g中找到f字典\" class=\"headerlink\" title=\"在字母a到g中找到f字典\"></a>在字母a到g中找到f字典</h3><p>1.还是如上使用2分法</p>\n<h3 id=\"字符串的比较用equals-比较其字符串的大小用compareTo\"><a href=\"#字符串的比较用equals-比较其字符串的大小用compareTo\" class=\"headerlink\" title=\"字符串的比较用equals, 比较其字符串的大小用compareTo!\"></a>字符串的比较用equals, 比较其字符串的大小用compareTo!</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(String[] dir, String key)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = dir.length -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dir.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = min + (max - min)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dir[tmp].equals(key))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dir[tmp].compareTo(key) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            max = tmp;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dir[tmp].compareTo(key) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            min = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？\"><a href=\"#项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？\" class=\"headerlink\" title=\"项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？\"></a>项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？</h2><h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"PageRank的马尔科夫链\"><a href=\"#PageRank的马尔科夫链\" class=\"headerlink\" title=\"PageRank的马尔科夫链\"></a>PageRank的马尔科夫链</h2><p>TODO</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/06/03-迭代法：不用编程语言的自带函数，你会如何计算平方根/lessons3.jpg\" alt></p>"},{"title":"05 | 递归（上）：泛化数学归纳，如何将复杂问题简单化？","date":"2019-03-17T12:48:08.000Z","_content":"\n在某些情况下，循环和递归是可以相互转换的。\n\n<!-- more -->\n\n# 摘要\n\n# 疑问\n\n## 既然有了迭代，为何还要用递归？\n\n因为有的时候递归比迭代可以更好的实现需求\n\n# 基本内容\n\n## 有1,2,5,10元的面额，给定整数N，求出所有可能的面额方式？\n\n### 思路\n\n1.使用递归，然后返回值就直接print出来\n2.每条记录print完，使用return表示这个循环结束了\n3.遍历4个面额，大于0接着遍历，小于0总数说明不是合格的数据也直接return结束训话，只有当为0的时候输出打印list\n4.每次遍历4个面额时，要克隆list,确保每个分支都能走通\n\n```java\n    public static void main(String[] args) {\n        ArrayList list = new ArrayList();\n        pro_all_sum(10, list) ;\n    }\n    static ArrayList list2 = new ArrayList();\n    public static void pro_all_sum(int sum, ArrayList list){\n        int[] tmp = new int[]{1,2,5,10};\n        if(sum == 0){\n            System.out.println(list);\n            return;\n        }else if(sum < 0){\n            return;\n        }else{\n            for (int i = 0; i < tmp.length; i++) {\n                ArrayList new_list = (ArrayList) list.clone();\n                new_list.add(tmp[i]);\n                pro_all_sum(sum - tmp[i], new_list);\n            }\n        }\n    }\n```\n\n## 使用递归的好处？\n\n\n递归就是函数嵌套的使用，可以保存中间状态和变量值\n\n## 如何把复杂的问题简化？\n\n当n=k-1的时候问题已经解决，那么n=k的时候问题如何解决。\n当n=1的时候问题如何解决\n\n# 思考题\n\n## 一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3,用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8,8X1,2X4,4X2,1X2X2X2...\n\n### 思路\n\n1.和上面的思路差不多，主要关注结束条件和中间的过滤条件\n2.结束条件就是list > 1才能算相乘， 并且sum == 1的时候表示已经结束了\n3.中间的条件主要是为了过滤存在1的情况，\n\n\n### 代码\n\n```java\npublic static void chengji(int sum, ArrayList<Integer> list){\n        if(sum == 1){\n\n            if(!list.contains(1)){\n                ArrayList list_new = (ArrayList) list.clone();\n                list_new.add(1);\n                System.out.println(list_new);\n            }\n            if(list.size() > 1){\n                System.out.println(list);\n            }\n        }else{\n            for (int i = 1; i <= sum; i++) {\n                if (i == 1 && list.contains(1)){\n                    continue;\n                }\n                int tmp = sum %i;\n                if(tmp == 0){\n\n                    ArrayList list_new = (ArrayList) list.clone();\n                    list_new.add(i);\n                    int sum_tmp = sum / i;\n                    chengji(sum_tmp, list_new);\n                }\n            }\n        }\n    }\n```\n\n# 扩展\n\n# 小结\n\n![](lesson5.jpg)\n","source":"_posts/05-递归（上）：泛化数学归纳，如何将复杂问题简单化？.md","raw":"---\ntitle: 05 | 递归（上）：泛化数学归纳，如何将复杂问题简单化？\ndate: 2019-03-17 20:48:08\ntags: 计算机\ncategories: \n- 网络学习\n- 极客时间\n- 程序员的数学基础课\n---\n\n在某些情况下，循环和递归是可以相互转换的。\n\n<!-- more -->\n\n# 摘要\n\n# 疑问\n\n## 既然有了迭代，为何还要用递归？\n\n因为有的时候递归比迭代可以更好的实现需求\n\n# 基本内容\n\n## 有1,2,5,10元的面额，给定整数N，求出所有可能的面额方式？\n\n### 思路\n\n1.使用递归，然后返回值就直接print出来\n2.每条记录print完，使用return表示这个循环结束了\n3.遍历4个面额，大于0接着遍历，小于0总数说明不是合格的数据也直接return结束训话，只有当为0的时候输出打印list\n4.每次遍历4个面额时，要克隆list,确保每个分支都能走通\n\n```java\n    public static void main(String[] args) {\n        ArrayList list = new ArrayList();\n        pro_all_sum(10, list) ;\n    }\n    static ArrayList list2 = new ArrayList();\n    public static void pro_all_sum(int sum, ArrayList list){\n        int[] tmp = new int[]{1,2,5,10};\n        if(sum == 0){\n            System.out.println(list);\n            return;\n        }else if(sum < 0){\n            return;\n        }else{\n            for (int i = 0; i < tmp.length; i++) {\n                ArrayList new_list = (ArrayList) list.clone();\n                new_list.add(tmp[i]);\n                pro_all_sum(sum - tmp[i], new_list);\n            }\n        }\n    }\n```\n\n## 使用递归的好处？\n\n\n递归就是函数嵌套的使用，可以保存中间状态和变量值\n\n## 如何把复杂的问题简化？\n\n当n=k-1的时候问题已经解决，那么n=k的时候问题如何解决。\n当n=1的时候问题如何解决\n\n# 思考题\n\n## 一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3,用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8,8X1,2X4,4X2,1X2X2X2...\n\n### 思路\n\n1.和上面的思路差不多，主要关注结束条件和中间的过滤条件\n2.结束条件就是list > 1才能算相乘， 并且sum == 1的时候表示已经结束了\n3.中间的条件主要是为了过滤存在1的情况，\n\n\n### 代码\n\n```java\npublic static void chengji(int sum, ArrayList<Integer> list){\n        if(sum == 1){\n\n            if(!list.contains(1)){\n                ArrayList list_new = (ArrayList) list.clone();\n                list_new.add(1);\n                System.out.println(list_new);\n            }\n            if(list.size() > 1){\n                System.out.println(list);\n            }\n        }else{\n            for (int i = 1; i <= sum; i++) {\n                if (i == 1 && list.contains(1)){\n                    continue;\n                }\n                int tmp = sum %i;\n                if(tmp == 0){\n\n                    ArrayList list_new = (ArrayList) list.clone();\n                    list_new.add(i);\n                    int sum_tmp = sum / i;\n                    chengji(sum_tmp, list_new);\n                }\n            }\n        }\n    }\n```\n\n# 扩展\n\n# 小结\n\n![](lesson5.jpg)\n","slug":"05-递归（上）：泛化数学归纳，如何将复杂问题简单化？","published":1,"updated":"2019-03-29T06:51:33.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzureep0007a0tsbkkd4ixa","content":"<p>在某些情况下，循环和递归是可以相互转换的。</p>\n<a id=\"more\"></a>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"既然有了迭代，为何还要用递归？\"><a href=\"#既然有了迭代，为何还要用递归？\" class=\"headerlink\" title=\"既然有了迭代，为何还要用递归？\"></a>既然有了迭代，为何还要用递归？</h2><p>因为有的时候递归比迭代可以更好的实现需求</p>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"有1-2-5-10元的面额，给定整数N，求出所有可能的面额方式？\"><a href=\"#有1-2-5-10元的面额，给定整数N，求出所有可能的面额方式？\" class=\"headerlink\" title=\"有1,2,5,10元的面额，给定整数N，求出所有可能的面额方式？\"></a>有1,2,5,10元的面额，给定整数N，求出所有可能的面额方式？</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>1.使用递归，然后返回值就直接print出来<br>2.每条记录print完，使用return表示这个循环结束了<br>3.遍历4个面额，大于0接着遍历，小于0总数说明不是合格的数据也直接return结束训话，只有当为0的时候输出打印list<br>4.每次遍历4个面额时，要克隆list,确保每个分支都能走通</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ArrayList list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    pro_all_sum(<span class=\"number\">10</span>, list) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> ArrayList list2 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">pro_all_sum</span><span class=\"params\">(<span class=\"keyword\">int</span> sum, ArrayList list)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] tmp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class=\"line\">            ArrayList new_list = (ArrayList) list.clone();</span><br><span class=\"line\">            new_list.add(tmp[i]);</span><br><span class=\"line\">            pro_all_sum(sum - tmp[i], new_list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用递归的好处？\"><a href=\"#使用递归的好处？\" class=\"headerlink\" title=\"使用递归的好处？\"></a>使用递归的好处？</h2><p>递归就是函数嵌套的使用，可以保存中间状态和变量值</p>\n<h2 id=\"如何把复杂的问题简化？\"><a href=\"#如何把复杂的问题简化？\" class=\"headerlink\" title=\"如何把复杂的问题简化？\"></a>如何把复杂的问题简化？</h2><p>当n=k-1的时候问题已经解决，那么n=k的时候问题如何解决。<br>当n=1的时候问题如何解决</p>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3-用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8-8X1-2X4-4X2-1X2X2X2…\"><a href=\"#一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3-用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8-8X1-2X4-4X2-1X2X2X2…\" class=\"headerlink\" title=\"一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3,用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8,8X1,2X4,4X2,1X2X2X2…\"></a>一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3,用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8,8X1,2X4,4X2,1X2X2X2…</h2><h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>1.和上面的思路差不多，主要关注结束条件和中间的过滤条件<br>2.结束条件就是list &gt; 1才能算相乘， 并且sum == 1的时候表示已经结束了<br>3.中间的条件主要是为了过滤存在1的情况，</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">chengji</span><span class=\"params\">(<span class=\"keyword\">int</span> sum, ArrayList&lt;Integer&gt; list)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!list.contains(<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                ArrayList list_new = (ArrayList) list.clone();</span><br><span class=\"line\">                list_new.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">                System.out.println(list_new);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(list.size() &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                System.out.println(list);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= sum; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span> &amp;&amp; list.contains(<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = sum %i;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    ArrayList list_new = (ArrayList) list.clone();</span><br><span class=\"line\">                    list_new.add(i);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> sum_tmp = sum / i;</span><br><span class=\"line\">                    chengji(sum_tmp, list_new);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/17/05-递归（上）：泛化数学归纳，如何将复杂问题简单化？/lesson5.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>在某些情况下，循环和递归是可以相互转换的。</p>","more":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"既然有了迭代，为何还要用递归？\"><a href=\"#既然有了迭代，为何还要用递归？\" class=\"headerlink\" title=\"既然有了迭代，为何还要用递归？\"></a>既然有了迭代，为何还要用递归？</h2><p>因为有的时候递归比迭代可以更好的实现需求</p>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"有1-2-5-10元的面额，给定整数N，求出所有可能的面额方式？\"><a href=\"#有1-2-5-10元的面额，给定整数N，求出所有可能的面额方式？\" class=\"headerlink\" title=\"有1,2,5,10元的面额，给定整数N，求出所有可能的面额方式？\"></a>有1,2,5,10元的面额，给定整数N，求出所有可能的面额方式？</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>1.使用递归，然后返回值就直接print出来<br>2.每条记录print完，使用return表示这个循环结束了<br>3.遍历4个面额，大于0接着遍历，小于0总数说明不是合格的数据也直接return结束训话，只有当为0的时候输出打印list<br>4.每次遍历4个面额时，要克隆list,确保每个分支都能走通</p>\n<figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ArrayList list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    pro_all_sum(<span class=\"number\">10</span>, list) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> ArrayList list2 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">pro_all_sum</span><span class=\"params\">(<span class=\"keyword\">int</span> sum, ArrayList list)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] tmp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class=\"line\">            ArrayList new_list = (ArrayList) list.clone();</span><br><span class=\"line\">            new_list.add(tmp[i]);</span><br><span class=\"line\">            pro_all_sum(sum - tmp[i], new_list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用递归的好处？\"><a href=\"#使用递归的好处？\" class=\"headerlink\" title=\"使用递归的好处？\"></a>使用递归的好处？</h2><p>递归就是函数嵌套的使用，可以保存中间状态和变量值</p>\n<h2 id=\"如何把复杂的问题简化？\"><a href=\"#如何把复杂的问题简化？\" class=\"headerlink\" title=\"如何把复杂的问题简化？\"></a>如何把复杂的问题简化？</h2><p>当n=k-1的时候问题已经解决，那么n=k的时候问题如何解决。<br>当n=1的时候问题如何解决</p>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3-用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8-8X1-2X4-4X2-1X2X2X2…\"><a href=\"#一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3-用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8-8X1-2X4-4X2-1X2X2X2…\" class=\"headerlink\" title=\"一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3,用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8,8X1,2X4,4X2,1X2X2X2…\"></a>一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3,用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8,8X1,2X4,4X2,1X2X2X2…</h2><h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>1.和上面的思路差不多，主要关注结束条件和中间的过滤条件<br>2.结束条件就是list &gt; 1才能算相乘， 并且sum == 1的时候表示已经结束了<br>3.中间的条件主要是为了过滤存在1的情况，</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">chengji</span><span class=\"params\">(<span class=\"keyword\">int</span> sum, ArrayList&lt;Integer&gt; list)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!list.contains(<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                ArrayList list_new = (ArrayList) list.clone();</span><br><span class=\"line\">                list_new.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">                System.out.println(list_new);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(list.size() &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                System.out.println(list);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= sum; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span> &amp;&amp; list.contains(<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = sum %i;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    ArrayList list_new = (ArrayList) list.clone();</span><br><span class=\"line\">                    list_new.add(i);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> sum_tmp = sum / i;</span><br><span class=\"line\">                    chengji(sum_tmp, list_new);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/17/05-递归（上）：泛化数学归纳，如何将复杂问题简单化？/lesson5.jpg\" alt></p>"},{"title":"04 | 数学归纳法：如何用数学归纳提升代码的运行效率？","date":"2019-03-07T15:04:03.000Z","_content":"有些迭代我们可以通过理论证明某个结论，避免一次一次的计算，节约大量的计算资源。\n归纳法的特点在于归纳2字，它已经总结了规律，不用逐步计算，可以节省很多时间和资源。\n\n<!-- more -->\n\n# 摘要\n\n\n有些迭代我们可以通过理论证明某个结论，避免一次一次的计算，节约大量的计算资源。\n归纳法的特点在于归纳2字，它已经总结了规律，不用逐步计算，可以节省很多时间和资源。\n\n\n# 疑问\n\n\n## 什么是数学归纳法？\n\n根据现象，得出结论，进行验证后。一般用于无穷数列的问题。\n\n\n\n## 和迭代法相比有什么优势吗？\n\n数学归纳法最大的特点就是归纳，他总结了规律，不用逐步的计算。\n\n### 使用迭代和数学归纳法来比较舍罕王给米的数据\n\n### 使用System.currentTimeMillis获取时间戳进行运行完成的计算\n\n```java\n    public static void main(String[] args) {\n        //迭代\n        Long start = 1L;\n        Long result = 1L;\n        Long f = System.currentTimeMillis();\n\n        for (int i = 2; i < 64; i++) {\n            start = start * 2;\n            result = result + start ;\n        }\n        Long e = System.currentTimeMillis();\n        System.out.println(\"迭代：\"+(f-e) + result);\n\n        //数学归纳法\n        f = System.currentTimeMillis();\n        Double result2 =  (Math.pow(2,63))  - 1;\n        e = System.currentTimeMillis();\n        System.out.println(\"归纳：\"+(f-e) + result2);\n    }\n```\n\n## 递归调用和数学归纳法的逻辑是一样的吗？\n\n逻辑是一致的。\n只要数学归纳法的逻辑是对的，那么写的递归逻辑也是对的\n\n# 基本内容\n\n\n## 数学归纳法证明的步骤\n\n1.证明基本情况（n=1的时候）是否成立\n2.假设n = k-1成立，在证明 n=k也成立（k>1的自然数）\n\n\n## 舍罕王的总米数，使用递归实现推导逻辑\n\n### 数学归纳法证明舍罕王给的总数\n\n证明第一个命题：第K个麦粒总数2^（k-1）\n1.n=1时 2^(1-1)=1成立\n2.n=k -1时 当前数为 2^(k-2) 那么当n=k时，是为k-1格的2倍所以为 2*2^(k-2) = 2^(k-1) 成立\n\n证明第二个命题： 第K个麦粒和之前的格子加起来的总数2^（k+1）-1\n1.n=1时 2^(1-1)=1成立\n2.n=k -1时 当前数为 2^(k)-1 那么当n=k时，是为k-1格的2倍所以为 2^(k)-1 + 2^(k) = 2^（k+1）-1 成立\n\n\n### 思路\n\n1.经过数学归纳法可以看出其实总数是2^k-1\n2.过程就是先从最后开始算起\n3.证明过程最后返回的是true,是比较前后函数成功\n\n#### 一个参数即可，看循环几次都是否为true\n\n```java\n    static  double cur_nums = 0;\n    static double cur_all = 0;\n\n    public static boolean tuidao(int k){\n        if(k == 1){\n            lesson4.cur_nums=1;\n            lesson4.cur_all=1;\n            return true;\n        }else{\n\n            boolean proveOfPreviousOne = tuidao(k-1);\n\n            cur_nums = cur_nums*2;\n            cur_all = cur_all + cur_nums;\n            boolean proveOfCurrentOne = false;\n            if(cur_all == Math.pow(2, k) - 1){\n                proveOfCurrentOne = true;\n            }\n            return proveOfCurrentOne && proveOfPreviousOne ;\n\n        }\n\n    }\n\t\n```\n\n\n## 逆向递推和正向递推\n\n迭代就是循环也就是正向递推。递归就是从后往前，就是你想递推。\n\n# 思考题\n\n\n## 日常工作中，什么地方用到了归纳法来提升代码效率？\n\n\n递归清理文件夹或者文件\n使用栈来实现递归\n\n# 扩展\n\n\n## 动态规划\n\n一般发现有递归的情况，可以查看是否使用动态规划。\n\n\n# 小结\n\n![](lesson4.jpg)\n","source":"_posts/04-数学归纳法：如何用数学归纳提升代码的运行效率？.md","raw":"---\ntitle: 04 | 数学归纳法：如何用数学归纳提升代码的运行效率？\ndate: 2019-03-07 23:04:03\ntags: 计算机\ncategories: \n- 网络学习\n- 极客时间\n- 程序员的数学基础课\n---\n有些迭代我们可以通过理论证明某个结论，避免一次一次的计算，节约大量的计算资源。\n归纳法的特点在于归纳2字，它已经总结了规律，不用逐步计算，可以节省很多时间和资源。\n\n<!-- more -->\n\n# 摘要\n\n\n有些迭代我们可以通过理论证明某个结论，避免一次一次的计算，节约大量的计算资源。\n归纳法的特点在于归纳2字，它已经总结了规律，不用逐步计算，可以节省很多时间和资源。\n\n\n# 疑问\n\n\n## 什么是数学归纳法？\n\n根据现象，得出结论，进行验证后。一般用于无穷数列的问题。\n\n\n\n## 和迭代法相比有什么优势吗？\n\n数学归纳法最大的特点就是归纳，他总结了规律，不用逐步的计算。\n\n### 使用迭代和数学归纳法来比较舍罕王给米的数据\n\n### 使用System.currentTimeMillis获取时间戳进行运行完成的计算\n\n```java\n    public static void main(String[] args) {\n        //迭代\n        Long start = 1L;\n        Long result = 1L;\n        Long f = System.currentTimeMillis();\n\n        for (int i = 2; i < 64; i++) {\n            start = start * 2;\n            result = result + start ;\n        }\n        Long e = System.currentTimeMillis();\n        System.out.println(\"迭代：\"+(f-e) + result);\n\n        //数学归纳法\n        f = System.currentTimeMillis();\n        Double result2 =  (Math.pow(2,63))  - 1;\n        e = System.currentTimeMillis();\n        System.out.println(\"归纳：\"+(f-e) + result2);\n    }\n```\n\n## 递归调用和数学归纳法的逻辑是一样的吗？\n\n逻辑是一致的。\n只要数学归纳法的逻辑是对的，那么写的递归逻辑也是对的\n\n# 基本内容\n\n\n## 数学归纳法证明的步骤\n\n1.证明基本情况（n=1的时候）是否成立\n2.假设n = k-1成立，在证明 n=k也成立（k>1的自然数）\n\n\n## 舍罕王的总米数，使用递归实现推导逻辑\n\n### 数学归纳法证明舍罕王给的总数\n\n证明第一个命题：第K个麦粒总数2^（k-1）\n1.n=1时 2^(1-1)=1成立\n2.n=k -1时 当前数为 2^(k-2) 那么当n=k时，是为k-1格的2倍所以为 2*2^(k-2) = 2^(k-1) 成立\n\n证明第二个命题： 第K个麦粒和之前的格子加起来的总数2^（k+1）-1\n1.n=1时 2^(1-1)=1成立\n2.n=k -1时 当前数为 2^(k)-1 那么当n=k时，是为k-1格的2倍所以为 2^(k)-1 + 2^(k) = 2^（k+1）-1 成立\n\n\n### 思路\n\n1.经过数学归纳法可以看出其实总数是2^k-1\n2.过程就是先从最后开始算起\n3.证明过程最后返回的是true,是比较前后函数成功\n\n#### 一个参数即可，看循环几次都是否为true\n\n```java\n    static  double cur_nums = 0;\n    static double cur_all = 0;\n\n    public static boolean tuidao(int k){\n        if(k == 1){\n            lesson4.cur_nums=1;\n            lesson4.cur_all=1;\n            return true;\n        }else{\n\n            boolean proveOfPreviousOne = tuidao(k-1);\n\n            cur_nums = cur_nums*2;\n            cur_all = cur_all + cur_nums;\n            boolean proveOfCurrentOne = false;\n            if(cur_all == Math.pow(2, k) - 1){\n                proveOfCurrentOne = true;\n            }\n            return proveOfCurrentOne && proveOfPreviousOne ;\n\n        }\n\n    }\n\t\n```\n\n\n## 逆向递推和正向递推\n\n迭代就是循环也就是正向递推。递归就是从后往前，就是你想递推。\n\n# 思考题\n\n\n## 日常工作中，什么地方用到了归纳法来提升代码效率？\n\n\n递归清理文件夹或者文件\n使用栈来实现递归\n\n# 扩展\n\n\n## 动态规划\n\n一般发现有递归的情况，可以查看是否使用动态规划。\n\n\n# 小结\n\n![](lesson4.jpg)\n","slug":"04-数学归纳法：如何用数学归纳提升代码的运行效率？","published":1,"updated":"2019-03-17T12:47:20.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzureer0008a0tsm6yklueo","content":"<p>有些迭代我们可以通过理论证明某个结论，避免一次一次的计算，节约大量的计算资源。<br>归纳法的特点在于归纳2字，它已经总结了规律，不用逐步计算，可以节省很多时间和资源。</p>\n<a id=\"more\"></a>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>有些迭代我们可以通过理论证明某个结论，避免一次一次的计算，节约大量的计算资源。<br>归纳法的特点在于归纳2字，它已经总结了规律，不用逐步计算，可以节省很多时间和资源。</p>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"什么是数学归纳法？\"><a href=\"#什么是数学归纳法？\" class=\"headerlink\" title=\"什么是数学归纳法？\"></a>什么是数学归纳法？</h2><p>根据现象，得出结论，进行验证后。一般用于无穷数列的问题。</p>\n<h2 id=\"和迭代法相比有什么优势吗？\"><a href=\"#和迭代法相比有什么优势吗？\" class=\"headerlink\" title=\"和迭代法相比有什么优势吗？\"></a>和迭代法相比有什么优势吗？</h2><p>数学归纳法最大的特点就是归纳，他总结了规律，不用逐步的计算。</p>\n<h3 id=\"使用迭代和数学归纳法来比较舍罕王给米的数据\"><a href=\"#使用迭代和数学归纳法来比较舍罕王给米的数据\" class=\"headerlink\" title=\"使用迭代和数学归纳法来比较舍罕王给米的数据\"></a>使用迭代和数学归纳法来比较舍罕王给米的数据</h3><h3 id=\"使用System-currentTimeMillis获取时间戳进行运行完成的计算\"><a href=\"#使用System-currentTimeMillis获取时间戳进行运行完成的计算\" class=\"headerlink\" title=\"使用System.currentTimeMillis获取时间戳进行运行完成的计算\"></a>使用System.currentTimeMillis获取时间戳进行运行完成的计算</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//迭代</span></span><br><span class=\"line\">    Long start = <span class=\"number\">1L</span>;</span><br><span class=\"line\">    Long result = <span class=\"number\">1L</span>;</span><br><span class=\"line\">    Long f = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"number\">64</span>; i++) &#123;</span><br><span class=\"line\">        start = start * <span class=\"number\">2</span>;</span><br><span class=\"line\">        result = result + start ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Long e = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"迭代：\"</span>+(f-e) + result);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数学归纳法</span></span><br><span class=\"line\">    f = System.currentTimeMillis();</span><br><span class=\"line\">    Double result2 =  (Math.pow(<span class=\"number\">2</span>,<span class=\"number\">63</span>))  - <span class=\"number\">1</span>;</span><br><span class=\"line\">    e = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"归纳：\"</span>+(f-e) + result2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归调用和数学归纳法的逻辑是一样的吗？\"><a href=\"#递归调用和数学归纳法的逻辑是一样的吗？\" class=\"headerlink\" title=\"递归调用和数学归纳法的逻辑是一样的吗？\"></a>递归调用和数学归纳法的逻辑是一样的吗？</h2><p>逻辑是一致的。<br>只要数学归纳法的逻辑是对的，那么写的递归逻辑也是对的</p>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"数学归纳法证明的步骤\"><a href=\"#数学归纳法证明的步骤\" class=\"headerlink\" title=\"数学归纳法证明的步骤\"></a>数学归纳法证明的步骤</h2><p>1.证明基本情况（n=1的时候）是否成立<br>2.假设n = k-1成立，在证明 n=k也成立（k&gt;1的自然数）</p>\n<h2 id=\"舍罕王的总米数，使用递归实现推导逻辑\"><a href=\"#舍罕王的总米数，使用递归实现推导逻辑\" class=\"headerlink\" title=\"舍罕王的总米数，使用递归实现推导逻辑\"></a>舍罕王的总米数，使用递归实现推导逻辑</h2><h3 id=\"数学归纳法证明舍罕王给的总数\"><a href=\"#数学归纳法证明舍罕王给的总数\" class=\"headerlink\" title=\"数学归纳法证明舍罕王给的总数\"></a>数学归纳法证明舍罕王给的总数</h3><p>证明第一个命题：第K个麦粒总数2^（k-1）<br>1.n=1时 2^(1-1)=1成立<br>2.n=k -1时 当前数为 2^(k-2) 那么当n=k时，是为k-1格的2倍所以为 2*2^(k-2) = 2^(k-1) 成立</p>\n<p>证明第二个命题： 第K个麦粒和之前的格子加起来的总数2^（k+1）-1<br>1.n=1时 2^(1-1)=1成立<br>2.n=k -1时 当前数为 2^(k)-1 那么当n=k时，是为k-1格的2倍所以为 2^(k)-1 + 2^(k) = 2^（k+1）-1 成立</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>1.经过数学归纳法可以看出其实总数是2^k-1<br>2.过程就是先从最后开始算起<br>3.证明过程最后返回的是true,是比较前后函数成功</p>\n<h4 id=\"一个参数即可，看循环几次都是否为true\"><a href=\"#一个参数即可，看循环几次都是否为true\" class=\"headerlink\" title=\"一个参数即可，看循环几次都是否为true\"></a>一个参数即可，看循环几次都是否为true</h4><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span>  <span class=\"keyword\">double</span> cur_nums = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> cur_all = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tuidao</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        lesson4.cur_nums=<span class=\"number\">1</span>;</span><br><span class=\"line\">        lesson4.cur_all=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> proveOfPreviousOne = tuidao(k-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        cur_nums = cur_nums*<span class=\"number\">2</span>;</span><br><span class=\"line\">        cur_all = cur_all + cur_nums;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> proveOfCurrentOne = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur_all == Math.pow(<span class=\"number\">2</span>, k) - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            proveOfCurrentOne = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proveOfCurrentOne &amp;&amp; proveOfPreviousOne ;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"逆向递推和正向递推\"><a href=\"#逆向递推和正向递推\" class=\"headerlink\" title=\"逆向递推和正向递推\"></a>逆向递推和正向递推</h2><p>迭代就是循环也就是正向递推。递归就是从后往前，就是你想递推。</p>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"日常工作中，什么地方用到了归纳法来提升代码效率？\"><a href=\"#日常工作中，什么地方用到了归纳法来提升代码效率？\" class=\"headerlink\" title=\"日常工作中，什么地方用到了归纳法来提升代码效率？\"></a>日常工作中，什么地方用到了归纳法来提升代码效率？</h2><p>递归清理文件夹或者文件<br>使用栈来实现递归</p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>一般发现有递归的情况，可以查看是否使用动态规划。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/07/04-数学归纳法：如何用数学归纳提升代码的运行效率？/lesson4.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>有些迭代我们可以通过理论证明某个结论，避免一次一次的计算，节约大量的计算资源。<br>归纳法的特点在于归纳2字，它已经总结了规律，不用逐步计算，可以节省很多时间和资源。</p>","more":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>有些迭代我们可以通过理论证明某个结论，避免一次一次的计算，节约大量的计算资源。<br>归纳法的特点在于归纳2字，它已经总结了规律，不用逐步计算，可以节省很多时间和资源。</p>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"什么是数学归纳法？\"><a href=\"#什么是数学归纳法？\" class=\"headerlink\" title=\"什么是数学归纳法？\"></a>什么是数学归纳法？</h2><p>根据现象，得出结论，进行验证后。一般用于无穷数列的问题。</p>\n<h2 id=\"和迭代法相比有什么优势吗？\"><a href=\"#和迭代法相比有什么优势吗？\" class=\"headerlink\" title=\"和迭代法相比有什么优势吗？\"></a>和迭代法相比有什么优势吗？</h2><p>数学归纳法最大的特点就是归纳，他总结了规律，不用逐步的计算。</p>\n<h3 id=\"使用迭代和数学归纳法来比较舍罕王给米的数据\"><a href=\"#使用迭代和数学归纳法来比较舍罕王给米的数据\" class=\"headerlink\" title=\"使用迭代和数学归纳法来比较舍罕王给米的数据\"></a>使用迭代和数学归纳法来比较舍罕王给米的数据</h3><h3 id=\"使用System-currentTimeMillis获取时间戳进行运行完成的计算\"><a href=\"#使用System-currentTimeMillis获取时间戳进行运行完成的计算\" class=\"headerlink\" title=\"使用System.currentTimeMillis获取时间戳进行运行完成的计算\"></a>使用System.currentTimeMillis获取时间戳进行运行完成的计算</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//迭代</span></span><br><span class=\"line\">    Long start = <span class=\"number\">1L</span>;</span><br><span class=\"line\">    Long result = <span class=\"number\">1L</span>;</span><br><span class=\"line\">    Long f = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; <span class=\"number\">64</span>; i++) &#123;</span><br><span class=\"line\">        start = start * <span class=\"number\">2</span>;</span><br><span class=\"line\">        result = result + start ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Long e = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"迭代：\"</span>+(f-e) + result);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数学归纳法</span></span><br><span class=\"line\">    f = System.currentTimeMillis();</span><br><span class=\"line\">    Double result2 =  (Math.pow(<span class=\"number\">2</span>,<span class=\"number\">63</span>))  - <span class=\"number\">1</span>;</span><br><span class=\"line\">    e = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"归纳：\"</span>+(f-e) + result2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归调用和数学归纳法的逻辑是一样的吗？\"><a href=\"#递归调用和数学归纳法的逻辑是一样的吗？\" class=\"headerlink\" title=\"递归调用和数学归纳法的逻辑是一样的吗？\"></a>递归调用和数学归纳法的逻辑是一样的吗？</h2><p>逻辑是一致的。<br>只要数学归纳法的逻辑是对的，那么写的递归逻辑也是对的</p>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"数学归纳法证明的步骤\"><a href=\"#数学归纳法证明的步骤\" class=\"headerlink\" title=\"数学归纳法证明的步骤\"></a>数学归纳法证明的步骤</h2><p>1.证明基本情况（n=1的时候）是否成立<br>2.假设n = k-1成立，在证明 n=k也成立（k&gt;1的自然数）</p>\n<h2 id=\"舍罕王的总米数，使用递归实现推导逻辑\"><a href=\"#舍罕王的总米数，使用递归实现推导逻辑\" class=\"headerlink\" title=\"舍罕王的总米数，使用递归实现推导逻辑\"></a>舍罕王的总米数，使用递归实现推导逻辑</h2><h3 id=\"数学归纳法证明舍罕王给的总数\"><a href=\"#数学归纳法证明舍罕王给的总数\" class=\"headerlink\" title=\"数学归纳法证明舍罕王给的总数\"></a>数学归纳法证明舍罕王给的总数</h3><p>证明第一个命题：第K个麦粒总数2^（k-1）<br>1.n=1时 2^(1-1)=1成立<br>2.n=k -1时 当前数为 2^(k-2) 那么当n=k时，是为k-1格的2倍所以为 2*2^(k-2) = 2^(k-1) 成立</p>\n<p>证明第二个命题： 第K个麦粒和之前的格子加起来的总数2^（k+1）-1<br>1.n=1时 2^(1-1)=1成立<br>2.n=k -1时 当前数为 2^(k)-1 那么当n=k时，是为k-1格的2倍所以为 2^(k)-1 + 2^(k) = 2^（k+1）-1 成立</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>1.经过数学归纳法可以看出其实总数是2^k-1<br>2.过程就是先从最后开始算起<br>3.证明过程最后返回的是true,是比较前后函数成功</p>\n<h4 id=\"一个参数即可，看循环几次都是否为true\"><a href=\"#一个参数即可，看循环几次都是否为true\" class=\"headerlink\" title=\"一个参数即可，看循环几次都是否为true\"></a>一个参数即可，看循环几次都是否为true</h4><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span>  <span class=\"keyword\">double</span> cur_nums = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> cur_all = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tuidao</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        lesson4.cur_nums=<span class=\"number\">1</span>;</span><br><span class=\"line\">        lesson4.cur_all=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> proveOfPreviousOne = tuidao(k-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        cur_nums = cur_nums*<span class=\"number\">2</span>;</span><br><span class=\"line\">        cur_all = cur_all + cur_nums;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> proveOfCurrentOne = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur_all == Math.pow(<span class=\"number\">2</span>, k) - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            proveOfCurrentOne = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proveOfCurrentOne &amp;&amp; proveOfPreviousOne ;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"逆向递推和正向递推\"><a href=\"#逆向递推和正向递推\" class=\"headerlink\" title=\"逆向递推和正向递推\"></a>逆向递推和正向递推</h2><p>迭代就是循环也就是正向递推。递归就是从后往前，就是你想递推。</p>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"日常工作中，什么地方用到了归纳法来提升代码效率？\"><a href=\"#日常工作中，什么地方用到了归纳法来提升代码效率？\" class=\"headerlink\" title=\"日常工作中，什么地方用到了归纳法来提升代码效率？\"></a>日常工作中，什么地方用到了归纳法来提升代码效率？</h2><p>递归清理文件夹或者文件<br>使用栈来实现递归</p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>一般发现有递归的情况，可以查看是否使用动态规划。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/07/04-数学归纳法：如何用数学归纳提升代码的运行效率？/lesson4.jpg\" alt></p>"},{"title":"06 | 递归（下）：分而治之，从归并排序到MapReduce","date":"2019-03-31T14:38:17.000Z","_content":"\n复杂的问题可以通过化简来逐步求解。\n\n<!-- more -->\n\n<!-- 文章 -->\n# 摘要\n\n今天主要讲分而治之的思想。\n归并排序使用了分治的思想，而这个过程需要使用递归来实现。\n\n# 疑问\n\n## 什么是归并排序？\n\n主要思想是将2个有序数组进行合并，再次之前一直将数组拆分成2个，直到只存在一个长度的数组，那么这个数组必然是有序的。\n然后在慢慢有序的合并。\n\n## 通过归并排序，如何合并有序数组{1,2,5,8} 和{3,4,6}？\n\n![](1.jpg)\n\n## 思想\n\n1.通过递归来完成归并排序，主要1个函数进行递归，还要个函数进行数组的合并排序\n2.guibing_sort这个方法先进行数组分割，分割到最小，也就是第一次循环merge的时候start到end只有2个数组长度\n3.然后合并的过程函数就是上面图上的过程\n\n\n## 代码\n\n```java\npublic class guibing2_sort {\n    public static void main(String[] args) {\n        int[] a = new int[]{10,2,3,1};\n        guibing_sort(a, 0, a.length- 1);\n        for (int i = 0; i < a.length; i++) {\n            System.out.println(a[i]);\n        }\n    }\n    public static void guibing_sort(int[] nums, int start, int end){\n        //不能相等 因为做right归并时用了mid+1!,不然会报错得。\n        if(start < end){\n            int mid = start + (end - start) /2 ;\n            guibing_sort(nums, start, mid);\n            guibing_sort(nums, mid + 1, end);\n            merge(nums, start, mid, end);\n        }\n    }\n    private static void merge(int[] nums, int start, int mid, int end) {\n        int[] left_arr = new int[mid- start+1];\n        int ls = 0;\n        int le = left_arr.length - 1;\n        for (int i = start; i < mid + 1; i++) {\n            left_arr[ls] = nums[i];\n            ls ++;\n        }\n        ls = 0;\n        le = left_arr.length - 1;\n        int[] right_arr = new int[end-mid];\n        int rs = 0;\n        int re = right_arr.length - 1;\n        for (int i = mid + 1; i < end + 1; i++) {\n            right_arr[rs] = nums[i];\n            rs ++;\n        }\n        rs = 0;\n        re = right_arr.length - 1;\n        int[] tmp = new int[end -start + 1];\n        int ts = 0;\n        while(ls <= le && rs <= re){\n            if(left_arr[ls] <= right_arr[rs]){\n                tmp[ts] = left_arr[ls];\n                ls ++;\n            }else{\n                tmp[ts] = right_arr[rs];\n                rs ++;\n            }\n            ts++;\n        }\n        if(le < ls){\n            tmp[ts] = right_arr[rs];\n        }\n        if(re < rs){\n            tmp[ts] = left_arr[ls];\n        }\n        for (int i = 0; i < tmp.length; i++) {\n            nums[start] = tmp[i];\n            start++;\n        }\n    }\n}\n```\n\n# 基本内容\n\n## 分而治之的思想\n\n简称分治。\n将一个复杂的问题分解为两个或者更多的相同规模的子问题。\n然后对这些子问题在细分，知道很容易被求解了，这样复杂的问题也就能得到解决。\n分治主要用递归来实现。\n\n## 分布式系统分治思想\n\n如果排序的数组很大，大到超过内存。\n那么我们就可以用分治的思想来做，吧这个数据集分解成很多小份，计算能胜任的大小。\n并行处理，然后在各个机器上处理完后，一个一个返回结果即可。\n\n## MapReduce主要的三个步骤体现了分布的思想\n\n![](2.jpg)\n\n### 1.数据分割和映射\n\n将数据源切片，主要讲内容变成key-value的形式匹配然后存储到哈希结构中。\n主要降低了每台机器的负载。\n\n### 2.归约\n\n就是将key相同的内容匹配，然后将value归并\n\n### 3.合并\n\n为了减少发送到归约阶段的key-value，现在本地将key-value进行一次合并。\n\n# 思考题\n\n## 归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？\n\n因为在合并阶段最小的合并就是2个长度为1的数组进行合并，而不是3个一起合并，可以分成多个组。\n但是这样会产生更多的中间结果，计算也会变得更复杂，得不偿失\n\n# 扩展\n\n## 快速排序\n\n快速排序就是随意选一个基准，然后遍历整个数组，把大于基准的数值放到基准的右边，把小于基准的数值放到基准的左边\n\n### 思想\n\n1.基准可以随意选，但是我这里的基准选的就是此数组的第一个也就是下标为0的数值作为基准\n2.然后函数的返回值应该是重新洗牌后的下标，也就是上面的下标基准拍完后的下标的值。\n3.也是使用递归函数，结束的标准就是2个指针一个初始指针一个结尾指针。初始指针的值小于结束指针的值，如果大于着结束return\n\n\n### 代码\n\n```java\npublic class kuaisu_sort {\n    public static void main(String[] args) {\n        int[] a = new int[]{3,1,10,6,77,4,2,6,8,9};\n        sort(a, 0, a.length);\n        for (int i = 0; i < a.length; i++) {\n            System.out.println(a[i]);\n        }\n    }\n     public static int kuaisu_sort(int[] a, int start, int end){\n        int mid_index = start + (end - start) / 2;\n        int mid = a[mid_index];\n        int[] min = new int[a.length];\n        int min_index = 0;\n        int[] max = new int[a.length];\n        int max_index = 0;\n        int[] same = new int[a.length];\n        int same_index = 0;\n        for (int i = 0; i < a.length; i++) {\n            if (a[i] < mid) {\n                min[min_index] = a[i];\n                min_index++;\n            } else if (a[i] > mid) {\n                max[max_index] = a[i];\n                max_index++;\n            } else {\n                same[same_index] = a[i];\n                same_index++;\n            }\n        }\n        merge_arr(a, min, min_index, max, max_index, same, same_index);\n\n        return min_index + same_index;\n\n\n     }\n\n    public static void sort(int[] array,int lo ,int hi){\n        if(lo>=hi){\n            return ;\n        }\n        int index = kuaisu_sort(array,lo,hi);\n        sort(array,lo,index-1);\n        sort(array,index+1,hi);\n    }\n\n     public static void merge_arr(int[] a, int[] min, int min_index, int[] max, int max_index, int[] same, int same_index){\n         System.arraycopy(min, 0, a, 0,min_index );\n         System.arraycopy(same, 0, a, min_index,same_index );\n         System.arraycopy(max, 0, a, min_index + same_index , max_index );\n     }\n}\n```\n\n# 小结\n\n![](lesson6.jpg)","source":"_posts/06-递归（下）：分而治之，从归并排序到MapReduce.md","raw":"---\ntitle: 06 | 递归（下）：分而治之，从归并排序到MapReduce\ndate: 2019-03-31 22:38:17\ntags: 计算机\ncategories: \n- 网络学习\n- 极客时间\n- 程序员的数学基础课\n---\n\n复杂的问题可以通过化简来逐步求解。\n\n<!-- more -->\n\n<!-- 文章 -->\n# 摘要\n\n今天主要讲分而治之的思想。\n归并排序使用了分治的思想，而这个过程需要使用递归来实现。\n\n# 疑问\n\n## 什么是归并排序？\n\n主要思想是将2个有序数组进行合并，再次之前一直将数组拆分成2个，直到只存在一个长度的数组，那么这个数组必然是有序的。\n然后在慢慢有序的合并。\n\n## 通过归并排序，如何合并有序数组{1,2,5,8} 和{3,4,6}？\n\n![](1.jpg)\n\n## 思想\n\n1.通过递归来完成归并排序，主要1个函数进行递归，还要个函数进行数组的合并排序\n2.guibing_sort这个方法先进行数组分割，分割到最小，也就是第一次循环merge的时候start到end只有2个数组长度\n3.然后合并的过程函数就是上面图上的过程\n\n\n## 代码\n\n```java\npublic class guibing2_sort {\n    public static void main(String[] args) {\n        int[] a = new int[]{10,2,3,1};\n        guibing_sort(a, 0, a.length- 1);\n        for (int i = 0; i < a.length; i++) {\n            System.out.println(a[i]);\n        }\n    }\n    public static void guibing_sort(int[] nums, int start, int end){\n        //不能相等 因为做right归并时用了mid+1!,不然会报错得。\n        if(start < end){\n            int mid = start + (end - start) /2 ;\n            guibing_sort(nums, start, mid);\n            guibing_sort(nums, mid + 1, end);\n            merge(nums, start, mid, end);\n        }\n    }\n    private static void merge(int[] nums, int start, int mid, int end) {\n        int[] left_arr = new int[mid- start+1];\n        int ls = 0;\n        int le = left_arr.length - 1;\n        for (int i = start; i < mid + 1; i++) {\n            left_arr[ls] = nums[i];\n            ls ++;\n        }\n        ls = 0;\n        le = left_arr.length - 1;\n        int[] right_arr = new int[end-mid];\n        int rs = 0;\n        int re = right_arr.length - 1;\n        for (int i = mid + 1; i < end + 1; i++) {\n            right_arr[rs] = nums[i];\n            rs ++;\n        }\n        rs = 0;\n        re = right_arr.length - 1;\n        int[] tmp = new int[end -start + 1];\n        int ts = 0;\n        while(ls <= le && rs <= re){\n            if(left_arr[ls] <= right_arr[rs]){\n                tmp[ts] = left_arr[ls];\n                ls ++;\n            }else{\n                tmp[ts] = right_arr[rs];\n                rs ++;\n            }\n            ts++;\n        }\n        if(le < ls){\n            tmp[ts] = right_arr[rs];\n        }\n        if(re < rs){\n            tmp[ts] = left_arr[ls];\n        }\n        for (int i = 0; i < tmp.length; i++) {\n            nums[start] = tmp[i];\n            start++;\n        }\n    }\n}\n```\n\n# 基本内容\n\n## 分而治之的思想\n\n简称分治。\n将一个复杂的问题分解为两个或者更多的相同规模的子问题。\n然后对这些子问题在细分，知道很容易被求解了，这样复杂的问题也就能得到解决。\n分治主要用递归来实现。\n\n## 分布式系统分治思想\n\n如果排序的数组很大，大到超过内存。\n那么我们就可以用分治的思想来做，吧这个数据集分解成很多小份，计算能胜任的大小。\n并行处理，然后在各个机器上处理完后，一个一个返回结果即可。\n\n## MapReduce主要的三个步骤体现了分布的思想\n\n![](2.jpg)\n\n### 1.数据分割和映射\n\n将数据源切片，主要讲内容变成key-value的形式匹配然后存储到哈希结构中。\n主要降低了每台机器的负载。\n\n### 2.归约\n\n就是将key相同的内容匹配，然后将value归并\n\n### 3.合并\n\n为了减少发送到归约阶段的key-value，现在本地将key-value进行一次合并。\n\n# 思考题\n\n## 归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？\n\n因为在合并阶段最小的合并就是2个长度为1的数组进行合并，而不是3个一起合并，可以分成多个组。\n但是这样会产生更多的中间结果，计算也会变得更复杂，得不偿失\n\n# 扩展\n\n## 快速排序\n\n快速排序就是随意选一个基准，然后遍历整个数组，把大于基准的数值放到基准的右边，把小于基准的数值放到基准的左边\n\n### 思想\n\n1.基准可以随意选，但是我这里的基准选的就是此数组的第一个也就是下标为0的数值作为基准\n2.然后函数的返回值应该是重新洗牌后的下标，也就是上面的下标基准拍完后的下标的值。\n3.也是使用递归函数，结束的标准就是2个指针一个初始指针一个结尾指针。初始指针的值小于结束指针的值，如果大于着结束return\n\n\n### 代码\n\n```java\npublic class kuaisu_sort {\n    public static void main(String[] args) {\n        int[] a = new int[]{3,1,10,6,77,4,2,6,8,9};\n        sort(a, 0, a.length);\n        for (int i = 0; i < a.length; i++) {\n            System.out.println(a[i]);\n        }\n    }\n     public static int kuaisu_sort(int[] a, int start, int end){\n        int mid_index = start + (end - start) / 2;\n        int mid = a[mid_index];\n        int[] min = new int[a.length];\n        int min_index = 0;\n        int[] max = new int[a.length];\n        int max_index = 0;\n        int[] same = new int[a.length];\n        int same_index = 0;\n        for (int i = 0; i < a.length; i++) {\n            if (a[i] < mid) {\n                min[min_index] = a[i];\n                min_index++;\n            } else if (a[i] > mid) {\n                max[max_index] = a[i];\n                max_index++;\n            } else {\n                same[same_index] = a[i];\n                same_index++;\n            }\n        }\n        merge_arr(a, min, min_index, max, max_index, same, same_index);\n\n        return min_index + same_index;\n\n\n     }\n\n    public static void sort(int[] array,int lo ,int hi){\n        if(lo>=hi){\n            return ;\n        }\n        int index = kuaisu_sort(array,lo,hi);\n        sort(array,lo,index-1);\n        sort(array,index+1,hi);\n    }\n\n     public static void merge_arr(int[] a, int[] min, int min_index, int[] max, int max_index, int[] same, int same_index){\n         System.arraycopy(min, 0, a, 0,min_index );\n         System.arraycopy(same, 0, a, min_index,same_index );\n         System.arraycopy(max, 0, a, min_index + same_index , max_index );\n     }\n}\n```\n\n# 小结\n\n![](lesson6.jpg)","slug":"06-递归（下）：分而治之，从归并排序到MapReduce","published":1,"updated":"2019-04-02T14:08:03.564Z","_id":"cjtzuref0000ca0ts1bfxwyjv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>复杂的问题可以通过化简来逐步求解。</p>\n<a id=\"more\"></a>\n<!-- 文章 -->\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>今天主要讲分而治之的思想。<br>归并排序使用了分治的思想，而这个过程需要使用递归来实现。</p>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"什么是归并排序？\"><a href=\"#什么是归并排序？\" class=\"headerlink\" title=\"什么是归并排序？\"></a>什么是归并排序？</h2><p>主要思想是将2个有序数组进行合并，再次之前一直将数组拆分成2个，直到只存在一个长度的数组，那么这个数组必然是有序的。<br>然后在慢慢有序的合并。</p>\n<h2 id=\"通过归并排序，如何合并有序数组-1-2-5-8-和-3-4-6-？\"><a href=\"#通过归并排序，如何合并有序数组-1-2-5-8-和-3-4-6-？\" class=\"headerlink\" title=\"通过归并排序，如何合并有序数组{1,2,5,8} 和{3,4,6}？\"></a>通过归并排序，如何合并有序数组{1,2,5,8} 和{3,4,6}？</h2><p><img src=\"/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/1.jpg\" alt></p>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>1.通过递归来完成归并排序，主要1个函数进行递归，还要个函数进行数组的合并排序<br>2.guibing_sort这个方法先进行数组分割，分割到最小，也就是第一次循环merge的时候start到end只有2个数组长度<br>3.然后合并的过程函数就是上面图上的过程</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">guibing2_sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">10</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        guibing_sort(a, <span class=\"number\">0</span>, a.length- <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">guibing_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不能相等 因为做right归并时用了mid+1!,不然会报错得。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start &lt; end)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = start + (end - start) /<span class=\"number\">2</span> ;</span><br><span class=\"line\">            guibing_sort(nums, start, mid);</span><br><span class=\"line\">            guibing_sort(nums, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">            merge(nums, start, mid, end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] left_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[mid- start+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> le = left_arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; mid + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            left_arr[ls] = nums[i];</span><br><span class=\"line\">            ls ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        le = left_arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] right_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[end-mid];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rs = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> re = right_arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = mid + <span class=\"number\">1</span>; i &lt; end + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            right_arr[rs] = nums[i];</span><br><span class=\"line\">            rs ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rs = <span class=\"number\">0</span>;</span><br><span class=\"line\">        re = right_arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] tmp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[end -start + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ts = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ls &lt;= le &amp;&amp; rs &lt;= re)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left_arr[ls] &lt;= right_arr[rs])&#123;</span><br><span class=\"line\">                tmp[ts] = left_arr[ls];</span><br><span class=\"line\">                ls ++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                tmp[ts] = right_arr[rs];</span><br><span class=\"line\">                rs ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ts++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(le &lt; ls)&#123;</span><br><span class=\"line\">            tmp[ts] = right_arr[rs];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(re &lt; rs)&#123;</span><br><span class=\"line\">            tmp[ts] = left_arr[ls];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class=\"line\">            nums[start] = tmp[i];</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"分而治之的思想\"><a href=\"#分而治之的思想\" class=\"headerlink\" title=\"分而治之的思想\"></a>分而治之的思想</h2><p>简称分治。<br>将一个复杂的问题分解为两个或者更多的相同规模的子问题。<br>然后对这些子问题在细分，知道很容易被求解了，这样复杂的问题也就能得到解决。<br>分治主要用递归来实现。</p>\n<h2 id=\"分布式系统分治思想\"><a href=\"#分布式系统分治思想\" class=\"headerlink\" title=\"分布式系统分治思想\"></a>分布式系统分治思想</h2><p>如果排序的数组很大，大到超过内存。<br>那么我们就可以用分治的思想来做，吧这个数据集分解成很多小份，计算能胜任的大小。<br>并行处理，然后在各个机器上处理完后，一个一个返回结果即可。</p>\n<h2 id=\"MapReduce主要的三个步骤体现了分布的思想\"><a href=\"#MapReduce主要的三个步骤体现了分布的思想\" class=\"headerlink\" title=\"MapReduce主要的三个步骤体现了分布的思想\"></a>MapReduce主要的三个步骤体现了分布的思想</h2><p><img src=\"/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/2.jpg\" alt></p>\n<h3 id=\"1-数据分割和映射\"><a href=\"#1-数据分割和映射\" class=\"headerlink\" title=\"1.数据分割和映射\"></a>1.数据分割和映射</h3><p>将数据源切片，主要讲内容变成key-value的形式匹配然后存储到哈希结构中。<br>主要降低了每台机器的负载。</p>\n<h3 id=\"2-归约\"><a href=\"#2-归约\" class=\"headerlink\" title=\"2.归约\"></a>2.归约</h3><p>就是将key相同的内容匹配，然后将value归并</p>\n<h3 id=\"3-合并\"><a href=\"#3-合并\" class=\"headerlink\" title=\"3.合并\"></a>3.合并</h3><p>为了减少发送到归约阶段的key-value，现在本地将key-value进行一次合并。</p>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？\"><a href=\"#归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？\" class=\"headerlink\" title=\"归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？\"></a>归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？</h2><p>因为在合并阶段最小的合并就是2个长度为1的数组进行合并，而不是3个一起合并，可以分成多个组。<br>但是这样会产生更多的中间结果，计算也会变得更复杂，得不偿失</p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序就是随意选一个基准，然后遍历整个数组，把大于基准的数值放到基准的右边，把小于基准的数值放到基准的左边</p>\n<h3 id=\"思想-1\"><a href=\"#思想-1\" class=\"headerlink\" title=\"思想\"></a>思想</h3><p>1.基准可以随意选，但是我这里的基准选的就是此数组的第一个也就是下标为0的数值作为基准<br>2.然后函数的返回值应该是重新洗牌后的下标，也就是上面的下标基准拍完后的下标的值。<br>3.也是使用递归函数，结束的标准就是2个指针一个初始指针一个结尾指针。初始指针的值小于结束指针的值，如果大于着结束return</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">kuaisu_sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">6</span>,<span class=\"number\">77</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">        sort(a, <span class=\"number\">0</span>, a.length);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">kuaisu_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid_index = start + (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = a[mid_index];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] min = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] max = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] same = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> same_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] &lt; mid) &#123;</span><br><span class=\"line\">                min[min_index] = a[i];</span><br><span class=\"line\">                min_index++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i] &gt; mid) &#123;</span><br><span class=\"line\">                max[max_index] = a[i];</span><br><span class=\"line\">                max_index++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                same[same_index] = a[i];</span><br><span class=\"line\">                same_index++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        merge_arr(a, min, min_index, max, max_index, same, same_index);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> min_index + same_index;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array,<span class=\"keyword\">int</span> lo ,<span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lo&gt;=hi)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = kuaisu_sort(array,lo,hi);</span><br><span class=\"line\">        sort(array,lo,index-<span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(array,index+<span class=\"number\">1</span>,hi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge_arr</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] min, <span class=\"keyword\">int</span> min_index, <span class=\"keyword\">int</span>[] max, <span class=\"keyword\">int</span> max_index, <span class=\"keyword\">int</span>[] same, <span class=\"keyword\">int</span> same_index)</span></span>&#123;</span><br><span class=\"line\">         System.arraycopy(min, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>,min_index );</span><br><span class=\"line\">         System.arraycopy(same, <span class=\"number\">0</span>, a, min_index,same_index );</span><br><span class=\"line\">         System.arraycopy(max, <span class=\"number\">0</span>, a, min_index + same_index , max_index );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/lesson6.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>复杂的问题可以通过化简来逐步求解。</p>","more":"<!-- 文章 -->\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>今天主要讲分而治之的思想。<br>归并排序使用了分治的思想，而这个过程需要使用递归来实现。</p>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"什么是归并排序？\"><a href=\"#什么是归并排序？\" class=\"headerlink\" title=\"什么是归并排序？\"></a>什么是归并排序？</h2><p>主要思想是将2个有序数组进行合并，再次之前一直将数组拆分成2个，直到只存在一个长度的数组，那么这个数组必然是有序的。<br>然后在慢慢有序的合并。</p>\n<h2 id=\"通过归并排序，如何合并有序数组-1-2-5-8-和-3-4-6-？\"><a href=\"#通过归并排序，如何合并有序数组-1-2-5-8-和-3-4-6-？\" class=\"headerlink\" title=\"通过归并排序，如何合并有序数组{1,2,5,8} 和{3,4,6}？\"></a>通过归并排序，如何合并有序数组{1,2,5,8} 和{3,4,6}？</h2><p><img src=\"/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/1.jpg\" alt></p>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>1.通过递归来完成归并排序，主要1个函数进行递归，还要个函数进行数组的合并排序<br>2.guibing_sort这个方法先进行数组分割，分割到最小，也就是第一次循环merge的时候start到end只有2个数组长度<br>3.然后合并的过程函数就是上面图上的过程</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">guibing2_sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">10</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        guibing_sort(a, <span class=\"number\">0</span>, a.length- <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">guibing_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不能相等 因为做right归并时用了mid+1!,不然会报错得。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start &lt; end)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = start + (end - start) /<span class=\"number\">2</span> ;</span><br><span class=\"line\">            guibing_sort(nums, start, mid);</span><br><span class=\"line\">            guibing_sort(nums, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">            merge(nums, start, mid, end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] left_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[mid- start+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> le = left_arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; mid + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            left_arr[ls] = nums[i];</span><br><span class=\"line\">            ls ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        le = left_arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] right_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[end-mid];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rs = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> re = right_arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = mid + <span class=\"number\">1</span>; i &lt; end + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            right_arr[rs] = nums[i];</span><br><span class=\"line\">            rs ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rs = <span class=\"number\">0</span>;</span><br><span class=\"line\">        re = right_arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] tmp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[end -start + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ts = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ls &lt;= le &amp;&amp; rs &lt;= re)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left_arr[ls] &lt;= right_arr[rs])&#123;</span><br><span class=\"line\">                tmp[ts] = left_arr[ls];</span><br><span class=\"line\">                ls ++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                tmp[ts] = right_arr[rs];</span><br><span class=\"line\">                rs ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ts++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(le &lt; ls)&#123;</span><br><span class=\"line\">            tmp[ts] = right_arr[rs];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(re &lt; rs)&#123;</span><br><span class=\"line\">            tmp[ts] = left_arr[ls];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class=\"line\">            nums[start] = tmp[i];</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"分而治之的思想\"><a href=\"#分而治之的思想\" class=\"headerlink\" title=\"分而治之的思想\"></a>分而治之的思想</h2><p>简称分治。<br>将一个复杂的问题分解为两个或者更多的相同规模的子问题。<br>然后对这些子问题在细分，知道很容易被求解了，这样复杂的问题也就能得到解决。<br>分治主要用递归来实现。</p>\n<h2 id=\"分布式系统分治思想\"><a href=\"#分布式系统分治思想\" class=\"headerlink\" title=\"分布式系统分治思想\"></a>分布式系统分治思想</h2><p>如果排序的数组很大，大到超过内存。<br>那么我们就可以用分治的思想来做，吧这个数据集分解成很多小份，计算能胜任的大小。<br>并行处理，然后在各个机器上处理完后，一个一个返回结果即可。</p>\n<h2 id=\"MapReduce主要的三个步骤体现了分布的思想\"><a href=\"#MapReduce主要的三个步骤体现了分布的思想\" class=\"headerlink\" title=\"MapReduce主要的三个步骤体现了分布的思想\"></a>MapReduce主要的三个步骤体现了分布的思想</h2><p><img src=\"/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/2.jpg\" alt></p>\n<h3 id=\"1-数据分割和映射\"><a href=\"#1-数据分割和映射\" class=\"headerlink\" title=\"1.数据分割和映射\"></a>1.数据分割和映射</h3><p>将数据源切片，主要讲内容变成key-value的形式匹配然后存储到哈希结构中。<br>主要降低了每台机器的负载。</p>\n<h3 id=\"2-归约\"><a href=\"#2-归约\" class=\"headerlink\" title=\"2.归约\"></a>2.归约</h3><p>就是将key相同的内容匹配，然后将value归并</p>\n<h3 id=\"3-合并\"><a href=\"#3-合并\" class=\"headerlink\" title=\"3.合并\"></a>3.合并</h3><p>为了减少发送到归约阶段的key-value，现在本地将key-value进行一次合并。</p>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h2 id=\"归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？\"><a href=\"#归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？\" class=\"headerlink\" title=\"归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？\"></a>归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？</h2><p>因为在合并阶段最小的合并就是2个长度为1的数组进行合并，而不是3个一起合并，可以分成多个组。<br>但是这样会产生更多的中间结果，计算也会变得更复杂，得不偿失</p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序就是随意选一个基准，然后遍历整个数组，把大于基准的数值放到基准的右边，把小于基准的数值放到基准的左边</p>\n<h3 id=\"思想-1\"><a href=\"#思想-1\" class=\"headerlink\" title=\"思想\"></a>思想</h3><p>1.基准可以随意选，但是我这里的基准选的就是此数组的第一个也就是下标为0的数值作为基准<br>2.然后函数的返回值应该是重新洗牌后的下标，也就是上面的下标基准拍完后的下标的值。<br>3.也是使用递归函数，结束的标准就是2个指针一个初始指针一个结尾指针。初始指针的值小于结束指针的值，如果大于着结束return</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">kuaisu_sort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">6</span>,<span class=\"number\">77</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">        sort(a, <span class=\"number\">0</span>, a.length);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">kuaisu_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid_index = start + (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = a[mid_index];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] min = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] max = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] same = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> same_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] &lt; mid) &#123;</span><br><span class=\"line\">                min[min_index] = a[i];</span><br><span class=\"line\">                min_index++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i] &gt; mid) &#123;</span><br><span class=\"line\">                max[max_index] = a[i];</span><br><span class=\"line\">                max_index++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                same[same_index] = a[i];</span><br><span class=\"line\">                same_index++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        merge_arr(a, min, min_index, max, max_index, same, same_index);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> min_index + same_index;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array,<span class=\"keyword\">int</span> lo ,<span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lo&gt;=hi)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = kuaisu_sort(array,lo,hi);</span><br><span class=\"line\">        sort(array,lo,index-<span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(array,index+<span class=\"number\">1</span>,hi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge_arr</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] min, <span class=\"keyword\">int</span> min_index, <span class=\"keyword\">int</span>[] max, <span class=\"keyword\">int</span> max_index, <span class=\"keyword\">int</span>[] same, <span class=\"keyword\">int</span> same_index)</span></span>&#123;</span><br><span class=\"line\">         System.arraycopy(min, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>,min_index );</span><br><span class=\"line\">         System.arraycopy(same, <span class=\"number\">0</span>, a, min_index,same_index );</span><br><span class=\"line\">         System.arraycopy(max, <span class=\"number\">0</span>, a, min_index + same_index , max_index );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><img src=\"/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/lesson6.jpg\" alt></p>"},{"title":"Leetcode面试题-01","date":"2019-03-13T13:52:32.000Z","_content":"\nLeetcode面试题-01  共3道\n\n<!-- more -->\n\n# 问题\n只出现一次的数字\n\n给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n说明：\n\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n\n示例 1:\n\n输入: [2,2,1]\n输出: 1\n示例 2:\n\n输入: [4,1,2,1,2]\n输出: 4\n\n\n## 思路\n\n1.所有数组内的数值都做异或处理\n异或的共性 相同数值做异或为0！\n\n\n## 自己的代码\n\n```java\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int result = nums[0]; \n        for(int x =1; x < nums.length; x++){\n            result = result^nums[x];\n        }\n        return result;\n    }\n}\n```\n\n\n\n# 问题\n求众数\n\n给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于  n/2  的元素。\n\n你可以假设数组是非空的，并且给定的数组总是存在众数。\n\n示例 1:\n\n输入: [3,2,3]\n输出: 3\n示例 2:\n\n输入: [2,2,1,1,1,2,2]\n输出: 2\n\n\n## 思路\n\n1.遍历一次数组，使用额外存储HASHMAP，key存值，val存计数器\n2.当计数器超过或等于n/2+1直接跳出循环\n3.返回得到的结果\n\n## 自己的代码\n\n```java\nimport java.util.HashMap;\nclass Solution {\n    public int majorityElement(int[] nums) {\n        HashMap hashMap = new HashMap<Integer,Integer>();\n        int result =nums[0] ;\n        for (int i = 0; i < nums.length; i++) {\n            if(hashMap.containsKey(nums[i])){\n                int tmp = (Integer)hashMap.get(nums[i])+1;\n                if(tmp >= (nums.length/2 +1)){\n                    result = nums[i];\n                    break;\n                }else{\n                    hashMap.put(nums[i],(Integer)hashMap.get(nums[i])+1);\n                }\n                \n            }else {\n                hashMap.put(nums[i], 1);\n            }\n        }\n        \n        return result;\n    }\n}\n```\n\n\n\n# 问题\n合并两个有序数组\n\n给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。\n\n说明:\n\n初始化 nums1 和 nums2 的元素数量分别为 m 和 n。\n你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。\n示例:\n\n输入:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n输出: [1,2,2,3,5,6]\n\n\n## 思路\n\n### 思路一\n1.使用额外的数组存储比较2个数组的最小值\n2.每次都取2个数组的头一个，如果小，存入额外的数组\n3.直到结束，将额外的数组赋值给一开始的数组\n\n### 思路二\n1.直接从m,n处从后往前比较，将比较大的值放入第一个数组的最末位\n2.和思路一类似\n\n## 自己的代码\n### 思路二\n```java\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int i = m -1 , j = n- 1, count = nums1.length - 1;//定义三个指针，分别指向三个数组的第一个元素\n\n        while (i >=0 && j >=0) {\n            if (nums1[i] >= nums2[j]) {\n                nums1[count--] = nums1[i--];\n            } else {\n                nums1[count--] = nums2[j--];\n            }\n        }\n        System.out.println(\"111111\");\n\n        while (i >= 0) {\n            nums1[count--] = nums1[i--];\n        }\n\n\n        while (j >= 0) {\n            nums1[count--] = nums2[j--];\n        }\n        \n    }\n}\n```\n\n\n","source":"_posts/Leetcode面试题-01.md","raw":"---\ntitle: Leetcode面试题-01\ndate: 2019-03-13 21:52:32\ntags: 数组\ncategories: \n- 算法\n- Leetcode\n---\n\nLeetcode面试题-01  共3道\n\n<!-- more -->\n\n# 问题\n只出现一次的数字\n\n给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n说明：\n\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n\n示例 1:\n\n输入: [2,2,1]\n输出: 1\n示例 2:\n\n输入: [4,1,2,1,2]\n输出: 4\n\n\n## 思路\n\n1.所有数组内的数值都做异或处理\n异或的共性 相同数值做异或为0！\n\n\n## 自己的代码\n\n```java\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int result = nums[0]; \n        for(int x =1; x < nums.length; x++){\n            result = result^nums[x];\n        }\n        return result;\n    }\n}\n```\n\n\n\n# 问题\n求众数\n\n给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于  n/2  的元素。\n\n你可以假设数组是非空的，并且给定的数组总是存在众数。\n\n示例 1:\n\n输入: [3,2,3]\n输出: 3\n示例 2:\n\n输入: [2,2,1,1,1,2,2]\n输出: 2\n\n\n## 思路\n\n1.遍历一次数组，使用额外存储HASHMAP，key存值，val存计数器\n2.当计数器超过或等于n/2+1直接跳出循环\n3.返回得到的结果\n\n## 自己的代码\n\n```java\nimport java.util.HashMap;\nclass Solution {\n    public int majorityElement(int[] nums) {\n        HashMap hashMap = new HashMap<Integer,Integer>();\n        int result =nums[0] ;\n        for (int i = 0; i < nums.length; i++) {\n            if(hashMap.containsKey(nums[i])){\n                int tmp = (Integer)hashMap.get(nums[i])+1;\n                if(tmp >= (nums.length/2 +1)){\n                    result = nums[i];\n                    break;\n                }else{\n                    hashMap.put(nums[i],(Integer)hashMap.get(nums[i])+1);\n                }\n                \n            }else {\n                hashMap.put(nums[i], 1);\n            }\n        }\n        \n        return result;\n    }\n}\n```\n\n\n\n# 问题\n合并两个有序数组\n\n给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。\n\n说明:\n\n初始化 nums1 和 nums2 的元素数量分别为 m 和 n。\n你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。\n示例:\n\n输入:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n输出: [1,2,2,3,5,6]\n\n\n## 思路\n\n### 思路一\n1.使用额外的数组存储比较2个数组的最小值\n2.每次都取2个数组的头一个，如果小，存入额外的数组\n3.直到结束，将额外的数组赋值给一开始的数组\n\n### 思路二\n1.直接从m,n处从后往前比较，将比较大的值放入第一个数组的最末位\n2.和思路一类似\n\n## 自己的代码\n### 思路二\n```java\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int i = m -1 , j = n- 1, count = nums1.length - 1;//定义三个指针，分别指向三个数组的第一个元素\n\n        while (i >=0 && j >=0) {\n            if (nums1[i] >= nums2[j]) {\n                nums1[count--] = nums1[i--];\n            } else {\n                nums1[count--] = nums2[j--];\n            }\n        }\n        System.out.println(\"111111\");\n\n        while (i >= 0) {\n            nums1[count--] = nums1[i--];\n        }\n\n\n        while (j >= 0) {\n            nums1[count--] = nums2[j--];\n        }\n        \n    }\n}\n```\n\n\n","slug":"Leetcode面试题-01","published":1,"updated":"2019-03-13T14:02:16.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzuref2000ea0tsmnumpuv8","content":"<p>Leetcode面试题-01  共3道</p>\n<a id=\"more\"></a>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>只出现一次的数字</p>\n<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。<br>说明：</p>\n<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>\n<p>示例 1:</p>\n<p>输入: [2,2,1]<br>输出: 1<br>示例 2:</p>\n<p>输入: [4,1,2,1,2]<br>输出: 4</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.所有数组内的数值都做异或处理<br>异或的共性 相同数值做异或为0！</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = nums[<span class=\"number\">0</span>]; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x =<span class=\"number\">1</span>; x &lt; nums.length; x++)&#123;</span><br><span class=\"line\">            result = result^nums[x];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>求众数</p>\n<p>给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于  n/2  的元素。</p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p>\n<p>示例 1:</p>\n<p>输入: [3,2,3]<br>输出: 3<br>示例 2:</p>\n<p>输入: [2,2,1,1,1,2,2]<br>输出: 2</p>\n<h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.遍历一次数组，使用额外存储HASHMAP，key存值，val存计数器<br>2.当计数器超过或等于n/2+1直接跳出循环<br>3.返回得到的结果</p>\n<h2 id=\"自己的代码-1\"><a href=\"#自己的代码-1\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        HashMap hashMap = <span class=\"keyword\">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result =nums[<span class=\"number\">0</span>] ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hashMap.containsKey(nums[i]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = (Integer)hashMap.get(nums[i])+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp &gt;= (nums.length/<span class=\"number\">2</span> +<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    result = nums[i];</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    hashMap.put(nums[i],(Integer)hashMap.get(nums[i])+<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                hashMap.put(nums[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>合并两个有序数组</p>\n<p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p>\n<p>说明:</p>\n<p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。<br>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。<br>示例:</p>\n<p>输入:<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3</p>\n<p>输出: [1,2,2,3,5,6]</p>\n<h2 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"思路一\"><a href=\"#思路一\" class=\"headerlink\" title=\"思路一\"></a>思路一</h3><p>1.使用额外的数组存储比较2个数组的最小值<br>2.每次都取2个数组的头一个，如果小，存入额外的数组<br>3.直到结束，将额外的数组赋值给一开始的数组</p>\n<h3 id=\"思路二\"><a href=\"#思路二\" class=\"headerlink\" title=\"思路二\"></a>思路二</h3><p>1.直接从m,n处从后往前比较，将比较大的值放入第一个数组的最末位<br>2.和思路一类似</p>\n<h2 id=\"自己的代码-2\"><a href=\"#自己的代码-2\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><h3 id=\"思路二-1\"><a href=\"#思路二-1\" class=\"headerlink\" title=\"思路二\"></a>思路二</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span>[] nums2, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = m -<span class=\"number\">1</span> , j = n- <span class=\"number\">1</span>, count = nums1.length - <span class=\"number\">1</span>;<span class=\"comment\">//定义三个指针，分别指向三个数组的第一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt;=<span class=\"number\">0</span> &amp;&amp; j &gt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[i] &gt;= nums2[j]) &#123;</span><br><span class=\"line\">                nums1[count--] = nums1[i--];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                nums1[count--] = nums2[j--];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"111111\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            nums1[count--] = nums1[i--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            nums1[count--] = nums2[j--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Leetcode面试题-01  共3道</p>","more":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>只出现一次的数字</p>\n<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。<br>说明：</p>\n<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>\n<p>示例 1:</p>\n<p>输入: [2,2,1]<br>输出: 1<br>示例 2:</p>\n<p>输入: [4,1,2,1,2]<br>输出: 4</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.所有数组内的数值都做异或处理<br>异或的共性 相同数值做异或为0！</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = nums[<span class=\"number\">0</span>]; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x =<span class=\"number\">1</span>; x &lt; nums.length; x++)&#123;</span><br><span class=\"line\">            result = result^nums[x];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>求众数</p>\n<p>给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于  n/2  的元素。</p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p>\n<p>示例 1:</p>\n<p>输入: [3,2,3]<br>输出: 3<br>示例 2:</p>\n<p>输入: [2,2,1,1,1,2,2]<br>输出: 2</p>\n<h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.遍历一次数组，使用额外存储HASHMAP，key存值，val存计数器<br>2.当计数器超过或等于n/2+1直接跳出循环<br>3.返回得到的结果</p>\n<h2 id=\"自己的代码-1\"><a href=\"#自己的代码-1\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        HashMap hashMap = <span class=\"keyword\">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result =nums[<span class=\"number\">0</span>] ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hashMap.containsKey(nums[i]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = (Integer)hashMap.get(nums[i])+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp &gt;= (nums.length/<span class=\"number\">2</span> +<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    result = nums[i];</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    hashMap.put(nums[i],(Integer)hashMap.get(nums[i])+<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                hashMap.put(nums[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>合并两个有序数组</p>\n<p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p>\n<p>说明:</p>\n<p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。<br>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。<br>示例:</p>\n<p>输入:<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3</p>\n<p>输出: [1,2,2,3,5,6]</p>\n<h2 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"思路一\"><a href=\"#思路一\" class=\"headerlink\" title=\"思路一\"></a>思路一</h3><p>1.使用额外的数组存储比较2个数组的最小值<br>2.每次都取2个数组的头一个，如果小，存入额外的数组<br>3.直到结束，将额外的数组赋值给一开始的数组</p>\n<h3 id=\"思路二\"><a href=\"#思路二\" class=\"headerlink\" title=\"思路二\"></a>思路二</h3><p>1.直接从m,n处从后往前比较，将比较大的值放入第一个数组的最末位<br>2.和思路一类似</p>\n<h2 id=\"自己的代码-2\"><a href=\"#自己的代码-2\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><h3 id=\"思路二-1\"><a href=\"#思路二-1\" class=\"headerlink\" title=\"思路二\"></a>思路二</h3><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span>[] nums2, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = m -<span class=\"number\">1</span> , j = n- <span class=\"number\">1</span>, count = nums1.length - <span class=\"number\">1</span>;<span class=\"comment\">//定义三个指针，分别指向三个数组的第一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt;=<span class=\"number\">0</span> &amp;&amp; j &gt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[i] &gt;= nums2[j]) &#123;</span><br><span class=\"line\">                nums1[count--] = nums1[i--];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                nums1[count--] = nums2[j--];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"111111\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            nums1[count--] = nums1[i--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            nums1[count--] = nums2[j--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Leetcode面试题-03","date":"2019-03-24T12:34:00.000Z","_content":"\nLeetcode 算法 - 字符串\n<!-- more -->\n\n# 问题\n\n给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。\n\n说明：本题中，我们将空字符串定义为有效的回文串。\n\n示例 1:\n\n输入: \"A man, a plan, a canal: Panama\"\n输出: true\n示例 2:\n\n输入: \"race a car\"\n输出: false\n\n回文串的解释：\n\n正过来和反过来的字符串一致，不算特殊符号\n\n## 思路\n\n1.使用双指针，一个指向前一个指向后\n2.同时往前和后，比较，如果遇到非字母和数字的就向下移，然后比较指针的值\n\n## 自己的代码\n\n```java\n    public boolean isPalindrome(String cs) {\n        boolean flag = true;\n        char[] cs_c = cs.toLowerCase().toCharArray();\n        int right = 0;\n        int left = cs_c.length - 1;\n        while(right < cs_c.length && left >=0) {\n            char tmp = cs_c[right];\n            char tmp2 = cs_c[left];\n\n            while(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp)) && right < cs_c.length - 1){\n                right++;\n                tmp = cs_c[right];\n            }\n            while(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp2)) && left > 0){\n                left--;\n                tmp2 = cs_c[left];\n            }\n            if(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp2))){\n                tmp2 = ' ';\n            }\n            if(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp))){\n                tmp = ' ';\n            }\n            if(!String.valueOf(tmp).equals(String.valueOf(tmp2))){\n                flag = false;\n                break;\n            }\n            right++;\n            left--;\n        }\n        return flag;\n    }\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n<!-- 面试题 -->\n\n# 问题\n\n给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。\n\n返回 s 所有可能的分割方案。\n\n示例:\n\n输入: \"aab\"\n输出:\n[\n  [\"aa\",\"b\"],\n  [\"a\",\"a\",\"b\"]\n]\n\n\n## 思路\n\n1.主思想是递归。 返回值是[['m','m','a','n'],['mm','a','n']]\n2.返回list<list<String>>,最后返回的时候，然后主要是add list,完成的list添加进list<list<String>>\n3.变量是字符串，当字符串长度为1，或者0的是否返回list<list<String>>\n\n## 自己的代码\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nclass Solution {\n    public boolean isPalindrome(String cs) {\n        boolean flag = true;\n        char[] cs_c = cs.toLowerCase().toCharArray();\n        int right = 0;\n        int left = cs_c.length - 1;\n        while(right < cs_c.length && left >=0) {\n            char tmp = cs_c[right];\n            char tmp2 = cs_c[left];\n\n            while(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp)) && right < cs_c.length - 1){\n                right++;\n                tmp = cs_c[right];\n            }\n            while(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp2)) && left > 0){\n                left--;\n                tmp2 = cs_c[left];\n            }\n            if(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp2))){\n                tmp2 = ' ';\n            }\n            if(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp))){\n                tmp = ' ';\n            }\n            if(!String.valueOf(tmp).equals(String.valueOf(tmp2))){\n                flag = false;\n                break;\n            }\n            right++;\n            left--;\n        }\n        return flag;\n    }\n    \n    public List<List<String>> find_huiwen_str(String s,List<String> list, List<List<String>> llist){\n        int s_len ;\n        if(s.length() == 0){\n            llist.add(list);\n            return llist;\n        }\n        if(s.length() == 1){\n            list.add(s);\n            llist.add(list);\n            return llist;\n        }\n        ArrayList tmp_list = (ArrayList) list;\n        List<String> tl = (List<String>)tmp_list.clone();;\n\n        for (int i = 1; i <= s.length() ; i++) {\n            String tmp = s.substring(0,i);\n            if(isPalindrome(tmp)){\n                tl = (List<String>)tmp_list.clone();\n                tl.add(tmp);\n                int ss = tl.get(tl.size() - 1).toString().replace(\"[\",\"\").replace(\"]\",\"\").replace(\",\",\"\").replace(\" \",\"\").length();\n                s_len = s.length();\n                String tmp_s = s.substring(ss, s_len);\n                find_huiwen_str(tmp_s, tl, llist);\n            }\n        }\n        \n        return llist;\n    }\n    \n    public List<List<String>> xunhuan_huiwen_str_list(String s, List<List<String>> list) {\n        List<String> f_list = new ArrayList<String>();\n        list = find_huiwen_str(s, f_list, list);\n        return list;\n    }\n    \n    public List<List<String>> partition(String s) {\n        List<List<String>> first_list = new ArrayList<List<String>>();\n        return xunhuan_huiwen_str_list(s, first_list);\n    }\n}\n```\n\n## 网上的代码\n\n```java\n```","source":"_posts/Leetcode面试题-03.md","raw":"---\ntitle: Leetcode面试题-03\ndate: 2019-03-24 20:34:00\ntags: \n- 字符串\ncategories: \n- 算法\n- Leetcode\n---\n\nLeetcode 算法 - 字符串\n<!-- more -->\n\n# 问题\n\n给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。\n\n说明：本题中，我们将空字符串定义为有效的回文串。\n\n示例 1:\n\n输入: \"A man, a plan, a canal: Panama\"\n输出: true\n示例 2:\n\n输入: \"race a car\"\n输出: false\n\n回文串的解释：\n\n正过来和反过来的字符串一致，不算特殊符号\n\n## 思路\n\n1.使用双指针，一个指向前一个指向后\n2.同时往前和后，比较，如果遇到非字母和数字的就向下移，然后比较指针的值\n\n## 自己的代码\n\n```java\n    public boolean isPalindrome(String cs) {\n        boolean flag = true;\n        char[] cs_c = cs.toLowerCase().toCharArray();\n        int right = 0;\n        int left = cs_c.length - 1;\n        while(right < cs_c.length && left >=0) {\n            char tmp = cs_c[right];\n            char tmp2 = cs_c[left];\n\n            while(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp)) && right < cs_c.length - 1){\n                right++;\n                tmp = cs_c[right];\n            }\n            while(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp2)) && left > 0){\n                left--;\n                tmp2 = cs_c[left];\n            }\n            if(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp2))){\n                tmp2 = ' ';\n            }\n            if(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp))){\n                tmp = ' ';\n            }\n            if(!String.valueOf(tmp).equals(String.valueOf(tmp2))){\n                flag = false;\n                break;\n            }\n            right++;\n            left--;\n        }\n        return flag;\n    }\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n<!-- 面试题 -->\n\n# 问题\n\n给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。\n\n返回 s 所有可能的分割方案。\n\n示例:\n\n输入: \"aab\"\n输出:\n[\n  [\"aa\",\"b\"],\n  [\"a\",\"a\",\"b\"]\n]\n\n\n## 思路\n\n1.主思想是递归。 返回值是[['m','m','a','n'],['mm','a','n']]\n2.返回list<list<String>>,最后返回的时候，然后主要是add list,完成的list添加进list<list<String>>\n3.变量是字符串，当字符串长度为1，或者0的是否返回list<list<String>>\n\n## 自己的代码\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nclass Solution {\n    public boolean isPalindrome(String cs) {\n        boolean flag = true;\n        char[] cs_c = cs.toLowerCase().toCharArray();\n        int right = 0;\n        int left = cs_c.length - 1;\n        while(right < cs_c.length && left >=0) {\n            char tmp = cs_c[right];\n            char tmp2 = cs_c[left];\n\n            while(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp)) && right < cs_c.length - 1){\n                right++;\n                tmp = cs_c[right];\n            }\n            while(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp2)) && left > 0){\n                left--;\n                tmp2 = cs_c[left];\n            }\n            if(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp2))){\n                tmp2 = ' ';\n            }\n            if(!Pattern.matches(\"[a-z0-9]\", String.valueOf(tmp))){\n                tmp = ' ';\n            }\n            if(!String.valueOf(tmp).equals(String.valueOf(tmp2))){\n                flag = false;\n                break;\n            }\n            right++;\n            left--;\n        }\n        return flag;\n    }\n    \n    public List<List<String>> find_huiwen_str(String s,List<String> list, List<List<String>> llist){\n        int s_len ;\n        if(s.length() == 0){\n            llist.add(list);\n            return llist;\n        }\n        if(s.length() == 1){\n            list.add(s);\n            llist.add(list);\n            return llist;\n        }\n        ArrayList tmp_list = (ArrayList) list;\n        List<String> tl = (List<String>)tmp_list.clone();;\n\n        for (int i = 1; i <= s.length() ; i++) {\n            String tmp = s.substring(0,i);\n            if(isPalindrome(tmp)){\n                tl = (List<String>)tmp_list.clone();\n                tl.add(tmp);\n                int ss = tl.get(tl.size() - 1).toString().replace(\"[\",\"\").replace(\"]\",\"\").replace(\",\",\"\").replace(\" \",\"\").length();\n                s_len = s.length();\n                String tmp_s = s.substring(ss, s_len);\n                find_huiwen_str(tmp_s, tl, llist);\n            }\n        }\n        \n        return llist;\n    }\n    \n    public List<List<String>> xunhuan_huiwen_str_list(String s, List<List<String>> list) {\n        List<String> f_list = new ArrayList<String>();\n        list = find_huiwen_str(s, f_list, list);\n        return list;\n    }\n    \n    public List<List<String>> partition(String s) {\n        List<List<String>> first_list = new ArrayList<List<String>>();\n        return xunhuan_huiwen_str_list(s, first_list);\n    }\n}\n```\n\n## 网上的代码\n\n```java\n```","slug":"Leetcode面试题-03","published":1,"updated":"2019-03-24T13:43:31.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzuref7000ia0ts0am2dkki","content":"<p>Leetcode 算法 - 字符串<br><a id=\"more\"></a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>\n<p>说明：本题中，我们将空字符串定义为有效的回文串。</p>\n<p>示例 1:</p>\n<p>输入: “A man, a plan, a canal: Panama”<br>输出: true<br>示例 2:</p>\n<p>输入: “race a car”<br>输出: false</p>\n<p>回文串的解释：</p>\n<p>正过来和反过来的字符串一致，不算特殊符号</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.使用双指针，一个指向前一个指向后<br>2.同时往前和后，比较，如果遇到非字母和数字的就向下移，然后比较指针的值</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(String cs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] cs_c = cs.toLowerCase().toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = cs_c.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(right &lt; cs_c.length &amp;&amp; left &gt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> tmp = cs_c[right];</span><br><span class=\"line\">        <span class=\"keyword\">char</span> tmp2 = cs_c[left];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp)) &amp;&amp; right &lt; cs_c.length - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">            tmp = cs_c[right];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp2)) &amp;&amp; left &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            left--;</span><br><span class=\"line\">            tmp2 = cs_c[left];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp2)))&#123;</span><br><span class=\"line\">            tmp2 = <span class=\"string\">' '</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp)))&#123;</span><br><span class=\"line\">            tmp = <span class=\"string\">' '</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!String.valueOf(tmp).equals(String.valueOf(tmp2)))&#123;</span><br><span class=\"line\">            flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        right++;</span><br><span class=\"line\">        left--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码\"><a href=\"#网上的代码\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 面试题 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 问题</span><br><span class=\"line\"></span><br><span class=\"line\">给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</span><br><span class=\"line\"></span><br><span class=\"line\">返回 s 所有可能的分割方案。</span><br><span class=\"line\"></span><br><span class=\"line\">示例:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: <span class=\"string\">\"aab\"</span></span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"string\">\"aa\"</span>,<span class=\"string\">\"b\"</span>],</span><br><span class=\"line\">  [<span class=\"string\">\"a\"</span>,<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 思路</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.主思想是递归。 返回值是[[<span class=\"string\">'m'</span>,<span class=\"string\">'m'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'n'</span>],[<span class=\"string\">'mm'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'n'</span>]]</span><br><span class=\"line\"><span class=\"number\">2</span>.返回list&lt;list&lt;String&gt;&gt;,最后返回的时候，然后主要是add list,完成的list添加进list&lt;list&lt;String&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">3</span>.变量是字符串，当字符串长度为<span class=\"number\">1</span>，或者<span class=\"number\">0</span>的是否返回list&lt;list&lt;String&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">## 自己的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(String cs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] cs_c = cs.toLowerCase().toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = cs_c.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(right &lt; cs_c.length &amp;&amp; left &gt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> tmp = cs_c[right];</span><br><span class=\"line\">            <span class=\"keyword\">char</span> tmp2 = cs_c[left];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp)) &amp;&amp; right &lt; cs_c.length - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">                tmp = cs_c[right];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp2)) &amp;&amp; left &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                left--;</span><br><span class=\"line\">                tmp2 = cs_c[left];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp2)))&#123;</span><br><span class=\"line\">                tmp2 = <span class=\"string\">' '</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp)))&#123;</span><br><span class=\"line\">                tmp = <span class=\"string\">' '</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!String.valueOf(tmp).equals(String.valueOf(tmp2)))&#123;</span><br><span class=\"line\">                flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">            left--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; find_huiwen_str(String s,List&lt;String&gt; list, List&lt;List&lt;String&gt;&gt; llist)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s_len ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            llist.add(list);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> llist;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length() == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            list.add(s);</span><br><span class=\"line\">            llist.add(list);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> llist;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArrayList tmp_list = (ArrayList) list;</span><br><span class=\"line\">        List&lt;String&gt; tl = (List&lt;String&gt;)tmp_list.clone();;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= s.length() ; i++) &#123;</span><br><span class=\"line\">            String tmp = s.substring(<span class=\"number\">0</span>,i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isPalindrome(tmp))&#123;</span><br><span class=\"line\">                tl = (List&lt;String&gt;)tmp_list.clone();</span><br><span class=\"line\">                tl.add(tmp);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> ss = tl.get(tl.size() - <span class=\"number\">1</span>).toString().replace(<span class=\"string\">\"[\"</span>,<span class=\"string\">\"\"</span>).replace(<span class=\"string\">\"]\"</span>,<span class=\"string\">\"\"</span>).replace(<span class=\"string\">\",\"</span>,<span class=\"string\">\"\"</span>).replace(<span class=\"string\">\" \"</span>,<span class=\"string\">\"\"</span>).length();</span><br><span class=\"line\">                s_len = s.length();</span><br><span class=\"line\">                String tmp_s = s.substring(ss, s_len);</span><br><span class=\"line\">                find_huiwen_str(tmp_s, tl, llist);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> llist;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; xunhuan_huiwen_str_list(String s, List&lt;List&lt;String&gt;&gt; list) &#123;</span><br><span class=\"line\">        List&lt;String&gt; f_list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        list = find_huiwen_str(s, f_list, list);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class=\"line\">        List&lt;List&lt;String&gt;&gt; first_list = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xunhuan_huiwen_str_list(s, first_list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-1\"><a href=\"#网上的代码-1\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><pre><code class=\"java\">\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>Leetcode 算法 - 字符串<br>","more":"</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>\n<p>说明：本题中，我们将空字符串定义为有效的回文串。</p>\n<p>示例 1:</p>\n<p>输入: “A man, a plan, a canal: Panama”<br>输出: true<br>示例 2:</p>\n<p>输入: “race a car”<br>输出: false</p>\n<p>回文串的解释：</p>\n<p>正过来和反过来的字符串一致，不算特殊符号</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.使用双指针，一个指向前一个指向后<br>2.同时往前和后，比较，如果遇到非字母和数字的就向下移，然后比较指针的值</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(String cs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] cs_c = cs.toLowerCase().toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = cs_c.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(right &lt; cs_c.length &amp;&amp; left &gt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> tmp = cs_c[right];</span><br><span class=\"line\">        <span class=\"keyword\">char</span> tmp2 = cs_c[left];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp)) &amp;&amp; right &lt; cs_c.length - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">            tmp = cs_c[right];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp2)) &amp;&amp; left &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            left--;</span><br><span class=\"line\">            tmp2 = cs_c[left];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp2)))&#123;</span><br><span class=\"line\">            tmp2 = <span class=\"string\">' '</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp)))&#123;</span><br><span class=\"line\">            tmp = <span class=\"string\">' '</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!String.valueOf(tmp).equals(String.valueOf(tmp2)))&#123;</span><br><span class=\"line\">            flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        right++;</span><br><span class=\"line\">        left--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码\"><a href=\"#网上的代码\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 面试题 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 问题</span><br><span class=\"line\"></span><br><span class=\"line\">给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</span><br><span class=\"line\"></span><br><span class=\"line\">返回 s 所有可能的分割方案。</span><br><span class=\"line\"></span><br><span class=\"line\">示例:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: <span class=\"string\">\"aab\"</span></span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"string\">\"aa\"</span>,<span class=\"string\">\"b\"</span>],</span><br><span class=\"line\">  [<span class=\"string\">\"a\"</span>,<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 思路</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.主思想是递归。 返回值是[[<span class=\"string\">'m'</span>,<span class=\"string\">'m'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'n'</span>],[<span class=\"string\">'mm'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'n'</span>]]</span><br><span class=\"line\"><span class=\"number\">2</span>.返回list&lt;list&lt;String&gt;&gt;,最后返回的时候，然后主要是add list,完成的list添加进list&lt;list&lt;String&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">3</span>.变量是字符串，当字符串长度为<span class=\"number\">1</span>，或者<span class=\"number\">0</span>的是否返回list&lt;list&lt;String&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">## 自己的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(String cs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] cs_c = cs.toLowerCase().toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = cs_c.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(right &lt; cs_c.length &amp;&amp; left &gt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> tmp = cs_c[right];</span><br><span class=\"line\">            <span class=\"keyword\">char</span> tmp2 = cs_c[left];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp)) &amp;&amp; right &lt; cs_c.length - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">                tmp = cs_c[right];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp2)) &amp;&amp; left &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                left--;</span><br><span class=\"line\">                tmp2 = cs_c[left];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp2)))&#123;</span><br><span class=\"line\">                tmp2 = <span class=\"string\">' '</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Pattern.matches(<span class=\"string\">\"[a-z0-9]\"</span>, String.valueOf(tmp)))&#123;</span><br><span class=\"line\">                tmp = <span class=\"string\">' '</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!String.valueOf(tmp).equals(String.valueOf(tmp2)))&#123;</span><br><span class=\"line\">                flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">            left--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; find_huiwen_str(String s,List&lt;String&gt; list, List&lt;List&lt;String&gt;&gt; llist)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s_len ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            llist.add(list);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> llist;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length() == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            list.add(s);</span><br><span class=\"line\">            llist.add(list);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> llist;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArrayList tmp_list = (ArrayList) list;</span><br><span class=\"line\">        List&lt;String&gt; tl = (List&lt;String&gt;)tmp_list.clone();;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= s.length() ; i++) &#123;</span><br><span class=\"line\">            String tmp = s.substring(<span class=\"number\">0</span>,i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isPalindrome(tmp))&#123;</span><br><span class=\"line\">                tl = (List&lt;String&gt;)tmp_list.clone();</span><br><span class=\"line\">                tl.add(tmp);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> ss = tl.get(tl.size() - <span class=\"number\">1</span>).toString().replace(<span class=\"string\">\"[\"</span>,<span class=\"string\">\"\"</span>).replace(<span class=\"string\">\"]\"</span>,<span class=\"string\">\"\"</span>).replace(<span class=\"string\">\",\"</span>,<span class=\"string\">\"\"</span>).replace(<span class=\"string\">\" \"</span>,<span class=\"string\">\"\"</span>).length();</span><br><span class=\"line\">                s_len = s.length();</span><br><span class=\"line\">                String tmp_s = s.substring(ss, s_len);</span><br><span class=\"line\">                find_huiwen_str(tmp_s, tl, llist);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> llist;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; xunhuan_huiwen_str_list(String s, List&lt;List&lt;String&gt;&gt; list) &#123;</span><br><span class=\"line\">        List&lt;String&gt; f_list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        list = find_huiwen_str(s, f_list, list);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class=\"line\">        List&lt;List&lt;String&gt;&gt; first_list = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xunhuan_huiwen_str_list(s, first_list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-1\"><a href=\"#网上的代码-1\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><pre><code class=\"java\">\n</code></pre>"},{"title":"堆栈算法面试题","date":"2019-03-11T15:06:45.000Z","_content":"堆栈面试题：\n堆是先进后出的。栈是先进先出的。\n<!-- more -->\n# 问题 \n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n## 思路\n\n1.遍历字符串,碰到左括号，push到堆。 碰到右括号，Pop堆得最上层。\n2.判断pop出来的右括号是不是和碰到的一样\n\n\n## 自己的代码\n\n\n```java\nimport java.util.HashMap;\nimport java.util.Stack;\n\n/**\n * Created by v_yuyifei on 19/3/11.\n */\npublic class check_kuohao {\n    public static boolean check(String a){\n        boolean flag = true;\n        HashMap map = new HashMap<>();\n        map.put('{','}');\n        map.put('[',']');\n        map.put('(',')');\n        Stack stack = new Stack();\n        char[] as = a.toCharArray();\n        for (int i = 0; i < as.length; i++) {\n            if('[' == as[i] || '{' == as[i] || '(' == as[i]){\n                stack.push(as[i]);\n            }\n            if(']' == as[i] || '}' == as[i] || ')' == as[i]){\n                if(stack.size() == 0){\n                    flag = false;\n                    break;\n                }\n                char tmp = (char) stack.pop();\n                if((char)map.get(tmp) != as[i]){\n                    flag = false;\n                    break;\n                }\n\n            }\n        }\n        return flag;\n\n    }\n\n    public static void main(String[] args) {\n        String a = \"[{()]\";\n        System.out.println(check(a));\n\n    }\n}\n```\n\n\n## 网上好的代码\n\n```java\nclass Solution {\n    public boolean isValid(String s) {\n        Stack<Character> stack = new Stack<>();\n        char[] chars = s.toCharArray();\n        for (char aChar : chars) {\n            if (stack.size() == 0) {\n                stack.push(aChar);\n            } else if (isSym(stack.peek(), aChar)) {\n                stack.pop();\n            } else {\n                stack.push(aChar);\n            }\n        }\n        return stack.size() == 0;\n    }\n\n    private boolean isSym(char c1, char c2) {\n        return (c1 == '(' && c2 == ')') || (c1 == '[' && c2 == ']') || (c1 == '{' && c2 == '}');\n    }\n}\n```\n\n\n# 问题\n用两个栈来实现一个队列，完成队列的 Push 和 Pop 操作\n\n## 思路\n1.一个堆插入数字，然后pop到第二个堆\n2.这样第二个堆pop出来的数字就是第一个插入的\n\n## 自己的代码\n\n```java\nimport java.util.Stack;\n\n/**\n * Created by v_yuyifei on 19/3/11.\n */\npublic class two_stack_queue {\n    static  Stack stack1 = new Stack();\n    static Stack stack2 = new Stack();\n    public static void queue_push(String a ){\n        stack1.push(a);\n    }\n    public static Object queue_pop(String a ){\n        if(stack2.size() == 0 && stack1.size() != 0){\n            while(stack1.size() != 0){\n                Object tmp = stack1.pop();\n                stack2.push(tmp);\n            }\n\n        }else if(stack2.size() == 0 && stack1.size() == 0){\n            return NullPointerException.class;\n        }\n        return stack2.pop();\n    }\n    public static void main(String[] args) {\n\n    }\n}\n```\n\n## 网上的代码\n\n```java\nStack<Integer> in = new Stack<Integer>();\nStack<Integer> out = new Stack<Integer>();\n\npublic void push(int node) {\n    in.push(node);\n}\n\npublic int pop() throws Exception {\n    if (out.isEmpty())\n        while (!in.isEmpty())\n            out.push(in.pop());\n\n    if (out.isEmpty())\n        throw new Exception(\"queue is empty\");\n\n    return out.pop();\n}\n```\n\n\n\n\n\n\n# 问题\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。\n假设压入栈的所有数字均不相等。例如序列输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。\n假设压入栈的所有数字均不相等。例如序列 1，2，3，4，5 是某栈的压入顺序，序列 4，5，3，2，1是该压栈序列对应的一个弹出序列，\n但4，3，5，1，2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）\n\n## 思路\n1.用一个辅助堆，一直插入第一个数组的元素，直到等于第二个数组的第一个值\n2.然后判断二个数组的第二位，是否等于这个辅助堆得第一个数值，如果等于则pop，否则接着push\n3.最后判断辅助堆得大小即可，等于0则true,否则false.\n\n## 自己的代码\n\n```java\nimport java.util.Stack;\n\n/**\n * Created by v_yuyifei on 19/3/11.\n */\npublic class stack_push_pop_shunxu {\n    public static boolean isRightSX(int[] org, int[] hou){\n        Stack stack = new Stack();\n        int a = 0;\n        for (int i = 0; i < org.length; i++) {\n            stack.push(org[i]);\n\n            while(stack.size() != 0 & a < hou.length){\n                int tmp = (int)stack.peek();\n                if(tmp == hou[a]){\n                    a ++;\n                    stack.pop();\n                }else{\n                    break;\n                }\n\n            }\n\n        }\n        return stack.size() ==0 ? true:false;\n    }\n    public static void main(String[] args) {\n        System.out.println(isRightSX(new int[]{1,2,3,4,5}, new int[]{4,5,3,2,1}));\n\n    }\n}\n```\n\n## 网上的代码\n\n```java\npublic boolean IsPopOrder(int[] pushSequence, int[] popSequence) {\n    int n = pushSequence.length;\n    Stack<Integer> stack = new Stack<>();\n    for (int pushIndex = 0, popIndex = 0; pushIndex < n; pushIndex++) {\n        stack.push(pushSequence[pushIndex]);\n        while (popIndex < n && !stack.isEmpty() \n                && stack.peek() == popSequence[popIndex]) {\n            stack.pop();\n            popIndex++;\n        }\n    }\n    return stack.isEmpty();\n}\n```\n\n\n\n\n# 问题\n\n定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的 min 函数\n\n## 思路\n1.用2个辅助堆，第一个放数组的元素，第二个放每次比较后较小的元素（第一个堆一定大于等于第二个堆）\n2.第一个堆是每次都放入元素，第二个堆是每次那放入第一个堆得元素比较第二个堆自己最上面的元素，如果不一样，就push\n3.最后使2个堆得大小一致，然后pop第二个堆，得到的第一个元素就是最小值。\n\n## 自己的代码\n\n```java\nimport java.util.Stack;\n\n/**\n * Created by v_yuyifei on 19/3/11.\n */\npublic class minNums {\n\n    public static int min(int[] nums){\n        int min_num= -1;\n        Stack stack1 = new Stack();\n        Stack stack2 = new Stack();\n        stack1.push(nums[0]);\n        stack2.push(nums[0]);\n        for (int i = 1; i < nums.length ; i++) {\n            int last_val = (int)stack2.peek() ;\n            int tmp = Math.min(last_val, nums[i]);\n            stack1.push(nums[i]);\n            if(tmp != (int)stack2.peek() ){\n                stack2.push(nums[i]);\n            }\n        }\n        while(stack1.size() != stack2.size()){\n            stack1.pop();\n        }\n        return (int)stack2.pop();\n    }\n\n\n    public static void main(String[] args) {\n        System.out.println(min(new int[]{3,4,2,1,10,12}));\n    }\n}\n```\n\n## 网上的代码\n\n```java\nprivate Stack<Integer> dataStack = new Stack<>();\nprivate Stack<Integer> minStack = new Stack<>();\n\npublic void push(int node) {\n    dataStack.push(node);\n    minStack.push(minStack.isEmpty() ? node : Math.min(minStack.peek(), node));\n}\n\npublic void pop() {\n    dataStack.pop();\n    minStack.pop();\n}\n\npublic int top() {\n    return dataStack.peek();\n}\n\npublic int min() {\n    return minStack.peek();\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/堆栈算法面试题.md","raw":"---\ntitle: 堆栈算法面试题\ndate: 2019-03-11 23:06:45\ntags: 堆栈\ncategories: \n- 算法\n- 面试题\n---\n堆栈面试题：\n堆是先进后出的。栈是先进先出的。\n<!-- more -->\n# 问题 \n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n## 思路\n\n1.遍历字符串,碰到左括号，push到堆。 碰到右括号，Pop堆得最上层。\n2.判断pop出来的右括号是不是和碰到的一样\n\n\n## 自己的代码\n\n\n```java\nimport java.util.HashMap;\nimport java.util.Stack;\n\n/**\n * Created by v_yuyifei on 19/3/11.\n */\npublic class check_kuohao {\n    public static boolean check(String a){\n        boolean flag = true;\n        HashMap map = new HashMap<>();\n        map.put('{','}');\n        map.put('[',']');\n        map.put('(',')');\n        Stack stack = new Stack();\n        char[] as = a.toCharArray();\n        for (int i = 0; i < as.length; i++) {\n            if('[' == as[i] || '{' == as[i] || '(' == as[i]){\n                stack.push(as[i]);\n            }\n            if(']' == as[i] || '}' == as[i] || ')' == as[i]){\n                if(stack.size() == 0){\n                    flag = false;\n                    break;\n                }\n                char tmp = (char) stack.pop();\n                if((char)map.get(tmp) != as[i]){\n                    flag = false;\n                    break;\n                }\n\n            }\n        }\n        return flag;\n\n    }\n\n    public static void main(String[] args) {\n        String a = \"[{()]\";\n        System.out.println(check(a));\n\n    }\n}\n```\n\n\n## 网上好的代码\n\n```java\nclass Solution {\n    public boolean isValid(String s) {\n        Stack<Character> stack = new Stack<>();\n        char[] chars = s.toCharArray();\n        for (char aChar : chars) {\n            if (stack.size() == 0) {\n                stack.push(aChar);\n            } else if (isSym(stack.peek(), aChar)) {\n                stack.pop();\n            } else {\n                stack.push(aChar);\n            }\n        }\n        return stack.size() == 0;\n    }\n\n    private boolean isSym(char c1, char c2) {\n        return (c1 == '(' && c2 == ')') || (c1 == '[' && c2 == ']') || (c1 == '{' && c2 == '}');\n    }\n}\n```\n\n\n# 问题\n用两个栈来实现一个队列，完成队列的 Push 和 Pop 操作\n\n## 思路\n1.一个堆插入数字，然后pop到第二个堆\n2.这样第二个堆pop出来的数字就是第一个插入的\n\n## 自己的代码\n\n```java\nimport java.util.Stack;\n\n/**\n * Created by v_yuyifei on 19/3/11.\n */\npublic class two_stack_queue {\n    static  Stack stack1 = new Stack();\n    static Stack stack2 = new Stack();\n    public static void queue_push(String a ){\n        stack1.push(a);\n    }\n    public static Object queue_pop(String a ){\n        if(stack2.size() == 0 && stack1.size() != 0){\n            while(stack1.size() != 0){\n                Object tmp = stack1.pop();\n                stack2.push(tmp);\n            }\n\n        }else if(stack2.size() == 0 && stack1.size() == 0){\n            return NullPointerException.class;\n        }\n        return stack2.pop();\n    }\n    public static void main(String[] args) {\n\n    }\n}\n```\n\n## 网上的代码\n\n```java\nStack<Integer> in = new Stack<Integer>();\nStack<Integer> out = new Stack<Integer>();\n\npublic void push(int node) {\n    in.push(node);\n}\n\npublic int pop() throws Exception {\n    if (out.isEmpty())\n        while (!in.isEmpty())\n            out.push(in.pop());\n\n    if (out.isEmpty())\n        throw new Exception(\"queue is empty\");\n\n    return out.pop();\n}\n```\n\n\n\n\n\n\n# 问题\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。\n假设压入栈的所有数字均不相等。例如序列输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。\n假设压入栈的所有数字均不相等。例如序列 1，2，3，4，5 是某栈的压入顺序，序列 4，5，3，2，1是该压栈序列对应的一个弹出序列，\n但4，3，5，1，2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）\n\n## 思路\n1.用一个辅助堆，一直插入第一个数组的元素，直到等于第二个数组的第一个值\n2.然后判断二个数组的第二位，是否等于这个辅助堆得第一个数值，如果等于则pop，否则接着push\n3.最后判断辅助堆得大小即可，等于0则true,否则false.\n\n## 自己的代码\n\n```java\nimport java.util.Stack;\n\n/**\n * Created by v_yuyifei on 19/3/11.\n */\npublic class stack_push_pop_shunxu {\n    public static boolean isRightSX(int[] org, int[] hou){\n        Stack stack = new Stack();\n        int a = 0;\n        for (int i = 0; i < org.length; i++) {\n            stack.push(org[i]);\n\n            while(stack.size() != 0 & a < hou.length){\n                int tmp = (int)stack.peek();\n                if(tmp == hou[a]){\n                    a ++;\n                    stack.pop();\n                }else{\n                    break;\n                }\n\n            }\n\n        }\n        return stack.size() ==0 ? true:false;\n    }\n    public static void main(String[] args) {\n        System.out.println(isRightSX(new int[]{1,2,3,4,5}, new int[]{4,5,3,2,1}));\n\n    }\n}\n```\n\n## 网上的代码\n\n```java\npublic boolean IsPopOrder(int[] pushSequence, int[] popSequence) {\n    int n = pushSequence.length;\n    Stack<Integer> stack = new Stack<>();\n    for (int pushIndex = 0, popIndex = 0; pushIndex < n; pushIndex++) {\n        stack.push(pushSequence[pushIndex]);\n        while (popIndex < n && !stack.isEmpty() \n                && stack.peek() == popSequence[popIndex]) {\n            stack.pop();\n            popIndex++;\n        }\n    }\n    return stack.isEmpty();\n}\n```\n\n\n\n\n# 问题\n\n定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的 min 函数\n\n## 思路\n1.用2个辅助堆，第一个放数组的元素，第二个放每次比较后较小的元素（第一个堆一定大于等于第二个堆）\n2.第一个堆是每次都放入元素，第二个堆是每次那放入第一个堆得元素比较第二个堆自己最上面的元素，如果不一样，就push\n3.最后使2个堆得大小一致，然后pop第二个堆，得到的第一个元素就是最小值。\n\n## 自己的代码\n\n```java\nimport java.util.Stack;\n\n/**\n * Created by v_yuyifei on 19/3/11.\n */\npublic class minNums {\n\n    public static int min(int[] nums){\n        int min_num= -1;\n        Stack stack1 = new Stack();\n        Stack stack2 = new Stack();\n        stack1.push(nums[0]);\n        stack2.push(nums[0]);\n        for (int i = 1; i < nums.length ; i++) {\n            int last_val = (int)stack2.peek() ;\n            int tmp = Math.min(last_val, nums[i]);\n            stack1.push(nums[i]);\n            if(tmp != (int)stack2.peek() ){\n                stack2.push(nums[i]);\n            }\n        }\n        while(stack1.size() != stack2.size()){\n            stack1.pop();\n        }\n        return (int)stack2.pop();\n    }\n\n\n    public static void main(String[] args) {\n        System.out.println(min(new int[]{3,4,2,1,10,12}));\n    }\n}\n```\n\n## 网上的代码\n\n```java\nprivate Stack<Integer> dataStack = new Stack<>();\nprivate Stack<Integer> minStack = new Stack<>();\n\npublic void push(int node) {\n    dataStack.push(node);\n    minStack.push(minStack.isEmpty() ? node : Math.min(minStack.peek(), node));\n}\n\npublic void pop() {\n    dataStack.pop();\n    minStack.pop();\n}\n\npublic int top() {\n    return dataStack.peek();\n}\n\npublic int min() {\n    return minStack.peek();\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"堆栈算法面试题","published":1,"updated":"2019-03-11T15:33:53.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzurefa000ka0tsf8rdpwo5","content":"<p>堆栈面试题：<br>堆是先进后出的。栈是先进先出的。<br><a id=\"more\"></a></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.遍历字符串,碰到左括号，push到堆。 碰到右括号，Pop堆得最上层。<br>2.判断pop出来的右括号是不是和碰到的一样</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">check_kuohao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">(String a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        HashMap map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">'&#123;'</span>,<span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'['</span>,<span class=\"string\">']'</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'('</span>,<span class=\"string\">')'</span>);</span><br><span class=\"line\">        Stack stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] as = a.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; as.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">'['</span> == as[i] || <span class=\"string\">'&#123;'</span> == as[i] || <span class=\"string\">'('</span> == as[i])&#123;</span><br><span class=\"line\">                stack.push(as[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">']'</span> == as[i] || <span class=\"string\">'&#125;'</span> == as[i] || <span class=\"string\">')'</span> == as[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(stack.size() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> tmp = (<span class=\"keyword\">char</span>) stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((<span class=\"keyword\">char</span>)map.get(tmp) != as[i])&#123;</span><br><span class=\"line\">                    flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String a = <span class=\"string\">\"[&#123;()]\"</span>;</span><br><span class=\"line\">        System.out.println(check(a));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上好的代码\"><a href=\"#网上好的代码\" class=\"headerlink\" title=\"网上好的代码\"></a>网上好的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        Stack&lt;Character&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] chars = s.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> aChar : chars) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stack.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                stack.push(aChar);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSym(stack.peek(), aChar)) &#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                stack.push(aChar);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSym</span><span class=\"params\">(<span class=\"keyword\">char</span> c1, <span class=\"keyword\">char</span> c2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (c1 == <span class=\"string\">'('</span> &amp;&amp; c2 == <span class=\"string\">')'</span>) || (c1 == <span class=\"string\">'['</span> &amp;&amp; c2 == <span class=\"string\">']'</span>) || (c1 == <span class=\"string\">'&#123;'</span> &amp;&amp; c2 == <span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>用两个栈来实现一个队列，完成队列的 Push 和 Pop 操作</p>\n<h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.一个堆插入数字，然后pop到第二个堆<br>2.这样第二个堆pop出来的数字就是第一个插入的</p>\n<h2 id=\"自己的代码-1\"><a href=\"#自己的代码-1\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">two_stack_queue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>  Stack stack1 = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Stack stack2 = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">queue_push</span><span class=\"params\">(String a )</span></span>&#123;</span><br><span class=\"line\">        stack1.push(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">queue_pop</span><span class=\"params\">(String a )</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stack2.size() == <span class=\"number\">0</span> &amp;&amp; stack1.size() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(stack1.size() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                Object tmp = stack1.pop();</span><br><span class=\"line\">                stack2.push(tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stack2.size() == <span class=\"number\">0</span> &amp;&amp; stack1.size() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> NullPointerException.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack2.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码\"><a href=\"#网上的代码\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack&lt;Integer&gt; in = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">Stack&lt;Integer&gt; out = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span> </span>&#123;</span><br><span class=\"line\">    in.push(node);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!in.isEmpty())</span><br><span class=\"line\">            out.push(in.pop());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"queue is empty\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> out.pop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。<br>假设压入栈的所有数字均不相等。例如序列输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。<br>假设压入栈的所有数字均不相等。例如序列 1，2，3，4，5 是某栈的压入顺序，序列 4，5，3，2，1是该压栈序列对应的一个弹出序列，<br>但4，3，5，1，2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p>\n<h2 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.用一个辅助堆，一直插入第一个数组的元素，直到等于第二个数组的第一个值<br>2.然后判断二个数组的第二位，是否等于这个辅助堆得第一个数值，如果等于则pop，否则接着push<br>3.最后判断辅助堆得大小即可，等于0则true,否则false.</p>\n<h2 id=\"自己的代码-2\"><a href=\"#自己的代码-2\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">stack_push_pop_shunxu</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRightSX</span><span class=\"params\">(<span class=\"keyword\">int</span>[] org, <span class=\"keyword\">int</span>[] hou)</span></span>&#123;</span><br><span class=\"line\">        Stack stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; org.length; i++) &#123;</span><br><span class=\"line\">            stack.push(org[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(stack.size() != <span class=\"number\">0</span> &amp; a &lt; hou.length)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = (<span class=\"keyword\">int</span>)stack.peek();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp == hou[a])&#123;</span><br><span class=\"line\">                    a ++;</span><br><span class=\"line\">                    stack.pop();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.size() ==<span class=\"number\">0</span> ? <span class=\"keyword\">true</span>:<span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(isRightSX(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-1\"><a href=\"#网上的代码-1\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">IsPopOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>[] pushSequence, <span class=\"keyword\">int</span>[] popSequence)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = pushSequence.length;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pushIndex = <span class=\"number\">0</span>, popIndex = <span class=\"number\">0</span>; pushIndex &lt; n; pushIndex++) &#123;</span><br><span class=\"line\">        stack.push(pushSequence[pushIndex]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (popIndex &lt; n &amp;&amp; !stack.isEmpty() </span><br><span class=\"line\">                &amp;&amp; stack.peek() == popSequence[popIndex]) &#123;</span><br><span class=\"line\">            stack.pop();</span><br><span class=\"line\">            popIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的 min 函数</p>\n<h2 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.用2个辅助堆，第一个放数组的元素，第二个放每次比较后较小的元素（第一个堆一定大于等于第二个堆）<br>2.第一个堆是每次都放入元素，第二个堆是每次那放入第一个堆得元素比较第二个堆自己最上面的元素，如果不一样，就push<br>3.最后使2个堆得大小一致，然后pop第二个堆，得到的第一个元素就是最小值。</p>\n<h2 id=\"自己的代码-3\"><a href=\"#自己的代码-3\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">minNums</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min_num= -<span class=\"number\">1</span>;</span><br><span class=\"line\">        Stack stack1 = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">        Stack stack2 = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">        stack1.push(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        stack2.push(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length ; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> last_val = (<span class=\"keyword\">int</span>)stack2.peek() ;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = Math.min(last_val, nums[i]);</span><br><span class=\"line\">            stack1.push(nums[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp != (<span class=\"keyword\">int</span>)stack2.peek() )&#123;</span><br><span class=\"line\">                stack2.push(nums[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(stack1.size() != stack2.size())&#123;</span><br><span class=\"line\">            stack1.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)stack2.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(min(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">12</span>&#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-2\"><a href=\"#网上的代码-2\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Stack&lt;Integer&gt; dataStack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">private</span> Stack&lt;Integer&gt; minStack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span> </span>&#123;</span><br><span class=\"line\">    dataStack.push(node);</span><br><span class=\"line\">    minStack.push(minStack.isEmpty() ? node : Math.min(minStack.peek(), node));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    dataStack.pop();</span><br><span class=\"line\">    minStack.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataStack.peek();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minStack.peek();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>堆栈面试题：<br>堆是先进后出的。栈是先进先出的。<br>","more":"</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.遍历字符串,碰到左括号，push到堆。 碰到右括号，Pop堆得最上层。<br>2.判断pop出来的右括号是不是和碰到的一样</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">check_kuohao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">(String a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        HashMap map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">'&#123;'</span>,<span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'['</span>,<span class=\"string\">']'</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'('</span>,<span class=\"string\">')'</span>);</span><br><span class=\"line\">        Stack stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] as = a.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; as.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">'['</span> == as[i] || <span class=\"string\">'&#123;'</span> == as[i] || <span class=\"string\">'('</span> == as[i])&#123;</span><br><span class=\"line\">                stack.push(as[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">']'</span> == as[i] || <span class=\"string\">'&#125;'</span> == as[i] || <span class=\"string\">')'</span> == as[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(stack.size() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> tmp = (<span class=\"keyword\">char</span>) stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((<span class=\"keyword\">char</span>)map.get(tmp) != as[i])&#123;</span><br><span class=\"line\">                    flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String a = <span class=\"string\">\"[&#123;()]\"</span>;</span><br><span class=\"line\">        System.out.println(check(a));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上好的代码\"><a href=\"#网上好的代码\" class=\"headerlink\" title=\"网上好的代码\"></a>网上好的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        Stack&lt;Character&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] chars = s.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> aChar : chars) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stack.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                stack.push(aChar);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSym(stack.peek(), aChar)) &#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                stack.push(aChar);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.size() == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSym</span><span class=\"params\">(<span class=\"keyword\">char</span> c1, <span class=\"keyword\">char</span> c2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (c1 == <span class=\"string\">'('</span> &amp;&amp; c2 == <span class=\"string\">')'</span>) || (c1 == <span class=\"string\">'['</span> &amp;&amp; c2 == <span class=\"string\">']'</span>) || (c1 == <span class=\"string\">'&#123;'</span> &amp;&amp; c2 == <span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>用两个栈来实现一个队列，完成队列的 Push 和 Pop 操作</p>\n<h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.一个堆插入数字，然后pop到第二个堆<br>2.这样第二个堆pop出来的数字就是第一个插入的</p>\n<h2 id=\"自己的代码-1\"><a href=\"#自己的代码-1\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">two_stack_queue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>  Stack stack1 = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Stack stack2 = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">queue_push</span><span class=\"params\">(String a )</span></span>&#123;</span><br><span class=\"line\">        stack1.push(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">queue_pop</span><span class=\"params\">(String a )</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stack2.size() == <span class=\"number\">0</span> &amp;&amp; stack1.size() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(stack1.size() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                Object tmp = stack1.pop();</span><br><span class=\"line\">                stack2.push(tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stack2.size() == <span class=\"number\">0</span> &amp;&amp; stack1.size() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> NullPointerException.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack2.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码\"><a href=\"#网上的代码\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack&lt;Integer&gt; in = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">Stack&lt;Integer&gt; out = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span> </span>&#123;</span><br><span class=\"line\">    in.push(node);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!in.isEmpty())</span><br><span class=\"line\">            out.push(in.pop());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"queue is empty\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> out.pop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。<br>假设压入栈的所有数字均不相等。例如序列输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。<br>假设压入栈的所有数字均不相等。例如序列 1，2，3，4，5 是某栈的压入顺序，序列 4，5，3，2，1是该压栈序列对应的一个弹出序列，<br>但4，3，5，1，2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p>\n<h2 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.用一个辅助堆，一直插入第一个数组的元素，直到等于第二个数组的第一个值<br>2.然后判断二个数组的第二位，是否等于这个辅助堆得第一个数值，如果等于则pop，否则接着push<br>3.最后判断辅助堆得大小即可，等于0则true,否则false.</p>\n<h2 id=\"自己的代码-2\"><a href=\"#自己的代码-2\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">stack_push_pop_shunxu</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRightSX</span><span class=\"params\">(<span class=\"keyword\">int</span>[] org, <span class=\"keyword\">int</span>[] hou)</span></span>&#123;</span><br><span class=\"line\">        Stack stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; org.length; i++) &#123;</span><br><span class=\"line\">            stack.push(org[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(stack.size() != <span class=\"number\">0</span> &amp; a &lt; hou.length)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = (<span class=\"keyword\">int</span>)stack.peek();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp == hou[a])&#123;</span><br><span class=\"line\">                    a ++;</span><br><span class=\"line\">                    stack.pop();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.size() ==<span class=\"number\">0</span> ? <span class=\"keyword\">true</span>:<span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(isRightSX(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-1\"><a href=\"#网上的代码-1\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">IsPopOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>[] pushSequence, <span class=\"keyword\">int</span>[] popSequence)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = pushSequence.length;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pushIndex = <span class=\"number\">0</span>, popIndex = <span class=\"number\">0</span>; pushIndex &lt; n; pushIndex++) &#123;</span><br><span class=\"line\">        stack.push(pushSequence[pushIndex]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (popIndex &lt; n &amp;&amp; !stack.isEmpty() </span><br><span class=\"line\">                &amp;&amp; stack.peek() == popSequence[popIndex]) &#123;</span><br><span class=\"line\">            stack.pop();</span><br><span class=\"line\">            popIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的 min 函数</p>\n<h2 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.用2个辅助堆，第一个放数组的元素，第二个放每次比较后较小的元素（第一个堆一定大于等于第二个堆）<br>2.第一个堆是每次都放入元素，第二个堆是每次那放入第一个堆得元素比较第二个堆自己最上面的元素，如果不一样，就push<br>3.最后使2个堆得大小一致，然后pop第二个堆，得到的第一个元素就是最小值。</p>\n<h2 id=\"自己的代码-3\"><a href=\"#自己的代码-3\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">minNums</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min_num= -<span class=\"number\">1</span>;</span><br><span class=\"line\">        Stack stack1 = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">        Stack stack2 = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">        stack1.push(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        stack2.push(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length ; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> last_val = (<span class=\"keyword\">int</span>)stack2.peek() ;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = Math.min(last_val, nums[i]);</span><br><span class=\"line\">            stack1.push(nums[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp != (<span class=\"keyword\">int</span>)stack2.peek() )&#123;</span><br><span class=\"line\">                stack2.push(nums[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(stack1.size() != stack2.size())&#123;</span><br><span class=\"line\">            stack1.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)stack2.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(min(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">12</span>&#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-2\"><a href=\"#网上的代码-2\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Stack&lt;Integer&gt; dataStack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">private</span> Stack&lt;Integer&gt; minStack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span> </span>&#123;</span><br><span class=\"line\">    dataStack.push(node);</span><br><span class=\"line\">    minStack.push(minStack.isEmpty() ? node : Math.min(minStack.peek(), node));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    dataStack.pop();</span><br><span class=\"line\">    minStack.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataStack.peek();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minStack.peek();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Leetcode面试题-04","date":"2019-03-29T06:52:07.000Z","_content":"\n数组主要活用下标，可以创建额外的空间\n<!-- more -->\n\n<!-- 面试题 -->\n\n# 问题\n\n给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。\n\n示例 1:\n\n输入: [2,3,-2,4]\n输出: 6\n解释: 子数组 [2,3] 有最大乘积 6。\n\n示例 2:\n\n输入: [-2,0,-1]\n输出: 0\n解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。\n\n\n\n## 思路\n\n1.取最大值进行比较，但是也需要取最小值，因为可能存在最小值为负数然后乘以一个负数变正数，而正数乘以负数就变最小值的情况\n2.可能遇到的问题就是乘积是可以多个乘积的也就是说数组可以是1个，2个，3个。。。\n3.中间必须要有个tmp变量值表示上一把最大值，而不是直接用min = Math.min(Math.min(tmp * nums[i], min * nums[i]), nums[i]);这样出来的最大值是这一次计算的，是不对的！！！！\n\n\n## 自己的代码\n\n```java\nclass Solution {\n    public int maxProduct(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        int max = nums[0], min = nums[0], result = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            int tmp = max;\n            max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);\n            min = Math.min(Math.min(tmp * nums[i], min * nums[i]), nums[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n}\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n\n\n\n\n\n<!-- 面试题 -->\n\n# 问题\n\n给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。\n\n示例 1:\n\n输入: [1,2,3,4,5,6,7] 和 k = 3\n输出: [5,6,7,1,2,3,4]\n解释:\n向右旋转 1 步: [7,1,2,3,4,5,6]\n向右旋转 2 步: [6,7,1,2,3,4,5]\n向右旋转 3 步: [5,6,7,1,2,3,4]\n\n示例 2:\n\n输入: [-1,-100,3,99] 和 k = 2\n输出: [3,99,-1,-100]\n解释: \n向右旋转 1 步: [99,-1,-100,3]\n向右旋转 2 步: [3,99,-1,-100]\n\n\n## 思路\n\n1.旋转数组的思路，首先将所有数组翻转，然后在翻转前K个，最后翻转第K+1个到最后一个即可！\n2.可能遇到的问题就是K超过了数组本身的长度。使用取余的方式做\n\n\n## 自己的代码\n\n```java\nclass Solution {\n    public static void rotate(int[] nums, int k) {\n        \n        if( k == 0 || k%nums.length == 0){\n            return;\n        }\n        reverse_arr(nums, 0, nums.length - 1);\n        reverse_arr(nums, 0, (k-1)%nums.length);\n        reverse_arr(nums,  k%nums.length , nums.length - 1);\n\n    }\n\n    public static void change_arr(int[] nums, int start, int end){\n        int tmp = nums[start];\n        nums[start] = nums[end];\n        nums[end] = tmp;\n    }\n\n    public static void reverse_arr(int[] nums, int start, int end){\n        while(start <= end){\n            change_arr(nums, start, end);\n            start ++;\n            end --;\n        }\n    }\n}\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n\n\n\n\n","source":"_posts/Leetcode面试题-04.md","raw":"---\ntitle: Leetcode面试题-04\ndate: 2019-03-29 14:52:07\ntags: \n- 数组\ncategories: \n- 算法\n- Leetcode\n---\n\n数组主要活用下标，可以创建额外的空间\n<!-- more -->\n\n<!-- 面试题 -->\n\n# 问题\n\n给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。\n\n示例 1:\n\n输入: [2,3,-2,4]\n输出: 6\n解释: 子数组 [2,3] 有最大乘积 6。\n\n示例 2:\n\n输入: [-2,0,-1]\n输出: 0\n解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。\n\n\n\n## 思路\n\n1.取最大值进行比较，但是也需要取最小值，因为可能存在最小值为负数然后乘以一个负数变正数，而正数乘以负数就变最小值的情况\n2.可能遇到的问题就是乘积是可以多个乘积的也就是说数组可以是1个，2个，3个。。。\n3.中间必须要有个tmp变量值表示上一把最大值，而不是直接用min = Math.min(Math.min(tmp * nums[i], min * nums[i]), nums[i]);这样出来的最大值是这一次计算的，是不对的！！！！\n\n\n## 自己的代码\n\n```java\nclass Solution {\n    public int maxProduct(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        int max = nums[0], min = nums[0], result = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            int tmp = max;\n            max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);\n            min = Math.min(Math.min(tmp * nums[i], min * nums[i]), nums[i]);\n            if (max > result) {\n                result = max;\n            }\n        }\n        return result;\n    }\n}\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n\n\n\n\n\n<!-- 面试题 -->\n\n# 问题\n\n给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。\n\n示例 1:\n\n输入: [1,2,3,4,5,6,7] 和 k = 3\n输出: [5,6,7,1,2,3,4]\n解释:\n向右旋转 1 步: [7,1,2,3,4,5,6]\n向右旋转 2 步: [6,7,1,2,3,4,5]\n向右旋转 3 步: [5,6,7,1,2,3,4]\n\n示例 2:\n\n输入: [-1,-100,3,99] 和 k = 2\n输出: [3,99,-1,-100]\n解释: \n向右旋转 1 步: [99,-1,-100,3]\n向右旋转 2 步: [3,99,-1,-100]\n\n\n## 思路\n\n1.旋转数组的思路，首先将所有数组翻转，然后在翻转前K个，最后翻转第K+1个到最后一个即可！\n2.可能遇到的问题就是K超过了数组本身的长度。使用取余的方式做\n\n\n## 自己的代码\n\n```java\nclass Solution {\n    public static void rotate(int[] nums, int k) {\n        \n        if( k == 0 || k%nums.length == 0){\n            return;\n        }\n        reverse_arr(nums, 0, nums.length - 1);\n        reverse_arr(nums, 0, (k-1)%nums.length);\n        reverse_arr(nums,  k%nums.length , nums.length - 1);\n\n    }\n\n    public static void change_arr(int[] nums, int start, int end){\n        int tmp = nums[start];\n        nums[start] = nums[end];\n        nums[end] = tmp;\n    }\n\n    public static void reverse_arr(int[] nums, int start, int end){\n        while(start <= end){\n            change_arr(nums, start, end);\n            start ++;\n            end --;\n        }\n    }\n}\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n\n\n\n\n","slug":"Leetcode面试题-04","published":1,"updated":"2019-03-31T14:15:55.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzureff000oa0ts8y3nlfc0","content":"<p>数组主要活用下标，可以创建额外的空间<br><a id=\"more\"></a></p>\n<!-- 面试题 -->\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。</p>\n<p>示例 1:</p>\n<p>输入: [2,3,-2,4]<br>输出: 6<br>解释: 子数组 [2,3] 有最大乘积 6。</p>\n<p>示例 2:</p>\n<p>输入: [-2,0,-1]<br>输出: 0<br>解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.取最大值进行比较，但是也需要取最小值，因为可能存在最小值为负数然后乘以一个负数变正数，而正数乘以负数就变最小值的情况<br>2.可能遇到的问题就是乘积是可以多个乘积的也就是说数组可以是1个，2个，3个。。。<br>3.中间必须要有个tmp变量值表示上一把最大值，而不是直接用min = Math.min(Math.min(tmp <em> nums[i], min </em> nums[i]), nums[i]);这样出来的最大值是这一次计算的，是不对的！！！！</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProduct</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = nums[<span class=\"number\">0</span>], min = nums[<span class=\"number\">0</span>], result = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = max;</span><br><span class=\"line\">            max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);</span><br><span class=\"line\">            min = Math.min(Math.min(tmp * nums[i], min * nums[i]), nums[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (max &gt; result) &#123;</span><br><span class=\"line\">                result = max;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码\"><a href=\"#网上的代码\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 面试题 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 问题</span><br><span class=\"line\"></span><br><span class=\"line\">给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>] 和 k = <span class=\"number\">3</span></span><br><span class=\"line\">输出: [<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">解释:</span><br><span class=\"line\">向右旋转 <span class=\"number\">1</span> 步: [<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">向右旋转 <span class=\"number\">2</span> 步: [<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">向右旋转 <span class=\"number\">3</span> 步: [<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: [-<span class=\"number\">1</span>,-<span class=\"number\">100</span>,<span class=\"number\">3</span>,<span class=\"number\">99</span>] 和 k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: [<span class=\"number\">3</span>,<span class=\"number\">99</span>,-<span class=\"number\">1</span>,-<span class=\"number\">100</span>]</span><br><span class=\"line\">解释: </span><br><span class=\"line\">向右旋转 <span class=\"number\">1</span> 步: [<span class=\"number\">99</span>,-<span class=\"number\">1</span>,-<span class=\"number\">100</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">向右旋转 <span class=\"number\">2</span> 步: [<span class=\"number\">3</span>,<span class=\"number\">99</span>,-<span class=\"number\">1</span>,-<span class=\"number\">100</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 思路</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.旋转数组的思路，首先将所有数组翻转，然后在翻转前K个，最后翻转第K+<span class=\"number\">1</span>个到最后一个即可！</span><br><span class=\"line\"><span class=\"number\">2</span>.可能遇到的问题就是K超过了数组本身的长度。使用取余的方式做</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 自己的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>( k == <span class=\"number\">0</span> || k%nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reverse_arr(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        reverse_arr(nums, <span class=\"number\">0</span>, (k-<span class=\"number\">1</span>)%nums.length);</span><br><span class=\"line\">        reverse_arr(nums,  k%nums.length , nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change_arr</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = nums[start];</span><br><span class=\"line\">        nums[start] = nums[end];</span><br><span class=\"line\">        nums[end] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse_arr</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start &lt;= end)&#123;</span><br><span class=\"line\">            change_arr(nums, start, end);</span><br><span class=\"line\">            start ++;</span><br><span class=\"line\">            end --;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-1\"><a href=\"#网上的代码-1\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><pre><code class=\"java\">\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>数组主要活用下标，可以创建额外的空间<br>","more":"</p>\n<!-- 面试题 -->\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。</p>\n<p>示例 1:</p>\n<p>输入: [2,3,-2,4]<br>输出: 6<br>解释: 子数组 [2,3] 有最大乘积 6。</p>\n<p>示例 2:</p>\n<p>输入: [-2,0,-1]<br>输出: 0<br>解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.取最大值进行比较，但是也需要取最小值，因为可能存在最小值为负数然后乘以一个负数变正数，而正数乘以负数就变最小值的情况<br>2.可能遇到的问题就是乘积是可以多个乘积的也就是说数组可以是1个，2个，3个。。。<br>3.中间必须要有个tmp变量值表示上一把最大值，而不是直接用min = Math.min(Math.min(tmp <em> nums[i], min </em> nums[i]), nums[i]);这样出来的最大值是这一次计算的，是不对的！！！！</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProduct</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = nums[<span class=\"number\">0</span>], min = nums[<span class=\"number\">0</span>], result = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = max;</span><br><span class=\"line\">            max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);</span><br><span class=\"line\">            min = Math.min(Math.min(tmp * nums[i], min * nums[i]), nums[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (max &gt; result) &#123;</span><br><span class=\"line\">                result = max;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码\"><a href=\"#网上的代码\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 面试题 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 问题</span><br><span class=\"line\"></span><br><span class=\"line\">给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>] 和 k = <span class=\"number\">3</span></span><br><span class=\"line\">输出: [<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">解释:</span><br><span class=\"line\">向右旋转 <span class=\"number\">1</span> 步: [<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">向右旋转 <span class=\"number\">2</span> 步: [<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">向右旋转 <span class=\"number\">3</span> 步: [<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: [-<span class=\"number\">1</span>,-<span class=\"number\">100</span>,<span class=\"number\">3</span>,<span class=\"number\">99</span>] 和 k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: [<span class=\"number\">3</span>,<span class=\"number\">99</span>,-<span class=\"number\">1</span>,-<span class=\"number\">100</span>]</span><br><span class=\"line\">解释: </span><br><span class=\"line\">向右旋转 <span class=\"number\">1</span> 步: [<span class=\"number\">99</span>,-<span class=\"number\">1</span>,-<span class=\"number\">100</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">向右旋转 <span class=\"number\">2</span> 步: [<span class=\"number\">3</span>,<span class=\"number\">99</span>,-<span class=\"number\">1</span>,-<span class=\"number\">100</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 思路</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.旋转数组的思路，首先将所有数组翻转，然后在翻转前K个，最后翻转第K+<span class=\"number\">1</span>个到最后一个即可！</span><br><span class=\"line\"><span class=\"number\">2</span>.可能遇到的问题就是K超过了数组本身的长度。使用取余的方式做</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 自己的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>( k == <span class=\"number\">0</span> || k%nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reverse_arr(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        reverse_arr(nums, <span class=\"number\">0</span>, (k-<span class=\"number\">1</span>)%nums.length);</span><br><span class=\"line\">        reverse_arr(nums,  k%nums.length , nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change_arr</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = nums[start];</span><br><span class=\"line\">        nums[start] = nums[end];</span><br><span class=\"line\">        nums[end] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse_arr</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start &lt;= end)&#123;</span><br><span class=\"line\">            change_arr(nums, start, end);</span><br><span class=\"line\">            start ++;</span><br><span class=\"line\">            end --;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-1\"><a href=\"#网上的代码-1\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><pre><code class=\"java\">\n</code></pre>"},{"title":"Leetcode面试题-02","date":"2019-03-20T15:02:42.000Z","_content":"\nLeetcode面试题-02  共2道\n\n<!-- more -->\n\n# 问题\n\n编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：\n\n每行的元素从左到右升序排列。\n每列的元素从上到下升序排列。\n示例:\n\n现有矩阵 matrix 如下：\n\n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n\n给定 target = 5，返回 true。\n\n给定 target = 20，返回 false。\n\n\n## 思路\n\n1.从右上角开始运行也就是上面的15开始（也可以是左下角18开始）\n2.比较目标值如果目标大的就下移，遇到小的就左移\n\n## 自己的代码\n\n```java\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n       if(matrix.length == 0){\n            return false;\n        }\n        boolean flag = false;\n        int hang_index = 0;\n        int lie_index =  matrix[0].length -1 ;\n        while(hang_index <  matrix.length && lie_index >= 0 ){\n            int tmp =matrix[hang_index][lie_index];\n            if(tmp < target){\n                hang_index ++;\n            }else if(tmp > target){\n                lie_index --;\n            }else{\n                flag = true;\n                break;\n            }\n        }\n        return flag;\n    }\n}\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n# 问题\n\n你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。\n\n每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。\n\n你知道存在楼层 F ，满足 0 <= F <= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。\n\n每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 <= X <= N）。\n\n你的目标是确切地知道 F 的值是多少。\n\n无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？\n\n示例 1：\n\n输入：K = 1, N = 2\n输出：2\n解释：\n鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。\n否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。\n如果它没碎，那么我们肯定知道 F = 2 。\n因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。\n示例 2：\n\n输入：K = 2, N = 6\n输出：3\n示例 3：\n\n输入：K = 3, N = 14\n输出：4\n \n\n提示：\n\n1 <= K <= 100\n1 <= N <= 10000\n\n\n## 思路\n\n0.简单理解 2个鸡蛋，6层，如果二分法，第三层碎了，那么就必须是从1,2层都扔一次鸡蛋随意会有3次步骤\n1.选择每m步能求出最大的层数！即使用d[k][m] = 最大的层数 k是鸡蛋 m是步数\n2.如果在d[k][m] = X层 摔出鸡蛋 1.碎了 d[k-1][m-1] <= X 2.没碎 d[k][m-1] + X > X\n3.如果要求d[k][m]的最大的层数，d[k][m] = d[k][m-1] + X = d[k][m-1] + d[k-1][m-1] + 1(本层)\n\n分析2：\n1.如果一个鸡蛋，确认有哪层，那就是必须每层都扔一次！所以有d[1][m] = m\n2.如果没有鸡蛋，那么没法确认层数 所以有d[0][m] = 0 同理d[k][0] = 0\n\n\n\n## 自己的代码\n\n```java\npublic static  int superEggDrop(int K, int N) {\n        if(K == 1){\n            return N;\n        }\n        if(K == 0){\n            return 0;\n        }\n        if(N==1){\n            return 1;\n        }\n        int res = 0;\n        int tmp;\n        int[][] qiu_max_floor = new int[K+1][N+1];\n        qiu_max_floor[0][0] = 0;\n        for (int i = 1; i < K + 1; i++) {\n            qiu_max_floor[i][0] = 0;\n            qiu_max_floor[i][1] = 1;\n            for (int j = 1; j < N + 1; j++) {\n                qiu_max_floor[1][j] = j;\n                qiu_max_floor[i][j] = qiu_max_floor[i][j-1] + qiu_max_floor[i-1][j-1] + 1;\n                tmp = qiu_max_floor[i][j];\n                if(tmp >= N){\n                    res = j;\n                    break;\n                }\n\n            }\n        }\n        return res;\n    }\n```\n\n## 网上的代码\n\n```java\n```\n\n\n","source":"_posts/Leetcode面试题-02.md","raw":"---\ntitle: Leetcode面试题-02\ndate: 2019-03-20 23:02:42\ntags: \n- 数组\n- 数学归纳法\ncategories: \n- 算法\n- Leetcode\n---\n\nLeetcode面试题-02  共2道\n\n<!-- more -->\n\n# 问题\n\n编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：\n\n每行的元素从左到右升序排列。\n每列的元素从上到下升序排列。\n示例:\n\n现有矩阵 matrix 如下：\n\n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n\n给定 target = 5，返回 true。\n\n给定 target = 20，返回 false。\n\n\n## 思路\n\n1.从右上角开始运行也就是上面的15开始（也可以是左下角18开始）\n2.比较目标值如果目标大的就下移，遇到小的就左移\n\n## 自己的代码\n\n```java\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n       if(matrix.length == 0){\n            return false;\n        }\n        boolean flag = false;\n        int hang_index = 0;\n        int lie_index =  matrix[0].length -1 ;\n        while(hang_index <  matrix.length && lie_index >= 0 ){\n            int tmp =matrix[hang_index][lie_index];\n            if(tmp < target){\n                hang_index ++;\n            }else if(tmp > target){\n                lie_index --;\n            }else{\n                flag = true;\n                break;\n            }\n        }\n        return flag;\n    }\n}\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n# 问题\n\n你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。\n\n每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。\n\n你知道存在楼层 F ，满足 0 <= F <= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。\n\n每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 <= X <= N）。\n\n你的目标是确切地知道 F 的值是多少。\n\n无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？\n\n示例 1：\n\n输入：K = 1, N = 2\n输出：2\n解释：\n鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。\n否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。\n如果它没碎，那么我们肯定知道 F = 2 。\n因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。\n示例 2：\n\n输入：K = 2, N = 6\n输出：3\n示例 3：\n\n输入：K = 3, N = 14\n输出：4\n \n\n提示：\n\n1 <= K <= 100\n1 <= N <= 10000\n\n\n## 思路\n\n0.简单理解 2个鸡蛋，6层，如果二分法，第三层碎了，那么就必须是从1,2层都扔一次鸡蛋随意会有3次步骤\n1.选择每m步能求出最大的层数！即使用d[k][m] = 最大的层数 k是鸡蛋 m是步数\n2.如果在d[k][m] = X层 摔出鸡蛋 1.碎了 d[k-1][m-1] <= X 2.没碎 d[k][m-1] + X > X\n3.如果要求d[k][m]的最大的层数，d[k][m] = d[k][m-1] + X = d[k][m-1] + d[k-1][m-1] + 1(本层)\n\n分析2：\n1.如果一个鸡蛋，确认有哪层，那就是必须每层都扔一次！所以有d[1][m] = m\n2.如果没有鸡蛋，那么没法确认层数 所以有d[0][m] = 0 同理d[k][0] = 0\n\n\n\n## 自己的代码\n\n```java\npublic static  int superEggDrop(int K, int N) {\n        if(K == 1){\n            return N;\n        }\n        if(K == 0){\n            return 0;\n        }\n        if(N==1){\n            return 1;\n        }\n        int res = 0;\n        int tmp;\n        int[][] qiu_max_floor = new int[K+1][N+1];\n        qiu_max_floor[0][0] = 0;\n        for (int i = 1; i < K + 1; i++) {\n            qiu_max_floor[i][0] = 0;\n            qiu_max_floor[i][1] = 1;\n            for (int j = 1; j < N + 1; j++) {\n                qiu_max_floor[1][j] = j;\n                qiu_max_floor[i][j] = qiu_max_floor[i][j-1] + qiu_max_floor[i-1][j-1] + 1;\n                tmp = qiu_max_floor[i][j];\n                if(tmp >= N){\n                    res = j;\n                    break;\n                }\n\n            }\n        }\n        return res;\n    }\n```\n\n## 网上的代码\n\n```java\n```\n\n\n","slug":"Leetcode面试题-02","published":1,"updated":"2019-03-20T15:18:01.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzurefh000qa0tska8uajft","content":"<p>Leetcode面试题-02  共2道</p>\n<a id=\"more\"></a>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p>\n<p>每行的元素从左到右升序排列。<br>每列的元素从上到下升序排列。<br>示例:</p>\n<p>现有矩阵 matrix 如下：</p>\n<p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p>\n<p>给定 target = 5，返回 true。</p>\n<p>给定 target = 20，返回 false。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.从右上角开始运行也就是上面的15开始（也可以是左下角18开始）<br>2.比较目标值如果目标大的就下移，遇到小的就左移</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(matrix.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hang_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lie_index =  matrix[<span class=\"number\">0</span>].length -<span class=\"number\">1</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hang_index &lt;  matrix.length &amp;&amp; lie_index &gt;= <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp =matrix[hang_index][lie_index];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp &lt; target)&#123;</span><br><span class=\"line\">                hang_index ++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tmp &gt; target)&#123;</span><br><span class=\"line\">                lie_index --;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码\"><a href=\"#网上的代码\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 问题</span><br><span class=\"line\"></span><br><span class=\"line\">你将获得 K 个鸡蛋，并可以使用一栋从 <span class=\"number\">1</span> 到 N  共有 N 层楼的建筑。</span><br><span class=\"line\"></span><br><span class=\"line\">每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</span><br><span class=\"line\"></span><br><span class=\"line\">你知道存在楼层 F ，满足 <span class=\"number\">0</span> &lt;= F &lt;= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。</span><br><span class=\"line\"></span><br><span class=\"line\">每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 <span class=\"number\">1</span> &lt;= X &lt;= N）。</span><br><span class=\"line\"></span><br><span class=\"line\">你的目标是确切地知道 F 的值是多少。</span><br><span class=\"line\"></span><br><span class=\"line\">无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：K = <span class=\"number\">1</span>, N = <span class=\"number\">2</span></span><br><span class=\"line\">输出：<span class=\"number\">2</span></span><br><span class=\"line\">解释：</span><br><span class=\"line\">鸡蛋从 <span class=\"number\">1</span> 楼掉落。如果它碎了，我们肯定知道 F = <span class=\"number\">0</span> 。</span><br><span class=\"line\">否则，鸡蛋从 <span class=\"number\">2</span> 楼掉落。如果它碎了，我们肯定知道 F = <span class=\"number\">1</span> 。</span><br><span class=\"line\">如果它没碎，那么我们肯定知道 F = <span class=\"number\">2</span> 。</span><br><span class=\"line\">因此，在最坏的情况下我们需要移动 <span class=\"number\">2</span> 次以确定 F 是多少。</span><br><span class=\"line\">示例 <span class=\"number\">2</span>：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：K = <span class=\"number\">2</span>, N = <span class=\"number\">6</span></span><br><span class=\"line\">输出：<span class=\"number\">3</span></span><br><span class=\"line\">示例 <span class=\"number\">3</span>：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：K = <span class=\"number\">3</span>, N = <span class=\"number\">14</span></span><br><span class=\"line\">输出：<span class=\"number\">4</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">提示：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> &lt;= K &lt;= <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">1</span> &lt;= N &lt;= <span class=\"number\">10000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 思路</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>.简单理解 <span class=\"number\">2</span>个鸡蛋，<span class=\"number\">6</span>层，如果二分法，第三层碎了，那么就必须是从<span class=\"number\">1</span>,<span class=\"number\">2</span>层都扔一次鸡蛋随意会有<span class=\"number\">3</span>次步骤</span><br><span class=\"line\"><span class=\"number\">1</span>.选择每m步能求出最大的层数！即使用d[k][m] = 最大的层数 k是鸡蛋 m是步数</span><br><span class=\"line\"><span class=\"number\">2</span>.如果在d[k][m] = X层 摔出鸡蛋 <span class=\"number\">1</span>.碎了 d[k-<span class=\"number\">1</span>][m-<span class=\"number\">1</span>] &lt;= X <span class=\"number\">2</span>.没碎 d[k][m-<span class=\"number\">1</span>] + X &gt; X</span><br><span class=\"line\"><span class=\"number\">3</span>.如果要求d[k][m]的最大的层数，d[k][m] = d[k][m-<span class=\"number\">1</span>] + X = d[k][m-<span class=\"number\">1</span>] + d[k-<span class=\"number\">1</span>][m-<span class=\"number\">1</span>] + <span class=\"number\">1</span>(本层)</span><br><span class=\"line\"></span><br><span class=\"line\">分析<span class=\"number\">2</span>：</span><br><span class=\"line\"><span class=\"number\">1</span>.如果一个鸡蛋，确认有哪层，那就是必须每层都扔一次！所以有d[<span class=\"number\">1</span>][m] = m</span><br><span class=\"line\"><span class=\"number\">2</span>.如果没有鸡蛋，那么没法确认层数 所以有d[<span class=\"number\">0</span>][m] = <span class=\"number\">0</span> 同理d[k][<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 自己的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  <span class=\"keyword\">int</span> <span class=\"title\">superEggDrop</span><span class=\"params\">(<span class=\"keyword\">int</span> K, <span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(N==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] qiu_max_floor = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[K+<span class=\"number\">1</span>][N+<span class=\"number\">1</span>];</span><br><span class=\"line\">        qiu_max_floor[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; K + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            qiu_max_floor[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            qiu_max_floor[i][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; N + <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                qiu_max_floor[<span class=\"number\">1</span>][j] = j;</span><br><span class=\"line\">                qiu_max_floor[i][j] = qiu_max_floor[i][j-<span class=\"number\">1</span>] + qiu_max_floor[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                tmp = qiu_max_floor[i][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp &gt;= N)&#123;</span><br><span class=\"line\">                    res = j;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-1\"><a href=\"#网上的代码-1\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><pre><code class=\"java\">\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>Leetcode面试题-02  共2道</p>","more":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p>\n<p>每行的元素从左到右升序排列。<br>每列的元素从上到下升序排列。<br>示例:</p>\n<p>现有矩阵 matrix 如下：</p>\n<p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p>\n<p>给定 target = 5，返回 true。</p>\n<p>给定 target = 20，返回 false。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.从右上角开始运行也就是上面的15开始（也可以是左下角18开始）<br>2.比较目标值如果目标大的就下移，遇到小的就左移</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(matrix.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hang_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lie_index =  matrix[<span class=\"number\">0</span>].length -<span class=\"number\">1</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hang_index &lt;  matrix.length &amp;&amp; lie_index &gt;= <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp =matrix[hang_index][lie_index];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp &lt; target)&#123;</span><br><span class=\"line\">                hang_index ++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tmp &gt; target)&#123;</span><br><span class=\"line\">                lie_index --;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码\"><a href=\"#网上的代码\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 问题</span><br><span class=\"line\"></span><br><span class=\"line\">你将获得 K 个鸡蛋，并可以使用一栋从 <span class=\"number\">1</span> 到 N  共有 N 层楼的建筑。</span><br><span class=\"line\"></span><br><span class=\"line\">每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</span><br><span class=\"line\"></span><br><span class=\"line\">你知道存在楼层 F ，满足 <span class=\"number\">0</span> &lt;= F &lt;= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。</span><br><span class=\"line\"></span><br><span class=\"line\">每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 <span class=\"number\">1</span> &lt;= X &lt;= N）。</span><br><span class=\"line\"></span><br><span class=\"line\">你的目标是确切地知道 F 的值是多少。</span><br><span class=\"line\"></span><br><span class=\"line\">无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：K = <span class=\"number\">1</span>, N = <span class=\"number\">2</span></span><br><span class=\"line\">输出：<span class=\"number\">2</span></span><br><span class=\"line\">解释：</span><br><span class=\"line\">鸡蛋从 <span class=\"number\">1</span> 楼掉落。如果它碎了，我们肯定知道 F = <span class=\"number\">0</span> 。</span><br><span class=\"line\">否则，鸡蛋从 <span class=\"number\">2</span> 楼掉落。如果它碎了，我们肯定知道 F = <span class=\"number\">1</span> 。</span><br><span class=\"line\">如果它没碎，那么我们肯定知道 F = <span class=\"number\">2</span> 。</span><br><span class=\"line\">因此，在最坏的情况下我们需要移动 <span class=\"number\">2</span> 次以确定 F 是多少。</span><br><span class=\"line\">示例 <span class=\"number\">2</span>：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：K = <span class=\"number\">2</span>, N = <span class=\"number\">6</span></span><br><span class=\"line\">输出：<span class=\"number\">3</span></span><br><span class=\"line\">示例 <span class=\"number\">3</span>：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：K = <span class=\"number\">3</span>, N = <span class=\"number\">14</span></span><br><span class=\"line\">输出：<span class=\"number\">4</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">提示：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> &lt;= K &lt;= <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">1</span> &lt;= N &lt;= <span class=\"number\">10000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 思路</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>.简单理解 <span class=\"number\">2</span>个鸡蛋，<span class=\"number\">6</span>层，如果二分法，第三层碎了，那么就必须是从<span class=\"number\">1</span>,<span class=\"number\">2</span>层都扔一次鸡蛋随意会有<span class=\"number\">3</span>次步骤</span><br><span class=\"line\"><span class=\"number\">1</span>.选择每m步能求出最大的层数！即使用d[k][m] = 最大的层数 k是鸡蛋 m是步数</span><br><span class=\"line\"><span class=\"number\">2</span>.如果在d[k][m] = X层 摔出鸡蛋 <span class=\"number\">1</span>.碎了 d[k-<span class=\"number\">1</span>][m-<span class=\"number\">1</span>] &lt;= X <span class=\"number\">2</span>.没碎 d[k][m-<span class=\"number\">1</span>] + X &gt; X</span><br><span class=\"line\"><span class=\"number\">3</span>.如果要求d[k][m]的最大的层数，d[k][m] = d[k][m-<span class=\"number\">1</span>] + X = d[k][m-<span class=\"number\">1</span>] + d[k-<span class=\"number\">1</span>][m-<span class=\"number\">1</span>] + <span class=\"number\">1</span>(本层)</span><br><span class=\"line\"></span><br><span class=\"line\">分析<span class=\"number\">2</span>：</span><br><span class=\"line\"><span class=\"number\">1</span>.如果一个鸡蛋，确认有哪层，那就是必须每层都扔一次！所以有d[<span class=\"number\">1</span>][m] = m</span><br><span class=\"line\"><span class=\"number\">2</span>.如果没有鸡蛋，那么没法确认层数 所以有d[<span class=\"number\">0</span>][m] = <span class=\"number\">0</span> 同理d[k][<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 自己的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  <span class=\"keyword\">int</span> <span class=\"title\">superEggDrop</span><span class=\"params\">(<span class=\"keyword\">int</span> K, <span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(N==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] qiu_max_floor = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[K+<span class=\"number\">1</span>][N+<span class=\"number\">1</span>];</span><br><span class=\"line\">        qiu_max_floor[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; K + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            qiu_max_floor[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            qiu_max_floor[i][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; N + <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                qiu_max_floor[<span class=\"number\">1</span>][j] = j;</span><br><span class=\"line\">                qiu_max_floor[i][j] = qiu_max_floor[i][j-<span class=\"number\">1</span>] + qiu_max_floor[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                tmp = qiu_max_floor[i][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp &gt;= N)&#123;</span><br><span class=\"line\">                    res = j;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-1\"><a href=\"#网上的代码-1\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><pre><code class=\"java\">\n</code></pre>"},{"title":"数学专栏课外加餐（一） | 我们为什么需要反码和补码？","date":"2019-03-31T14:38:30.000Z","_content":"\n反码和补码的补充\n\n<!-- more -->\n\n<!-- 文章 -->\n# 摘要\n\n\n# 疑问\n\n## 什么是符号位？为什么要符号位？\n\n符号位就是二进制中最高的一位，用来表示数字的正负。\n\n## 什么是溢出？ 溢出后会发生什么？\n\njava int的最大值上线就是2^31 - 1（虽然有32位，但是最高位为符号位！）\n为什么会是2^31呢？ 看04数学归纳法可知： 最大值就是 01...1那么结果就是2^30 + 2^29 + 1 = 2^31 - 1\n最小值也就是下限是-2^31\n最小值存在补码现象\n\n\n\n上溢出 + 1 溢出后 变成符号位为1,其余位数为0，也就是下溢出的值了。\n\n![](1.jpg)\n\n# 基本内容\n\n## 二进制的源码，反码，补码\n\n源码就是二进制的原始表示。\n反码就是除符号位按位取反。\n补码就是在反码的基础上+1\n\n## 上溢出和下溢出\n\n超出上限叫上溢出\n超出下限叫下溢出\n\n# 思考题\n\n# 扩展\n\n# 小结\n\n","source":"_posts/数学专栏课外加餐（一）-我们为什么需要反码和补码？.md","raw":"---\ntitle: 数学专栏课外加餐（一） | 我们为什么需要反码和补码？\ndate: 2019-03-31 22:38:30\ntags: 计算机\ncategories: \n- 网络学习\n- 极客时间\n- 程序员的数学基础课\n---\n\n反码和补码的补充\n\n<!-- more -->\n\n<!-- 文章 -->\n# 摘要\n\n\n# 疑问\n\n## 什么是符号位？为什么要符号位？\n\n符号位就是二进制中最高的一位，用来表示数字的正负。\n\n## 什么是溢出？ 溢出后会发生什么？\n\njava int的最大值上线就是2^31 - 1（虽然有32位，但是最高位为符号位！）\n为什么会是2^31呢？ 看04数学归纳法可知： 最大值就是 01...1那么结果就是2^30 + 2^29 + 1 = 2^31 - 1\n最小值也就是下限是-2^31\n最小值存在补码现象\n\n\n\n上溢出 + 1 溢出后 变成符号位为1,其余位数为0，也就是下溢出的值了。\n\n![](1.jpg)\n\n# 基本内容\n\n## 二进制的源码，反码，补码\n\n源码就是二进制的原始表示。\n反码就是除符号位按位取反。\n补码就是在反码的基础上+1\n\n## 上溢出和下溢出\n\n超出上限叫上溢出\n超出下限叫下溢出\n\n# 思考题\n\n# 扩展\n\n# 小结\n\n","slug":"数学专栏课外加餐（一）-我们为什么需要反码和补码？","published":1,"updated":"2019-04-02T14:19:39.693Z","_id":"cjtzurefl000ua0tsbfbh1qn6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>反码和补码的补充</p>\n<a id=\"more\"></a>\n<!-- 文章 -->\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"什么是符号位？为什么要符号位？\"><a href=\"#什么是符号位？为什么要符号位？\" class=\"headerlink\" title=\"什么是符号位？为什么要符号位？\"></a>什么是符号位？为什么要符号位？</h2><p>符号位就是二进制中最高的一位，用来表示数字的正负。</p>\n<h2 id=\"什么是溢出？-溢出后会发生什么？\"><a href=\"#什么是溢出？-溢出后会发生什么？\" class=\"headerlink\" title=\"什么是溢出？ 溢出后会发生什么？\"></a>什么是溢出？ 溢出后会发生什么？</h2><p>java int的最大值上线就是2^31 - 1（虽然有32位，但是最高位为符号位！）<br>为什么会是2^31呢？ 看04数学归纳法可知： 最大值就是 01…1那么结果就是2^30 + 2^29 + 1 = 2^31 - 1<br>最小值也就是下限是-2^31<br>最小值存在补码现象</p>\n<p>上溢出 + 1 溢出后 变成符号位为1,其余位数为0，也就是下溢出的值了。</p>\n<p><img src=\"/2019/03/31/数学专栏课外加餐（一）-我们为什么需要反码和补码？/1.jpg\" alt></p>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"二进制的源码，反码，补码\"><a href=\"#二进制的源码，反码，补码\" class=\"headerlink\" title=\"二进制的源码，反码，补码\"></a>二进制的源码，反码，补码</h2><p>源码就是二进制的原始表示。<br>反码就是除符号位按位取反。<br>补码就是在反码的基础上+1</p>\n<h2 id=\"上溢出和下溢出\"><a href=\"#上溢出和下溢出\" class=\"headerlink\" title=\"上溢出和下溢出\"></a>上溢出和下溢出</h2><p>超出上限叫上溢出<br>超出下限叫下溢出</p>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1>","site":{"data":{}},"excerpt":"<p>反码和补码的补充</p>","more":"<!-- 文章 -->\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h2 id=\"什么是符号位？为什么要符号位？\"><a href=\"#什么是符号位？为什么要符号位？\" class=\"headerlink\" title=\"什么是符号位？为什么要符号位？\"></a>什么是符号位？为什么要符号位？</h2><p>符号位就是二进制中最高的一位，用来表示数字的正负。</p>\n<h2 id=\"什么是溢出？-溢出后会发生什么？\"><a href=\"#什么是溢出？-溢出后会发生什么？\" class=\"headerlink\" title=\"什么是溢出？ 溢出后会发生什么？\"></a>什么是溢出？ 溢出后会发生什么？</h2><p>java int的最大值上线就是2^31 - 1（虽然有32位，但是最高位为符号位！）<br>为什么会是2^31呢？ 看04数学归纳法可知： 最大值就是 01…1那么结果就是2^30 + 2^29 + 1 = 2^31 - 1<br>最小值也就是下限是-2^31<br>最小值存在补码现象</p>\n<p>上溢出 + 1 溢出后 变成符号位为1,其余位数为0，也就是下溢出的值了。</p>\n<p><img src=\"/2019/03/31/数学专栏课外加餐（一）-我们为什么需要反码和补码？/1.jpg\" alt></p>\n<h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"二进制的源码，反码，补码\"><a href=\"#二进制的源码，反码，补码\" class=\"headerlink\" title=\"二进制的源码，反码，补码\"></a>二进制的源码，反码，补码</h2><p>源码就是二进制的原始表示。<br>反码就是除符号位按位取反。<br>补码就是在反码的基础上+1</p>\n<h2 id=\"上溢出和下溢出\"><a href=\"#上溢出和下溢出\" class=\"headerlink\" title=\"上溢出和下溢出\"></a>上溢出和下溢出</h2><p>超出上限叫上溢出<br>超出下限叫下溢出</p>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1>"},{"title":"数学专栏课外加餐（二） | 位操作的三个应用实例","date":"2019-03-31T15:09:15.000Z","_content":"\n位操作应用实例\n\n<!-- more -->\n\n<!-- 文章 -->\n# 摘要\n\n# 疑问\n\n# 基本内容\n\n## 位操作应用实例\n\n### 验证奇偶数\n\n#### 思路\n\n1.\n2.\n3.\n\n#### 代码\n\n```java\n```\n\n### 交换两个变量\n\n#### 思路\n\n1.\n2.\n3.\n\n#### 代码\n\n```java\n```\n\n### 集合操作\n\n#### 思路\n\n1.\n2.\n3.\n\n#### 代码\n\n```java\n```\n\n\n\n## 二分法查找的细节\n\n\n取mid值得时候不要使用 (low + high)/2\n而是使用 low + (high - low) /2 \n\n![](1.jpg)\n\n理由是：如果low和high都很大时，会造成溢出！\n而上面的公式 可以看出 2low/2 + (high - low)/2 = (high + low)/2\n\n\n\n## 关于迭代和数学归纳法和递归\n\n迭代一般使用与正向思维。\n递归一般使用与逆向思维。\n某些重复性计算可以使用数学归纳法做。\n\n可以遵循的原则是：\n\n1.如果这个问题可以被迭代法完成，并且是关于数值型的，可以假设命题并尝试用数学归纳法来做。\n2.如果需要借助计算机来算，首先尝试使用迭代法做，但是如果问题过于复杂，如有很多中间过程变量，可以尝试细化问题，并使用递归来解决。\n3.如果数据过大，就尝试使用分治的思想来做！\n\n\n# 思考题\n\n# 扩展\n\n# 小结\n\n","source":"_posts/数学专栏课外加餐（二）-位操作的三个应用实例.md","raw":"---\ntitle: 数学专栏课外加餐（二） | 位操作的三个应用实例\ndate: 2019-03-31 23:09:15\ntags: 计算机\ncategories: \n- 网络学习\n- 极客时间\n- 程序员的数学基础课\n---\n\n位操作应用实例\n\n<!-- more -->\n\n<!-- 文章 -->\n# 摘要\n\n# 疑问\n\n# 基本内容\n\n## 位操作应用实例\n\n### 验证奇偶数\n\n#### 思路\n\n1.\n2.\n3.\n\n#### 代码\n\n```java\n```\n\n### 交换两个变量\n\n#### 思路\n\n1.\n2.\n3.\n\n#### 代码\n\n```java\n```\n\n### 集合操作\n\n#### 思路\n\n1.\n2.\n3.\n\n#### 代码\n\n```java\n```\n\n\n\n## 二分法查找的细节\n\n\n取mid值得时候不要使用 (low + high)/2\n而是使用 low + (high - low) /2 \n\n![](1.jpg)\n\n理由是：如果low和high都很大时，会造成溢出！\n而上面的公式 可以看出 2low/2 + (high - low)/2 = (high + low)/2\n\n\n\n## 关于迭代和数学归纳法和递归\n\n迭代一般使用与正向思维。\n递归一般使用与逆向思维。\n某些重复性计算可以使用数学归纳法做。\n\n可以遵循的原则是：\n\n1.如果这个问题可以被迭代法完成，并且是关于数值型的，可以假设命题并尝试用数学归纳法来做。\n2.如果需要借助计算机来算，首先尝试使用迭代法做，但是如果问题过于复杂，如有很多中间过程变量，可以尝试细化问题，并使用递归来解决。\n3.如果数据过大，就尝试使用分治的思想来做！\n\n\n# 思考题\n\n# 扩展\n\n# 小结\n\n","slug":"数学专栏课外加餐（二）-位操作的三个应用实例","published":1,"updated":"2019-04-02T14:27:46.556Z","_id":"cjtzurefo000wa0tszkjgn8d3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>位操作应用实例</p>\n<a id=\"more\"></a>\n<!-- 文章 -->\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"位操作应用实例\"><a href=\"#位操作应用实例\" class=\"headerlink\" title=\"位操作应用实例\"></a>位操作应用实例</h2><h3 id=\"验证奇偶数\"><a href=\"#验证奇偶数\" class=\"headerlink\" title=\"验证奇偶数\"></a>验证奇偶数</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>1.<br>2.<br>3.</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">### 交换两个变量</span><br><span class=\"line\"></span><br><span class=\"line\">#### 思路</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.</span><br><span class=\"line\"><span class=\"number\">2</span>.</span><br><span class=\"line\"><span class=\"number\">3</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">#### 代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br></pre></td></tr></table></figure>\n<h3 id=\"集合操作\"><a href=\"#集合操作\" class=\"headerlink\" title=\"集合操作\"></a>集合操作</h3><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>1.<br>2.<br>3.</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre><code class=\"java\">\n</code></pre>\n<h2 id=\"二分法查找的细节\"><a href=\"#二分法查找的细节\" class=\"headerlink\" title=\"二分法查找的细节\"></a>二分法查找的细节</h2><p>取mid值得时候不要使用 (low + high)/2<br>而是使用 low + (high - low) /2 </p>\n<p><img src=\"/2019/03/31/数学专栏课外加餐（二）-位操作的三个应用实例/1.jpg\" alt></p>\n<p>理由是：如果low和high都很大时，会造成溢出！<br>而上面的公式 可以看出 2low/2 + (high - low)/2 = (high + low)/2</p>\n<h2 id=\"关于迭代和数学归纳法和递归\"><a href=\"#关于迭代和数学归纳法和递归\" class=\"headerlink\" title=\"关于迭代和数学归纳法和递归\"></a>关于迭代和数学归纳法和递归</h2><p>迭代一般使用与正向思维。<br>递归一般使用与逆向思维。<br>某些重复性计算可以使用数学归纳法做。</p>\n<p>可以遵循的原则是：</p>\n<p>1.如果这个问题可以被迭代法完成，并且是关于数值型的，可以假设命题并尝试用数学归纳法来做。<br>2.如果需要借助计算机来算，首先尝试使用迭代法做，但是如果问题过于复杂，如有很多中间过程变量，可以尝试细化问题，并使用递归来解决。<br>3.如果数据过大，就尝试使用分治的思想来做！</p>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1>","site":{"data":{}},"excerpt":"<p>位操作应用实例</p>","more":"<!-- 文章 -->\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h2 id=\"位操作应用实例\"><a href=\"#位操作应用实例\" class=\"headerlink\" title=\"位操作应用实例\"></a>位操作应用实例</h2><h3 id=\"验证奇偶数\"><a href=\"#验证奇偶数\" class=\"headerlink\" title=\"验证奇偶数\"></a>验证奇偶数</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>1.<br>2.<br>3.</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">### 交换两个变量</span><br><span class=\"line\"></span><br><span class=\"line\">#### 思路</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.</span><br><span class=\"line\"><span class=\"number\">2</span>.</span><br><span class=\"line\"><span class=\"number\">3</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">#### 代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br></pre></td></tr></table></figure>\n<h3 id=\"集合操作\"><a href=\"#集合操作\" class=\"headerlink\" title=\"集合操作\"></a>集合操作</h3><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>1.<br>2.<br>3.</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre><code class=\"java\">\n</code></pre>\n<h2 id=\"二分法查找的细节\"><a href=\"#二分法查找的细节\" class=\"headerlink\" title=\"二分法查找的细节\"></a>二分法查找的细节</h2><p>取mid值得时候不要使用 (low + high)/2<br>而是使用 low + (high - low) /2 </p>\n<p><img src=\"/2019/03/31/数学专栏课外加餐（二）-位操作的三个应用实例/1.jpg\" alt></p>\n<p>理由是：如果low和high都很大时，会造成溢出！<br>而上面的公式 可以看出 2low/2 + (high - low)/2 = (high + low)/2</p>\n<h2 id=\"关于迭代和数学归纳法和递归\"><a href=\"#关于迭代和数学归纳法和递归\" class=\"headerlink\" title=\"关于迭代和数学归纳法和递归\"></a>关于迭代和数学归纳法和递归</h2><p>迭代一般使用与正向思维。<br>递归一般使用与逆向思维。<br>某些重复性计算可以使用数学归纳法做。</p>\n<p>可以遵循的原则是：</p>\n<p>1.如果这个问题可以被迭代法完成，并且是关于数值型的，可以假设命题并尝试用数学归纳法来做。<br>2.如果需要借助计算机来算，首先尝试使用迭代法做，但是如果问题过于复杂，如有很多中间过程变量，可以尝试细化问题，并使用递归来解决。<br>3.如果数据过大，就尝试使用分治的思想来做！</p>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1>"},{"title":"Leetcode面试题-05","date":"2019-03-29T06:52:11.000Z","_content":"\n栈先进后出，堆先进先出\n<!-- more -->\n<!-- 面试题 -->\n\n# 问题\n\n设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。\n\n    push(x) -- 将元素 x 推入栈中。\n    pop() -- 删除栈顶的元素。\n    top() -- 获取栈顶元素。\n    getMin() -- 检索栈中的最小元素。\n\n示例:\n\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --> 返回 -3.\nminStack.pop();\nminStack.top();      --> 返回 0.\nminStack.getMin();   --> 返回 -2.\n\n\n## 思路\n\n1.做一个辅助栈，保存最小值，还有一个栈正常push,pop\n2.当放入的值和最小栈最上面的值比较，如果比最小栈上的值小，则放入正常栈的同时也放入最小栈\n\n\n\n\n## 自己的代码\n\n```java\nclass MinStack {\n        Stack normal_stack  = new Stack<>();\n        Stack min_stack  = new Stack<>();\n\n        /** initialize your data structure here. */\n        public MinStack() {\n\n        }\n\n        public void push(int x) {\n            normal_stack.push(x);\n            if(min_stack.isEmpty()){\n                min_stack.push(x);\n            }else{\n                int last_min = (int)min_stack.peek();\n                if(last_min >= x){\n                    min_stack.push(x);\n                }\n            }\n        }\n\n        public void pop() {\n            int is_min = (int)normal_stack.peek();\n            int last_min = (int)min_stack.peek();\n            normal_stack.pop();\n            if(is_min == last_min){\n                min_stack.pop();\n            }\n\n        }\n\n        public int top() {\n           return  (int)normal_stack.peek();\n        }\n\n        public int getMin() {\n            return (int) min_stack.peek();\n        }\n    }\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n<!-- 面试题 -->\n\n# 问题\n\n在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。\n\n示例 1:\n\n输入: [3,2,1,5,6,4] 和 k = 2\n输出: 5\n\n示例 2:\n\n输入: [3,2,3,1,2,4,5,5,6] 和 k = 4\n输出: 4\n\n说明:\n\n你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。\n\n\n## 思路\n\n1.简单的方式，进行排序然后选择第k个大的值。\n2.这边我使用最大堆得方式，也就是先创建一个数组，大小就是k。这个数组是有序的！！\n3.第一次初始化这个最大堆，是要排序的，然后遍历数组，和里面的值比较，如果给定的数组中有大于其中数组的值，则大的值放入最大堆。\n4.最后返回k-1下标的值即可。\n\n\n## 自己的代码\n\n```java\nclass Solution {\n    public int findKthLargest(int[] nums, int k) {\n\n        int[] max_arr = new int[k];\n        init_max_arr(max_arr, nums, k);\n\n        for (int i = k ; i < nums.length; i++) {\n            insert(max_arr, nums[i]);\n        }\n        return max_arr[k - 1];\n\n\n    }\n\n    public void init_max_arr(int[] max_arr,int[] nums, int k){\n        for (int i = 0; i < k; i++) {\n            max_arr[i] = nums[i];\n        }\n        int start = 0;\n        int tmp;\n        while (start< max_arr.length - 1){\n            int second = start + 1;\n            if(max_arr[start] < max_arr[second]){\n                tmp = max_arr[start];\n                max_arr[start] = max_arr[second];\n                max_arr[second] = tmp;\n            }\n\n            start++;\n        }\n    }\n\n    public void insert(int[] max_arr, int num){\n        int start = 0;\n        int tmp;\n        while (start< max_arr.length){\n            if(max_arr[start] < num){\n                tmp = max_arr[start];\n                max_arr[start] = num;\n                num = tmp;\n            }\n\n            start++;\n        }\n    }\n\n}\n```\n\n## 网上的代码\n\n```java\n```","source":"_posts/Leetcode面试题-05.md","raw":"---\ntitle: Leetcode面试题-05\ndate: 2019-03-29 14:52:11\ntags:\n- 堆\n- 栈\n---\n\n栈先进后出，堆先进先出\n<!-- more -->\n<!-- 面试题 -->\n\n# 问题\n\n设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。\n\n    push(x) -- 将元素 x 推入栈中。\n    pop() -- 删除栈顶的元素。\n    top() -- 获取栈顶元素。\n    getMin() -- 检索栈中的最小元素。\n\n示例:\n\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --> 返回 -3.\nminStack.pop();\nminStack.top();      --> 返回 0.\nminStack.getMin();   --> 返回 -2.\n\n\n## 思路\n\n1.做一个辅助栈，保存最小值，还有一个栈正常push,pop\n2.当放入的值和最小栈最上面的值比较，如果比最小栈上的值小，则放入正常栈的同时也放入最小栈\n\n\n\n\n## 自己的代码\n\n```java\nclass MinStack {\n        Stack normal_stack  = new Stack<>();\n        Stack min_stack  = new Stack<>();\n\n        /** initialize your data structure here. */\n        public MinStack() {\n\n        }\n\n        public void push(int x) {\n            normal_stack.push(x);\n            if(min_stack.isEmpty()){\n                min_stack.push(x);\n            }else{\n                int last_min = (int)min_stack.peek();\n                if(last_min >= x){\n                    min_stack.push(x);\n                }\n            }\n        }\n\n        public void pop() {\n            int is_min = (int)normal_stack.peek();\n            int last_min = (int)min_stack.peek();\n            normal_stack.pop();\n            if(is_min == last_min){\n                min_stack.pop();\n            }\n\n        }\n\n        public int top() {\n           return  (int)normal_stack.peek();\n        }\n\n        public int getMin() {\n            return (int) min_stack.peek();\n        }\n    }\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n<!-- 面试题 -->\n\n# 问题\n\n在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。\n\n示例 1:\n\n输入: [3,2,1,5,6,4] 和 k = 2\n输出: 5\n\n示例 2:\n\n输入: [3,2,3,1,2,4,5,5,6] 和 k = 4\n输出: 4\n\n说明:\n\n你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。\n\n\n## 思路\n\n1.简单的方式，进行排序然后选择第k个大的值。\n2.这边我使用最大堆得方式，也就是先创建一个数组，大小就是k。这个数组是有序的！！\n3.第一次初始化这个最大堆，是要排序的，然后遍历数组，和里面的值比较，如果给定的数组中有大于其中数组的值，则大的值放入最大堆。\n4.最后返回k-1下标的值即可。\n\n\n## 自己的代码\n\n```java\nclass Solution {\n    public int findKthLargest(int[] nums, int k) {\n\n        int[] max_arr = new int[k];\n        init_max_arr(max_arr, nums, k);\n\n        for (int i = k ; i < nums.length; i++) {\n            insert(max_arr, nums[i]);\n        }\n        return max_arr[k - 1];\n\n\n    }\n\n    public void init_max_arr(int[] max_arr,int[] nums, int k){\n        for (int i = 0; i < k; i++) {\n            max_arr[i] = nums[i];\n        }\n        int start = 0;\n        int tmp;\n        while (start< max_arr.length - 1){\n            int second = start + 1;\n            if(max_arr[start] < max_arr[second]){\n                tmp = max_arr[start];\n                max_arr[start] = max_arr[second];\n                max_arr[second] = tmp;\n            }\n\n            start++;\n        }\n    }\n\n    public void insert(int[] max_arr, int num){\n        int start = 0;\n        int tmp;\n        while (start< max_arr.length){\n            if(max_arr[start] < num){\n                tmp = max_arr[start];\n                max_arr[start] = num;\n                num = tmp;\n            }\n\n            start++;\n        }\n    }\n\n}\n```\n\n## 网上的代码\n\n```java\n```","slug":"Leetcode面试题-05","published":1,"updated":"2019-03-31T14:16:36.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzurefu0010a0ts4onu0vau","content":"<p>栈先进后出，堆先进先出<br><a id=\"more\"></a><br><!-- 面试题 --></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p>\n<pre><code>push(x) -- 将元素 x 推入栈中。\npop() -- 删除栈顶的元素。\ntop() -- 获取栈顶元素。\ngetMin() -- 检索栈中的最小元素。\n</code></pre><p>示例:</p>\n<p>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      –&gt; 返回 0.<br>minStack.getMin();   –&gt; 返回 -2.</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.做一个辅助栈，保存最小值，还有一个栈正常push,pop<br>2.当放入的值和最小栈最上面的值比较，如果比最小栈上的值小，则放入正常栈的同时也放入最小栈</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinStack</span> </span>&#123;</span><br><span class=\"line\">        Stack normal_stack  = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        Stack min_stack  = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** initialize your data structure here. */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MinStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">            normal_stack.push(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(min_stack.isEmpty())&#123;</span><br><span class=\"line\">                min_stack.push(x);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> last_min = (<span class=\"keyword\">int</span>)min_stack.peek();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(last_min &gt;= x)&#123;</span><br><span class=\"line\">                    min_stack.push(x);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> is_min = (<span class=\"keyword\">int</span>)normal_stack.peek();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> last_min = (<span class=\"keyword\">int</span>)min_stack.peek();</span><br><span class=\"line\">            normal_stack.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(is_min == last_min)&#123;</span><br><span class=\"line\">                min_stack.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span>  (<span class=\"keyword\">int</span>)normal_stack.peek();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) min_stack.peek();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码\"><a href=\"#网上的代码\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 面试题 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 问题</span><br><span class=\"line\"></span><br><span class=\"line\">在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>] 和 k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>] 和 k = <span class=\"number\">4</span></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">说明:</span><br><span class=\"line\"></span><br><span class=\"line\">你可以假设 k 总是有效的，且 <span class=\"number\">1</span> ≤ k ≤ 数组的长度。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 思路</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.简单的方式，进行排序然后选择第k个大的值。</span><br><span class=\"line\"><span class=\"number\">2</span>.这边我使用最大堆得方式，也就是先创建一个数组，大小就是k。这个数组是有序的！！</span><br><span class=\"line\"><span class=\"number\">3</span>.第一次初始化这个最大堆，是要排序的，然后遍历数组，和里面的值比较，如果给定的数组中有大于其中数组的值，则大的值放入最大堆。</span><br><span class=\"line\"><span class=\"number\">4</span>.最后返回k-<span class=\"number\">1</span>下标的值即可。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 自己的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] max_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\">        init_max_arr(max_arr, nums, k);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = k ; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            insert(max_arr, nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max_arr[k - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init_max_arr</span><span class=\"params\">(<span class=\"keyword\">int</span>[] max_arr,<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">            max_arr[i] = nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start&lt; max_arr.length - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> second = start + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(max_arr[start] &lt; max_arr[second])&#123;</span><br><span class=\"line\">                tmp = max_arr[start];</span><br><span class=\"line\">                max_arr[start] = max_arr[second];</span><br><span class=\"line\">                max_arr[second] = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span>[] max_arr, <span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start&lt; max_arr.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(max_arr[start] &lt; num)&#123;</span><br><span class=\"line\">                tmp = max_arr[start];</span><br><span class=\"line\">                max_arr[start] = num;</span><br><span class=\"line\">                num = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-1\"><a href=\"#网上的代码-1\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><pre><code class=\"java\">\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>栈先进后出，堆先进先出<br>","more":"<br><!-- 面试题 --></p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p>\n<pre><code>push(x) -- 将元素 x 推入栈中。\npop() -- 删除栈顶的元素。\ntop() -- 获取栈顶元素。\ngetMin() -- 检索栈中的最小元素。\n</code></pre><p>示例:</p>\n<p>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      –&gt; 返回 0.<br>minStack.getMin();   –&gt; 返回 -2.</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>1.做一个辅助栈，保存最小值，还有一个栈正常push,pop<br>2.当放入的值和最小栈最上面的值比较，如果比最小栈上的值小，则放入正常栈的同时也放入最小栈</p>\n<h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinStack</span> </span>&#123;</span><br><span class=\"line\">        Stack normal_stack  = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        Stack min_stack  = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** initialize your data structure here. */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MinStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">            normal_stack.push(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(min_stack.isEmpty())&#123;</span><br><span class=\"line\">                min_stack.push(x);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> last_min = (<span class=\"keyword\">int</span>)min_stack.peek();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(last_min &gt;= x)&#123;</span><br><span class=\"line\">                    min_stack.push(x);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> is_min = (<span class=\"keyword\">int</span>)normal_stack.peek();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> last_min = (<span class=\"keyword\">int</span>)min_stack.peek();</span><br><span class=\"line\">            normal_stack.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(is_min == last_min)&#123;</span><br><span class=\"line\">                min_stack.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span>  (<span class=\"keyword\">int</span>)normal_stack.peek();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) min_stack.peek();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码\"><a href=\"#网上的代码\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 面试题 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 问题</span><br><span class=\"line\"></span><br><span class=\"line\">在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>] 和 k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>] 和 k = <span class=\"number\">4</span></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">说明:</span><br><span class=\"line\"></span><br><span class=\"line\">你可以假设 k 总是有效的，且 <span class=\"number\">1</span> ≤ k ≤ 数组的长度。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 思路</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.简单的方式，进行排序然后选择第k个大的值。</span><br><span class=\"line\"><span class=\"number\">2</span>.这边我使用最大堆得方式，也就是先创建一个数组，大小就是k。这个数组是有序的！！</span><br><span class=\"line\"><span class=\"number\">3</span>.第一次初始化这个最大堆，是要排序的，然后遍历数组，和里面的值比较，如果给定的数组中有大于其中数组的值，则大的值放入最大堆。</span><br><span class=\"line\"><span class=\"number\">4</span>.最后返回k-<span class=\"number\">1</span>下标的值即可。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 自己的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] max_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[k];</span><br><span class=\"line\">        init_max_arr(max_arr, nums, k);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = k ; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            insert(max_arr, nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max_arr[k - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init_max_arr</span><span class=\"params\">(<span class=\"keyword\">int</span>[] max_arr,<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">            max_arr[i] = nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start&lt; max_arr.length - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> second = start + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(max_arr[start] &lt; max_arr[second])&#123;</span><br><span class=\"line\">                tmp = max_arr[start];</span><br><span class=\"line\">                max_arr[start] = max_arr[second];</span><br><span class=\"line\">                max_arr[second] = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span>[] max_arr, <span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start&lt; max_arr.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(max_arr[start] &lt; num)&#123;</span><br><span class=\"line\">                tmp = max_arr[start];</span><br><span class=\"line\">                max_arr[start] = num;</span><br><span class=\"line\">                num = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网上的代码-1\"><a href=\"#网上的代码-1\" class=\"headerlink\" title=\"网上的代码\"></a>网上的代码</h2><pre><code class=\"java\">\n</code></pre>"},{"title":"文章结构","date":"2019-03-04T14:25:04.000Z","_content":"\n**摘要 - 疑问 - 基本内容 - 思考题 - 扩展 - 小结**\n**问题 - 思路 - 代码 - 网上代码**\n<!-- more -->\n\n<!-- 文章 -->\n# 摘要\n\n# 疑问\n\n# 基本内容\n\n# 思考题\n\n# 扩展\n\n# 小结\n\n\n<!-- 面试题 -->\n\n# 问题\n\n## 思路\n\n## 自己的代码\n\n```java\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n\n\n","source":"_posts/文章结构构建.md","raw":"---\ntitle: 文章结构\ndate: 2019-03-04 22:25:04\n---\n\n**摘要 - 疑问 - 基本内容 - 思考题 - 扩展 - 小结**\n**问题 - 思路 - 代码 - 网上代码**\n<!-- more -->\n\n<!-- 文章 -->\n# 摘要\n\n# 疑问\n\n# 基本内容\n\n# 思考题\n\n# 扩展\n\n# 小结\n\n\n<!-- 面试题 -->\n\n# 问题\n\n## 思路\n\n## 自己的代码\n\n```java\n```\n\n## 网上的代码\n\n```java\n```\n\n\n\n\n\n","slug":"文章结构构建","published":1,"updated":"2019-03-11T15:28:57.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzurefx0012a0tsigjsgeul","content":"<p><strong>摘要 - 疑问 - 基本内容 - 思考题 - 扩展 - 小结</strong><br><strong>问题 - 思路 - 代码 - 网上代码</strong><br><a id=\"more\"></a></p>\n<!-- 文章 -->\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><!-- 面试题 -->\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">## 网上的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><strong>摘要 - 疑问 - 基本内容 - 思考题 - 扩展 - 小结</strong><br><strong>问题 - 思路 - 代码 - 网上代码</strong><br>","more":"</p>\n<!-- 文章 -->\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><h1 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h1><h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><!-- 面试题 -->\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h2 id=\"自己的代码\"><a href=\"#自己的代码\" class=\"headerlink\" title=\"自己的代码\"></a>自己的代码</h2><figure class=\"hljs highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">## 网上的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br></pre></td></tr></table></figure>"},{"title":"硬汉计划第一天","date":"2019-03-25T06:52:26.000Z","_content":"\n每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。\n![](yiquan.jpg)\n<!-- more -->\n\n看了微博的一片文章，硬汉挑战计划\n具体实施内容\n每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。\n\n准备循序渐进。\n\n从家附近的操场跑起。 准备分level.\n\nlv1  每天1公里， 10个俯卧撑， 10个仰卧起坐， 10个深蹲。\nlv2  每天2公里， 20个俯卧撑， 20个仰卧起坐， 20个深蹲。\nlv3  每天3公里， 30个俯卧撑， 30个仰卧起坐， 30个深蹲。\nlv4  每天4公里， 40个俯卧撑， 40个仰卧起坐， 40个深蹲。\nlv5  每天5公里， 50个俯卧撑， 50个仰卧起坐， 50个深蹲。\nlv6  每天6公里， 60个俯卧撑， 60个仰卧起坐， 60个深蹲。\nlv7  每天7公里， 70个俯卧撑， 70个仰卧起坐， 70个深蹲。\nlv8  每天8公里， 80个俯卧撑， 80个仰卧起坐， 80个深蹲。\nlv9  每天9公里， 90个俯卧撑， 90个仰卧起坐， 90个深蹲。\nlv10  每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。\n\n\n结果第一天，好久没锻炼了。\n\n跑步lv7  7.0公里跑的够呛。。\n俯卧撑lv3 30个，跑完之后做的，完全没劲。。\n深蹲lv0  没做。。。。\n仰卧起坐lv0 没做。。。。\n\n多加一个引体向上\nlv0  4个。。我日啊难的一批。\n\n\n跑步用的悦跑圈。","source":"_posts/硬汉计划第一天.md","raw":"---\ntitle: 硬汉计划第一天\ndate: 2019-03-25 14:52:26\ntags: 生活\n---\n\n每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。\n![](yiquan.jpg)\n<!-- more -->\n\n看了微博的一片文章，硬汉挑战计划\n具体实施内容\n每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。\n\n准备循序渐进。\n\n从家附近的操场跑起。 准备分level.\n\nlv1  每天1公里， 10个俯卧撑， 10个仰卧起坐， 10个深蹲。\nlv2  每天2公里， 20个俯卧撑， 20个仰卧起坐， 20个深蹲。\nlv3  每天3公里， 30个俯卧撑， 30个仰卧起坐， 30个深蹲。\nlv4  每天4公里， 40个俯卧撑， 40个仰卧起坐， 40个深蹲。\nlv5  每天5公里， 50个俯卧撑， 50个仰卧起坐， 50个深蹲。\nlv6  每天6公里， 60个俯卧撑， 60个仰卧起坐， 60个深蹲。\nlv7  每天7公里， 70个俯卧撑， 70个仰卧起坐， 70个深蹲。\nlv8  每天8公里， 80个俯卧撑， 80个仰卧起坐， 80个深蹲。\nlv9  每天9公里， 90个俯卧撑， 90个仰卧起坐， 90个深蹲。\nlv10  每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。\n\n\n结果第一天，好久没锻炼了。\n\n跑步lv7  7.0公里跑的够呛。。\n俯卧撑lv3 30个，跑完之后做的，完全没劲。。\n深蹲lv0  没做。。。。\n仰卧起坐lv0 没做。。。。\n\n多加一个引体向上\nlv0  4个。。我日啊难的一批。\n\n\n跑步用的悦跑圈。","slug":"硬汉计划第一天","published":1,"updated":"2019-03-29T07:05:07.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzureg20016a0tskohi0wuy","content":"<p>每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。<br><img src=\"/2019/03/25/硬汉计划第一天/yiquan.jpg\" alt><br><a id=\"more\"></a></p>\n<p>看了微博的一片文章，硬汉挑战计划<br>具体实施内容<br>每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。</p>\n<p>准备循序渐进。</p>\n<p>从家附近的操场跑起。 准备分level.</p>\n<p>lv1  每天1公里， 10个俯卧撑， 10个仰卧起坐， 10个深蹲。<br>lv2  每天2公里， 20个俯卧撑， 20个仰卧起坐， 20个深蹲。<br>lv3  每天3公里， 30个俯卧撑， 30个仰卧起坐， 30个深蹲。<br>lv4  每天4公里， 40个俯卧撑， 40个仰卧起坐， 40个深蹲。<br>lv5  每天5公里， 50个俯卧撑， 50个仰卧起坐， 50个深蹲。<br>lv6  每天6公里， 60个俯卧撑， 60个仰卧起坐， 60个深蹲。<br>lv7  每天7公里， 70个俯卧撑， 70个仰卧起坐， 70个深蹲。<br>lv8  每天8公里， 80个俯卧撑， 80个仰卧起坐， 80个深蹲。<br>lv9  每天9公里， 90个俯卧撑， 90个仰卧起坐， 90个深蹲。<br>lv10  每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。</p>\n<p>结果第一天，好久没锻炼了。</p>\n<p>跑步lv7  7.0公里跑的够呛。。<br>俯卧撑lv3 30个，跑完之后做的，完全没劲。。<br>深蹲lv0  没做。。。。<br>仰卧起坐lv0 没做。。。。</p>\n<p>多加一个引体向上<br>lv0  4个。。我日啊难的一批。</p>\n<p>跑步用的悦跑圈。</p>\n","site":{"data":{}},"excerpt":"<p>每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。<br><img src=\"/2019/03/25/硬汉计划第一天/yiquan.jpg\" alt><br>","more":"</p>\n<p>看了微博的一片文章，硬汉挑战计划<br>具体实施内容<br>每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。</p>\n<p>准备循序渐进。</p>\n<p>从家附近的操场跑起。 准备分level.</p>\n<p>lv1  每天1公里， 10个俯卧撑， 10个仰卧起坐， 10个深蹲。<br>lv2  每天2公里， 20个俯卧撑， 20个仰卧起坐， 20个深蹲。<br>lv3  每天3公里， 30个俯卧撑， 30个仰卧起坐， 30个深蹲。<br>lv4  每天4公里， 40个俯卧撑， 40个仰卧起坐， 40个深蹲。<br>lv5  每天5公里， 50个俯卧撑， 50个仰卧起坐， 50个深蹲。<br>lv6  每天6公里， 60个俯卧撑， 60个仰卧起坐， 60个深蹲。<br>lv7  每天7公里， 70个俯卧撑， 70个仰卧起坐， 70个深蹲。<br>lv8  每天8公里， 80个俯卧撑， 80个仰卧起坐， 80个深蹲。<br>lv9  每天9公里， 90个俯卧撑， 90个仰卧起坐， 90个深蹲。<br>lv10  每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。</p>\n<p>结果第一天，好久没锻炼了。</p>\n<p>跑步lv7  7.0公里跑的够呛。。<br>俯卧撑lv3 30个，跑完之后做的，完全没劲。。<br>深蹲lv0  没做。。。。<br>仰卧起坐lv0 没做。。。。</p>\n<p>多加一个引体向上<br>lv0  4个。。我日啊难的一批。</p>\n<p>跑步用的悦跑圈。</p>"},{"title":"硬汉计划第三天","date":"2019-03-28T06:52:42.000Z","_content":"\n27号休息了，去吃饭了。（身体巨累）\n\n跑步0公里， 30个俯卧撑， 40个仰卧起坐， 55个深蹲\n\n![](jiayou.jpg)\n<!-- more -->\n\n脚断了，是真的。两个小腿筋一直一抽一抽的。可能是周二，脚外侧疼的时候，垫脚跑导致的。\n\n哈麻皮，买了髌骨带和运动耳机。还买了牛排！","source":"_posts/硬汉计划第三天.md","raw":"---\ntitle: 硬汉计划第三天\ndate: 2019-03-28 14:52:42\ntags: 生活\n---\n\n27号休息了，去吃饭了。（身体巨累）\n\n跑步0公里， 30个俯卧撑， 40个仰卧起坐， 55个深蹲\n\n![](jiayou.jpg)\n<!-- more -->\n\n脚断了，是真的。两个小腿筋一直一抽一抽的。可能是周二，脚外侧疼的时候，垫脚跑导致的。\n\n哈麻皮，买了髌骨带和运动耳机。还买了牛排！","slug":"硬汉计划第三天","published":1,"updated":"2019-03-29T07:15:39.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzureg60018a0tsadex7rw3","content":"<p>27号休息了，去吃饭了。（身体巨累）</p>\n<p>跑步0公里， 30个俯卧撑， 40个仰卧起坐， 55个深蹲</p>\n<p><img src=\"/2019/03/28/硬汉计划第三天/jiayou.jpg\" alt><br><a id=\"more\"></a></p>\n<p>脚断了，是真的。两个小腿筋一直一抽一抽的。可能是周二，脚外侧疼的时候，垫脚跑导致的。</p>\n<p>哈麻皮，买了髌骨带和运动耳机。还买了牛排！</p>\n","site":{"data":{}},"excerpt":"<p>27号休息了，去吃饭了。（身体巨累）</p>\n<p>跑步0公里， 30个俯卧撑， 40个仰卧起坐， 55个深蹲</p>\n<p><img src=\"/2019/03/28/硬汉计划第三天/jiayou.jpg\" alt><br>","more":"</p>\n<p>脚断了，是真的。两个小腿筋一直一抽一抽的。可能是周二，脚外侧疼的时候，垫脚跑导致的。</p>\n<p>哈麻皮，买了髌骨带和运动耳机。还买了牛排！</p>"},{"title":"硬汉计划第二天","date":"2019-03-26T06:52:31.000Z","_content":"\n跑步7.9公里， 30个俯卧撑， 40个仰卧起坐， 0个深蹲\n\n![](jiayou.jpg)\n<!-- more -->\n\n跑完感觉脚断了，脚掌外侧巨疼，查了后是软组织挫伤导致的。\n\n先贴点伤筋膏药吧。\n\n","source":"_posts/硬汉计划第二天.md","raw":"---\ntitle: 硬汉计划第二天\ndate: 2019-03-26 14:52:31\ntags: 生活\n---\n\n跑步7.9公里， 30个俯卧撑， 40个仰卧起坐， 0个深蹲\n\n![](jiayou.jpg)\n<!-- more -->\n\n跑完感觉脚断了，脚掌外侧巨疼，查了后是软组织挫伤导致的。\n\n先贴点伤筋膏药吧。\n\n","slug":"硬汉计划第二天","published":1,"updated":"2019-03-31T09:01:43.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzureg9001aa0ts47ocbjgf","content":"<p>跑步7.9公里， 30个俯卧撑， 40个仰卧起坐， 0个深蹲</p>\n<p><img src=\"/2019/03/26/硬汉计划第二天/jiayou.jpg\" alt><br><a id=\"more\"></a></p>\n<p>跑完感觉脚断了，脚掌外侧巨疼，查了后是软组织挫伤导致的。</p>\n<p>先贴点伤筋膏药吧。</p>\n","site":{"data":{}},"excerpt":"<p>跑步7.9公里， 30个俯卧撑， 40个仰卧起坐， 0个深蹲</p>\n<p><img src=\"/2019/03/26/硬汉计划第二天/jiayou.jpg\" alt><br>","more":"</p>\n<p>跑完感觉脚断了，脚掌外侧巨疼，查了后是软组织挫伤导致的。</p>\n<p>先贴点伤筋膏药吧。</p>"},{"title":"硬汉计划第五天","date":"2019-03-30T08:58:33.000Z","_content":"\n跑步9.23公里， 0个俯卧撑， 0个仰卧起坐， 100个深蹲\n\n\n\n![](jiayou.jpg)\n<!-- more -->\n\n脚休息了2天终于出去跑步啦， 戴上了髌骨带，一开始没啥，后面跑了1公里，感觉有点紧，\n需要放松，并且上提，不然感觉会伤。\n\n\n\n\n\n\n\n","source":"_posts/硬汉计划第五天.md","raw":"---\ntitle: 硬汉计划第五天\ndate: 2019-03-30 16:58:33\ntags: 生活\n---\n\n跑步9.23公里， 0个俯卧撑， 0个仰卧起坐， 100个深蹲\n\n\n\n![](jiayou.jpg)\n<!-- more -->\n\n脚休息了2天终于出去跑步啦， 戴上了髌骨带，一开始没啥，后面跑了1公里，感觉有点紧，\n需要放松，并且上提，不然感觉会伤。\n\n\n\n\n\n\n\n","slug":"硬汉计划第五天","published":1,"updated":"2019-03-31T09:00:56.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzuregd001da0tsyn4zm692","content":"<p>跑步9.23公里， 0个俯卧撑， 0个仰卧起坐， 100个深蹲</p>\n<p><img src=\"/2019/03/30/硬汉计划第五天/jiayou.jpg\" alt><br><a id=\"more\"></a></p>\n<p>脚休息了2天终于出去跑步啦， 戴上了髌骨带，一开始没啥，后面跑了1公里，感觉有点紧，<br>需要放松，并且上提，不然感觉会伤。</p>\n","site":{"data":{}},"excerpt":"<p>跑步9.23公里， 0个俯卧撑， 0个仰卧起坐， 100个深蹲</p>\n<p><img src=\"/2019/03/30/硬汉计划第五天/jiayou.jpg\" alt><br>","more":"</p>\n<p>脚休息了2天终于出去跑步啦， 戴上了髌骨带，一开始没啥，后面跑了1公里，感觉有点紧，<br>需要放松，并且上提，不然感觉会伤。</p>"},{"title":"硬汉计划第六天","date":"2019-03-31T14:12:53.000Z","_content":"\n跑步0公里， 60个俯卧撑， 0个仰卧起坐， 100个深蹲\n\n\n\n![](jiayou.png)\n<!-- more -->\n\n感觉脚没啥力气，不要跑了，明天跑！今天主要是恢复期！\n\n\n","source":"_posts/硬汉计划第六天.md","raw":"---\ntitle: 硬汉计划第六天\ndate: 2019-03-31 22:12:53\ntags: 生活\n---\n\n跑步0公里， 60个俯卧撑， 0个仰卧起坐， 100个深蹲\n\n\n\n![](jiayou.png)\n<!-- more -->\n\n感觉脚没啥力气，不要跑了，明天跑！今天主要是恢复期！\n\n\n","slug":"硬汉计划第六天","published":1,"updated":"2019-03-31T14:14:58.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzuregh001ga0ts4hlghi7o","content":"<p>跑步0公里， 60个俯卧撑， 0个仰卧起坐， 100个深蹲</p>\n<p><img src=\"/2019/03/31/硬汉计划第六天/jiayou.png\" alt><br><a id=\"more\"></a></p>\n<p>感觉脚没啥力气，不要跑了，明天跑！今天主要是恢复期！</p>\n","site":{"data":{}},"excerpt":"<p>跑步0公里， 60个俯卧撑， 0个仰卧起坐， 100个深蹲</p>\n<p><img src=\"/2019/03/31/硬汉计划第六天/jiayou.png\" alt><br>","more":"</p>\n<p>感觉脚没啥力气，不要跑了，明天跑！今天主要是恢复期！</p>"},{"title":"硬汉计划第四天","date":"2019-03-29T06:52:47.000Z","_content":"\n\n\n\n\n跑步0公里， 4个俯卧撑， 50个仰卧起坐， 100个深蹲\n身体需要休息。\n\n\n![](jiayou.jpg)\n<!-- more -->\n\n牛肉到了，感觉还行。","source":"_posts/硬汉计划第四天.md","raw":"---\ntitle: 硬汉计划第四天\ndate: 2019-03-29 14:52:47\ntags: 生活\n---\n\n\n\n\n\n跑步0公里， 4个俯卧撑， 50个仰卧起坐， 100个深蹲\n身体需要休息。\n\n\n![](jiayou.jpg)\n<!-- more -->\n\n牛肉到了，感觉还行。","slug":"硬汉计划第四天","published":1,"updated":"2019-03-29T09:58:41.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzuregl001ia0ts1tqvtgb9","content":"<p>跑步0公里， 4个俯卧撑， 50个仰卧起坐， 100个深蹲<br>身体需要休息。</p>\n<p><img src=\"/2019/03/29/硬汉计划第四天/jiayou.jpg\" alt><br><a id=\"more\"></a></p>\n<p>牛肉到了，感觉还行。</p>\n","site":{"data":{}},"excerpt":"<p>跑步0公里， 4个俯卧撑， 50个仰卧起坐， 100个深蹲<br>身体需要休息。</p>\n<p><img src=\"/2019/03/29/硬汉计划第四天/jiayou.jpg\" alt><br>","more":"</p>\n<p>牛肉到了，感觉还行。</p>"},{"title":"硬汉计划第七天","date":"2019-04-01T16:06:25.000Z","_content":"\n跑步9.41公里， 40个俯卧撑， 0个仰卧起坐， 0个深蹲\n\n\n\n![](jiayou.jpg)\n<!-- more -->\n\n跑步渐入佳境~~\n\n\n","source":"_posts/硬汉计划第七天.md","raw":"---\ntitle: 硬汉计划第七天\ndate: 2019-04-02 00:06:25\ntags: 生活\n---\n\n跑步9.41公里， 40个俯卧撑， 0个仰卧起坐， 0个深蹲\n\n\n\n![](jiayou.jpg)\n<!-- more -->\n\n跑步渐入佳境~~\n\n\n","slug":"硬汉计划第七天","published":1,"updated":"2019-04-01T16:09:16.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzuregn001ka0tsn14hzwif","content":"<p>跑步9.41公里， 40个俯卧撑， 0个仰卧起坐， 0个深蹲</p>\n<p><img src=\"/2019/04/02/硬汉计划第七天/jiayou.jpg\" alt><br><a id=\"more\"></a></p>\n<p>跑步渐入佳境~~</p>\n","site":{"data":{}},"excerpt":"<p>跑步9.41公里， 40个俯卧撑， 0个仰卧起坐， 0个深蹲</p>\n<p><img src=\"/2019/04/02/硬汉计划第七天/jiayou.jpg\" alt><br>","more":"</p>\n<p>跑步渐入佳境~~</p>"}],"PostAsset":[{"_id":"source/_posts/01-二进制：不了解计算机的源头，你学什么编程/lesson1.jpg","slug":"lesson1.jpg","post":"cjtzuree10001a0tsheeywlyb","modified":0,"renderable":0},{"_id":"source/_posts/02-余数：原来取余操作本身就是个哈希函数/lesson2.jpg","slug":"lesson2.jpg","post":"cjtzureeb0003a0tsiql9121x","modified":0,"renderable":0},{"_id":"source/_posts/03-迭代法：不用编程语言的自带函数，你会如何计算平方根/lessons3.jpg","slug":"lessons3.jpg","post":"cjtzureel0006a0ts37lddgs1","modified":0,"renderable":0},{"_id":"source/_posts/05-递归（上）：泛化数学归纳，如何将复杂问题简单化？/lesson5.jpg","slug":"lesson5.jpg","post":"cjtzureep0007a0tsbkkd4ixa","modified":0,"renderable":0},{"_id":"source/_posts/04-数学归纳法：如何用数学归纳提升代码的运行效率？/lesson4.jpg","slug":"lesson4.jpg","post":"cjtzureer0008a0tsm6yklueo","modified":0,"renderable":0},{"_id":"source/_posts/硬汉计划第一天/yiquan.jpg","slug":"yiquan.jpg","post":"cjtzureg20016a0tskohi0wuy","modified":0,"renderable":0},{"_id":"source/_posts/硬汉计划第三天/jiayou.jpg","slug":"jiayou.jpg","post":"cjtzureg60018a0tsadex7rw3","modified":0,"renderable":0},{"_id":"source/_posts/硬汉计划第五天/jiayou.jpg","slug":"jiayou.jpg","post":"cjtzuregd001da0tsyn4zm692","modified":0,"renderable":0},{"_id":"source/_posts/硬汉计划第二天/jiayou.jpg","slug":"jiayou.jpg","post":"cjtzureg9001aa0ts47ocbjgf","modified":0,"renderable":0},{"_id":"source/_posts/硬汉计划第六天/jiayou.png","slug":"jiayou.png","post":"cjtzuregh001ga0ts4hlghi7o","modified":0,"renderable":0},{"_id":"source/_posts/硬汉计划第四天/jiayou.jpg","slug":"jiayou.jpg","post":"cjtzuregl001ia0ts1tqvtgb9","modified":0,"renderable":0},{"_id":"source/_posts/硬汉计划第七天/jiayou.jpg","slug":"jiayou.jpg","post":"cjtzuregn001ka0tsn14hzwif","modified":0,"renderable":0},{"_id":"source/_posts/06-递归（下）：分而治之，从归并排序到MapReduce/1.jpg","slug":"1.jpg","post":"cjtzuref0000ca0ts1bfxwyjv","modified":0,"renderable":0},{"_id":"source/_posts/06-递归（下）：分而治之，从归并排序到MapReduce/2.jpg","slug":"2.jpg","post":"cjtzuref0000ca0ts1bfxwyjv","modified":0,"renderable":0},{"_id":"source/_posts/06-递归（下）：分而治之，从归并排序到MapReduce/lesson6.jpg","slug":"lesson6.jpg","post":"cjtzuref0000ca0ts1bfxwyjv","modified":0,"renderable":0},{"_id":"source/_posts/数学专栏课外加餐（一）-我们为什么需要反码和补码？/1.jpg","slug":"1.jpg","post":"cjtzurefl000ua0tsbfbh1qn6","modified":0,"renderable":0},{"_id":"source/_posts/数学专栏课外加餐（二）-位操作的三个应用实例/1.jpg","slug":"1.jpg","post":"cjtzurefo000wa0tszkjgn8d3","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjtzureep0007a0tsbkkd4ixa","category_id":"cjtzureeg0004a0tsk17300r8","_id":"cjtzureh60024a0tseyekwvc8"},{"post_id":"cjtzureep0007a0tsbkkd4ixa","category_id":"cjtzurefc000la0tsiczisvel","_id":"cjtzureh70025a0ts5mz8wrab"},{"post_id":"cjtzureep0007a0tsbkkd4ixa","category_id":"cjtzuregy001wa0tsts6e1o5g","_id":"cjtzureha0029a0tsj6vfpbf2"},{"post_id":"cjtzurefl000ua0tsbfbh1qn6","category_id":"cjtzureeg0004a0tsk17300r8","_id":"cjtzurehc002ca0tsi1yr25w7"},{"post_id":"cjtzurefl000ua0tsbfbh1qn6","category_id":"cjtzurefc000la0tsiczisvel","_id":"cjtzurehd002da0ts32i8tfzt"},{"post_id":"cjtzurefl000ua0tsbfbh1qn6","category_id":"cjtzuregy001wa0tsts6e1o5g","_id":"cjtzurehe002fa0ts6eawwe0t"},{"post_id":"cjtzuree10001a0tsheeywlyb","category_id":"cjtzureeg0004a0tsk17300r8","_id":"cjtzurehf002ga0tsu21qq1ns"},{"post_id":"cjtzuree10001a0tsheeywlyb","category_id":"cjtzurefc000la0tsiczisvel","_id":"cjtzurehh002ia0ts07ne1hdm"},{"post_id":"cjtzuree10001a0tsheeywlyb","category_id":"cjtzuregy001wa0tsts6e1o5g","_id":"cjtzurehi002ja0tsfuwzfmtf"},{"post_id":"cjtzurefo000wa0tszkjgn8d3","category_id":"cjtzureeg0004a0tsk17300r8","_id":"cjtzurehl002la0ts49v4rw0c"},{"post_id":"cjtzurefo000wa0tszkjgn8d3","category_id":"cjtzurefc000la0tsiczisvel","_id":"cjtzurehm002ma0ts8p2dcy1n"},{"post_id":"cjtzurefo000wa0tszkjgn8d3","category_id":"cjtzuregy001wa0tsts6e1o5g","_id":"cjtzurehn002oa0tsewmbszsw"},{"post_id":"cjtzureer0008a0tsm6yklueo","category_id":"cjtzureeg0004a0tsk17300r8","_id":"cjtzureho002pa0tswarpxrtm"},{"post_id":"cjtzureer0008a0tsm6yklueo","category_id":"cjtzurefc000la0tsiczisvel","_id":"cjtzurehp002qa0tsvhgg90wc"},{"post_id":"cjtzureer0008a0tsm6yklueo","category_id":"cjtzuregy001wa0tsts6e1o5g","_id":"cjtzurehr002sa0ts0w5nwg7b"},{"post_id":"cjtzuref0000ca0ts1bfxwyjv","category_id":"cjtzureeg0004a0tsk17300r8","_id":"cjtzurehs002ta0tsrlsx7b7k"},{"post_id":"cjtzuref0000ca0ts1bfxwyjv","category_id":"cjtzurefc000la0tsiczisvel","_id":"cjtzurehv002va0tsz4eqdfhx"},{"post_id":"cjtzuref0000ca0ts1bfxwyjv","category_id":"cjtzuregy001wa0tsts6e1o5g","_id":"cjtzurehy002wa0tsudgcz3dj"},{"post_id":"cjtzureeb0003a0tsiql9121x","category_id":"cjtzureeg0004a0tsk17300r8","_id":"cjtzurei0002ya0ts1a3eyfmb"},{"post_id":"cjtzureeb0003a0tsiql9121x","category_id":"cjtzurefc000la0tsiczisvel","_id":"cjtzurei1002za0tsbb4bs8zg"},{"post_id":"cjtzureeb0003a0tsiql9121x","category_id":"cjtzuregy001wa0tsts6e1o5g","_id":"cjtzurei20031a0tsbm0eh8cs"},{"post_id":"cjtzuref2000ea0tsmnumpuv8","category_id":"cjtzuregf001ea0tstvu499md","_id":"cjtzurei30032a0tstwshnehk"},{"post_id":"cjtzuref2000ea0tsmnumpuv8","category_id":"cjtzurehn002na0tscqfvlo8k","_id":"cjtzurei40034a0tslz05ns3s"},{"post_id":"cjtzuref7000ia0ts0am2dkki","category_id":"cjtzuregf001ea0tstvu499md","_id":"cjtzurei50035a0tspqwl6km3"},{"post_id":"cjtzuref7000ia0ts0am2dkki","category_id":"cjtzurehn002na0tscqfvlo8k","_id":"cjtzurei60036a0ts1svvoaug"},{"post_id":"cjtzureel0006a0ts37lddgs1","category_id":"cjtzureeg0004a0tsk17300r8","_id":"cjtzurei60037a0tsmv5cx4fw"},{"post_id":"cjtzureel0006a0ts37lddgs1","category_id":"cjtzurefc000la0tsiczisvel","_id":"cjtzurei70038a0tsihfxiczn"},{"post_id":"cjtzureel0006a0ts37lddgs1","category_id":"cjtzuregy001wa0tsts6e1o5g","_id":"cjtzurei70039a0tsw5s41rsx"},{"post_id":"cjtzurefa000ka0tsf8rdpwo5","category_id":"cjtzuregf001ea0tstvu499md","_id":"cjtzurei8003aa0tsohro6b8r"},{"post_id":"cjtzurefa000ka0tsf8rdpwo5","category_id":"cjtzurehy002xa0ts9zaegkzz","_id":"cjtzurei8003ba0tsgconzxt0"},{"post_id":"cjtzureff000oa0ts8y3nlfc0","category_id":"cjtzuregf001ea0tstvu499md","_id":"cjtzurei9003ca0ts2o7498ji"},{"post_id":"cjtzureff000oa0ts8y3nlfc0","category_id":"cjtzurehn002na0tscqfvlo8k","_id":"cjtzurei9003da0tswwsc2vxc"},{"post_id":"cjtzurefh000qa0tska8uajft","category_id":"cjtzuregf001ea0tstvu499md","_id":"cjtzureia003ea0tsuaykq528"},{"post_id":"cjtzurefh000qa0tska8uajft","category_id":"cjtzurehn002na0tscqfvlo8k","_id":"cjtzureib003fa0ts2qx3tgra"}],"PostTag":[{"post_id":"cjtzureep0007a0tsbkkd4ixa","tag_id":"cjtzureek0005a0tsnig8jl2a","_id":"cjtzureez000ba0tspkl8dfz7"},{"post_id":"cjtzuree10001a0tsheeywlyb","tag_id":"cjtzureek0005a0tsnig8jl2a","_id":"cjtzuref1000da0tstevsu12s"},{"post_id":"cjtzureer0008a0tsm6yklueo","tag_id":"cjtzureek0005a0tsnig8jl2a","_id":"cjtzuref6000ha0ts1hzr2bn3"},{"post_id":"cjtzuref0000ca0ts1bfxwyjv","tag_id":"cjtzureek0005a0tsnig8jl2a","_id":"cjtzuref9000ja0tso4rb7fv8"},{"post_id":"cjtzureeb0003a0tsiql9121x","tag_id":"cjtzureek0005a0tsnig8jl2a","_id":"cjtzurefe000na0tsvyp013vu"},{"post_id":"cjtzureel0006a0ts37lddgs1","tag_id":"cjtzureek0005a0tsnig8jl2a","_id":"cjtzurefh000pa0tsw1vc82a6"},{"post_id":"cjtzureff000oa0ts8y3nlfc0","tag_id":"cjtzurefd000ma0tscsstu84f","_id":"cjtzurefl000ta0tsltjdddg8"},{"post_id":"cjtzuref2000ea0tsmnumpuv8","tag_id":"cjtzurefd000ma0tscsstu84f","_id":"cjtzurefn000va0tsfimwf93h"},{"post_id":"cjtzurefl000ua0tsbfbh1qn6","tag_id":"cjtzureek0005a0tsnig8jl2a","_id":"cjtzureft000za0ts9fuof020"},{"post_id":"cjtzuref7000ia0ts0am2dkki","tag_id":"cjtzurefk000sa0tsr0topnea","_id":"cjtzurefw0011a0tstqgoawqs"},{"post_id":"cjtzurefo000wa0tszkjgn8d3","tag_id":"cjtzureek0005a0tsnig8jl2a","_id":"cjtzureg00014a0ts5pjvgm2z"},{"post_id":"cjtzurefa000ka0tsf8rdpwo5","tag_id":"cjtzurefs000ya0ts2juqmgmp","_id":"cjtzureg50017a0tsgh83uwwa"},{"post_id":"cjtzurefh000qa0tska8uajft","tag_id":"cjtzurefd000ma0tscsstu84f","_id":"cjtzuregd001ca0tse54un92n"},{"post_id":"cjtzurefh000qa0tska8uajft","tag_id":"cjtzureg10015a0tsbqrwp8mv","_id":"cjtzuregg001fa0tsm8q7z1vf"},{"post_id":"cjtzurefu0010a0ts4onu0vau","tag_id":"cjtzuregb001ba0tsigc0nnd4","_id":"cjtzuregr001ma0tsoebfeyqo"},{"post_id":"cjtzurefu0010a0ts4onu0vau","tag_id":"cjtzuregj001ha0ts0xplnvlk","_id":"cjtzuregs001oa0tsri8qt8n6"},{"post_id":"cjtzureg20016a0tskohi0wuy","tag_id":"cjtzuregp001la0ts1klf35r0","_id":"cjtzuregu001ra0tsp1eyltsh"},{"post_id":"cjtzureg60018a0tsadex7rw3","tag_id":"cjtzuregp001la0ts1klf35r0","_id":"cjtzuregw001ua0ts8k7j56hg"},{"post_id":"cjtzureg9001aa0ts47ocbjgf","tag_id":"cjtzuregp001la0ts1klf35r0","_id":"cjtzuregz001xa0ts354ka8a6"},{"post_id":"cjtzuregd001da0tsyn4zm692","tag_id":"cjtzuregp001la0ts1klf35r0","_id":"cjtzureh1001za0ts3rncpp43"},{"post_id":"cjtzuregh001ga0ts4hlghi7o","tag_id":"cjtzuregp001la0ts1klf35r0","_id":"cjtzureh40022a0tsnr79py3b"},{"post_id":"cjtzuregl001ia0ts1tqvtgb9","tag_id":"cjtzuregp001la0ts1klf35r0","_id":"cjtzureh90027a0ts06ypcho4"},{"post_id":"cjtzuregn001ka0tsn14hzwif","tag_id":"cjtzuregp001la0ts1klf35r0","_id":"cjtzurehb002aa0tsgscw3jnk"}],"Tag":[{"name":"计算机","_id":"cjtzureek0005a0tsnig8jl2a"},{"name":"数组","_id":"cjtzurefd000ma0tscsstu84f"},{"name":"字符串","_id":"cjtzurefk000sa0tsr0topnea"},{"name":"堆栈","_id":"cjtzurefs000ya0ts2juqmgmp"},{"name":"数学归纳法","_id":"cjtzureg10015a0tsbqrwp8mv"},{"name":"堆","_id":"cjtzuregb001ba0tsigc0nnd4"},{"name":"栈","_id":"cjtzuregj001ha0ts0xplnvlk"},{"name":"生活","_id":"cjtzuregp001la0ts1klf35r0"}]}}