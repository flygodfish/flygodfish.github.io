1.中值也称中位数
如果数据是奇数个，那大小最中间那个就是
如果数据是偶数个，那个取中间2位的平均值
2.标准差（Standard Deviation），在概率统计中最常使用作为统计分布程度（statistical dispersion）上的测量
假设有一组数值X₁,X₂,X₃,......Xn（皆为实数），其平均值（算术平均值）为μ，公式如图1。
标准差也被称为标准偏差，或者实验标准差。
3.from sklearn.cross_validation import train_test_split
# 避免过拟合，采用交叉验证，验证集占训练集20%，固定随机种子（random_state)  
train_X,test_X, train_y, test_y = train_test_split(train,  
                                                   target,  
                                                   test_size = 0.2,  
                                                   random_state = 0) 
4.线性回归
from sklearn.cross_validation import StratifiedKFold
from sklearn import linear_model
lineaM = linear_model.LinearRegression()
scores = []
kfold = StratifiedKFold(y=prices,n_folds=8,random_state=1)

for k, (train,test) in enumerate(kfold):
    lineaM.train.fit(features.as_matrix()[train],prices.as_matrix()[train])
    y_pred = lineaM.predict(features.as_matrix()[test])
    score = r2_score(prices.as_matrix()[test],y_pred)
    scores.append(score)
print(scores)  
多项式回归 ---成绩提高！
from sklearn.metrics import r2_score
import numpy as np
from sklearn.preprocessing import PolynomialFeatures
from sklearn import linear_model

lineaM = linear_model.LinearRegression()
polyM = PolynomialFeatures(degree=1)
scores = []
kfold = StratifiedKFold(y=prices,n_folds=8,random_state=1)

for k, (train,test) in enumerate(kfold):
    xx_train = polyM.fit_transform(features.as_matrix()[train])
    yy_train = prices.as_matrix()[train]
    xx_test = polyM.fit_transform(features.as_matrix()[test])
    yy_test = prices.as_matrix()[test]
    lineaM.fit(xx_train,yy_train)
    score = lineaM.score(xx_test,yy_test)
    scores.append(score)
print(scores) 
5. k-folds
https://github.com/basicv8vc/Python-Machine-Learning-zh/blob/master/%E7%AC%AC%E5%85%AD%E7%AB%A0/ch6_section2.md
6.python3.x中移除了cPickle模块，可以使用pickle模块代替。最终我们将会有一个透明高效的模块。
python 2.x
import cPickle as pickle
pickle.load(file)
python 3.x
import pickle as pickle
pickle.load(file,encoding='iso-8859-1')
http://blog.csdn.net/programmer_wei/article/details/50994318
http://blog.csdn.net/programmer_wei/article/details/50994318
