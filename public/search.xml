<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>硬汉计划第七天</title>
      <link href="/2019/04/02/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E4%B8%83%E5%A4%A9/"/>
      <url>/2019/04/02/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E4%B8%83%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>跑步9.41公里， 40个俯卧撑， 0个仰卧起坐， 0个深蹲</p><p><img src="/2019/04/02/硬汉计划第七天/jiayou.jpg" alt><br><a id="more"></a></p><p>跑步渐入佳境~~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学专栏课外加餐（二） | 位操作的三个应用实例</title>
      <link href="/2019/03/31/%E6%95%B0%E5%AD%A6%E4%B8%93%E6%A0%8F%E8%AF%BE%E5%A4%96%E5%8A%A0%E9%A4%90%EF%BC%88%E4%BA%8C%EF%BC%89-%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E4%B8%AA%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/03/31/%E6%95%B0%E5%AD%A6%E4%B8%93%E6%A0%8F%E8%AF%BE%E5%A4%96%E5%8A%A0%E9%A4%90%EF%BC%88%E4%BA%8C%EF%BC%89-%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E4%B8%AA%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>位操作应用实例</p><a id="more"></a><!-- 文章 --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><h2 id="位操作应用实例"><a href="#位操作应用实例" class="headerlink" title="位操作应用实例"></a>位操作应用实例</h2><h3 id="验证奇偶数"><a href="#验证奇偶数" class="headerlink" title="验证奇偶数"></a>验证奇偶数</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>1.<br>2.<br>3.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">### 交换两个变量</span><br><span class="line"></span><br><span class="line">#### 思路</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.</span><br><span class="line"><span class="number">2</span>.</span><br><span class="line"><span class="number">3</span>.</span><br><span class="line"></span><br><span class="line">#### 代码</span><br><span class="line"></span><br><span class="line">```java</span><br></pre></td></tr></table></figure><h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>1.<br>2.<br>3.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre><code class="java"></code></pre><h2 id="二分法查找的细节"><a href="#二分法查找的细节" class="headerlink" title="二分法查找的细节"></a>二分法查找的细节</h2><p>取mid值得时候不要使用 (low + high)/2<br>而是使用 low + (high - low) /2 </p><p><img src="/2019/03/31/数学专栏课外加餐（二）-位操作的三个应用实例/1.jpg" alt></p><p>理由是：如果low和high都很大时，会造成溢出！<br>而上面的公式 可以看出 2low/2 + (high - low)/2 = (high + low)/2</p><h2 id="关于迭代和数学归纳法和递归"><a href="#关于迭代和数学归纳法和递归" class="headerlink" title="关于迭代和数学归纳法和递归"></a>关于迭代和数学归纳法和递归</h2><p>迭代一般使用与正向思维。<br>递归一般使用与逆向思维。<br>某些重复性计算可以使用数学归纳法做。</p><p>可以遵循的原则是：</p><p>1.如果这个问题可以被迭代法完成，并且是关于数值型的，可以假设命题并尝试用数学归纳法来做。<br>2.如果需要借助计算机来算，首先尝试使用迭代法做，但是如果问题过于复杂，如有很多中间过程变量，可以尝试细化问题，并使用递归来解决。<br>3.如果数据过大，就尝试使用分治的思想来做！</p><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1>]]></content>
      
      
      <categories>
          
          <category> 网络学习 </category>
          
          <category> 极客时间 </category>
          
          <category> 程序员的数学基础课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学专栏课外加餐（一） | 我们为什么需要反码和补码？</title>
      <link href="/2019/03/31/%E6%95%B0%E5%AD%A6%E4%B8%93%E6%A0%8F%E8%AF%BE%E5%A4%96%E5%8A%A0%E9%A4%90%EF%BC%88%E4%B8%80%EF%BC%89-%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81%EF%BC%9F/"/>
      <url>/2019/03/31/%E6%95%B0%E5%AD%A6%E4%B8%93%E6%A0%8F%E8%AF%BE%E5%A4%96%E5%8A%A0%E9%A4%90%EF%BC%88%E4%B8%80%EF%BC%89-%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>反码和补码的补充</p><a id="more"></a><!-- 文章 --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h2 id="什么是符号位？为什么要符号位？"><a href="#什么是符号位？为什么要符号位？" class="headerlink" title="什么是符号位？为什么要符号位？"></a>什么是符号位？为什么要符号位？</h2><p>符号位就是二进制中最高的一位，用来表示数字的正负。</p><h2 id="什么是溢出？-溢出后会发生什么？"><a href="#什么是溢出？-溢出后会发生什么？" class="headerlink" title="什么是溢出？ 溢出后会发生什么？"></a>什么是溢出？ 溢出后会发生什么？</h2><p>java int的最大值上线就是2^31 - 1（虽然有32位，但是最高位为符号位！）<br>为什么会是2^31呢？ 看04数学归纳法可知： 最大值就是 01…1那么结果就是2^30 + 2^29 + 1 = 2^31 - 1<br>最小值也就是下限是-2^31<br>最小值存在补码现象</p><p>上溢出 + 1 溢出后 变成符号位为1,其余位数为0，也就是下溢出的值了。</p><p><img src="/2019/03/31/数学专栏课外加餐（一）-我们为什么需要反码和补码？/1.jpg" alt></p><h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><h2 id="二进制的源码，反码，补码"><a href="#二进制的源码，反码，补码" class="headerlink" title="二进制的源码，反码，补码"></a>二进制的源码，反码，补码</h2><p>源码就是二进制的原始表示。<br>反码就是除符号位按位取反。<br>补码就是在反码的基础上+1</p><h2 id="上溢出和下溢出"><a href="#上溢出和下溢出" class="headerlink" title="上溢出和下溢出"></a>上溢出和下溢出</h2><p>超出上限叫上溢出<br>超出下限叫下溢出</p><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1>]]></content>
      
      
      <categories>
          
          <category> 网络学习 </category>
          
          <category> 极客时间 </category>
          
          <category> 程序员的数学基础课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06 | 递归（下）：分而治之，从归并排序到MapReduce</title>
      <link href="/2019/03/31/06-%E9%80%92%E5%BD%92%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B%EF%BC%8C%E4%BB%8E%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%88%B0MapReduce/"/>
      <url>/2019/03/31/06-%E9%80%92%E5%BD%92%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%88%86%E8%80%8C%E6%B2%BB%E4%B9%8B%EF%BC%8C%E4%BB%8E%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%88%B0MapReduce/</url>
      
        <content type="html"><![CDATA[<p>复杂的问题可以通过化简来逐步求解。</p><a id="more"></a><!-- 文章 --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>今天主要讲分而治之的思想。<br>归并排序使用了分治的思想，而这个过程需要使用递归来实现。</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h2 id="什么是归并排序？"><a href="#什么是归并排序？" class="headerlink" title="什么是归并排序？"></a>什么是归并排序？</h2><p>主要思想是将2个有序数组进行合并，再次之前一直将数组拆分成2个，直到只存在一个长度的数组，那么这个数组必然是有序的。<br>然后在慢慢有序的合并。</p><h2 id="通过归并排序，如何合并有序数组-1-2-5-8-和-3-4-6-？"><a href="#通过归并排序，如何合并有序数组-1-2-5-8-和-3-4-6-？" class="headerlink" title="通过归并排序，如何合并有序数组{1,2,5,8} 和{3,4,6}？"></a>通过归并排序，如何合并有序数组{1,2,5,8} 和{3,4,6}？</h2><p><img src="/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/1.jpg" alt></p><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>1.通过递归来完成归并排序，主要1个函数进行递归，还要个函数进行数组的合并排序<br>2.guibing_sort这个方法先进行数组分割，分割到最小，也就是第一次循环merge的时候start到end只有2个数组长度<br>3.然后合并的过程函数就是上面图上的过程</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">guibing2_sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        guibing_sort(a, <span class="number">0</span>, a.length- <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">guibing_sort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="comment">//不能相等 因为做right归并时用了mid+1!,不然会报错得。</span></span><br><span class="line">        <span class="keyword">if</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) /<span class="number">2</span> ;</span><br><span class="line">            guibing_sort(nums, start, mid);</span><br><span class="line">            guibing_sort(nums, mid + <span class="number">1</span>, end);</span><br><span class="line">            merge(nums, start, mid, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> mid, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] left_arr = <span class="keyword">new</span> <span class="keyword">int</span>[mid- start+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> ls = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> le = left_arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; mid + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            left_arr[ls] = nums[i];</span><br><span class="line">            ls ++;</span><br><span class="line">        &#125;</span><br><span class="line">        ls = <span class="number">0</span>;</span><br><span class="line">        le = left_arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] right_arr = <span class="keyword">new</span> <span class="keyword">int</span>[end-mid];</span><br><span class="line">        <span class="keyword">int</span> rs = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> re = right_arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt; end + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            right_arr[rs] = nums[i];</span><br><span class="line">            rs ++;</span><br><span class="line">        &#125;</span><br><span class="line">        rs = <span class="number">0</span>;</span><br><span class="line">        re = right_arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[end -start + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> ts = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ls &lt;= le &amp;&amp; rs &lt;= re)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left_arr[ls] &lt;= right_arr[rs])&#123;</span><br><span class="line">                tmp[ts] = left_arr[ls];</span><br><span class="line">                ls ++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tmp[ts] = right_arr[rs];</span><br><span class="line">                rs ++;</span><br><span class="line">            &#125;</span><br><span class="line">            ts++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(le &lt; ls)&#123;</span><br><span class="line">            tmp[ts] = right_arr[rs];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(re &lt; rs)&#123;</span><br><span class="line">            tmp[ts] = left_arr[ls];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class="line">            nums[start] = tmp[i];</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><h2 id="分而治之的思想"><a href="#分而治之的思想" class="headerlink" title="分而治之的思想"></a>分而治之的思想</h2><p>简称分治。<br>将一个复杂的问题分解为两个或者更多的相同规模的子问题。<br>然后对这些子问题在细分，知道很容易被求解了，这样复杂的问题也就能得到解决。<br>分治主要用递归来实现。</p><h2 id="分布式系统分治思想"><a href="#分布式系统分治思想" class="headerlink" title="分布式系统分治思想"></a>分布式系统分治思想</h2><p>如果排序的数组很大，大到超过内存。<br>那么我们就可以用分治的思想来做，吧这个数据集分解成很多小份，计算能胜任的大小。<br>并行处理，然后在各个机器上处理完后，一个一个返回结果即可。</p><h2 id="MapReduce主要的三个步骤体现了分布的思想"><a href="#MapReduce主要的三个步骤体现了分布的思想" class="headerlink" title="MapReduce主要的三个步骤体现了分布的思想"></a>MapReduce主要的三个步骤体现了分布的思想</h2><p><img src="/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/2.jpg" alt></p><h3 id="1-数据分割和映射"><a href="#1-数据分割和映射" class="headerlink" title="1.数据分割和映射"></a>1.数据分割和映射</h3><p>将数据源切片，主要讲内容变成key-value的形式匹配然后存储到哈希结构中。<br>主要降低了每台机器的负载。</p><h3 id="2-归约"><a href="#2-归约" class="headerlink" title="2.归约"></a>2.归约</h3><p>就是将key相同的内容匹配，然后将value归并</p><h3 id="3-合并"><a href="#3-合并" class="headerlink" title="3.合并"></a>3.合并</h3><p>为了减少发送到归约阶段的key-value，现在本地将key-value进行一次合并。</p><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？"><a href="#归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？" class="headerlink" title="归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？"></a>归并的时候将原有的数组分解为2组，而不是更多组，只是为什么？分成多个组可以吗？</h2><p>因为在合并阶段最小的合并就是2个长度为1的数组进行合并，而不是3个一起合并，可以分成多个组。<br>但是这样会产生更多的中间结果，计算也会变得更复杂，得不偿失</p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序就是随意选一个基准，然后遍历整个数组，把大于基准的数值放到基准的右边，把小于基准的数值放到基准的左边</p><h3 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h3><p>1.基准可以随意选，但是我这里的基准选的就是此数组的第一个也就是下标为0的数值作为基准<br>2.然后函数的返回值应该是重新洗牌后的下标，也就是上面的下标基准拍完后的下标的值。<br>3.也是使用递归函数，结束的标准就是2个指针一个初始指针一个结尾指针。初始指针的值小于结束指针的值，如果大于着结束return</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">kuaisu_sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">77</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">kuaisu_sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid_index = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = a[mid_index];</span><br><span class="line">        <span class="keyword">int</span>[] min = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        <span class="keyword">int</span> min_index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] max = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        <span class="keyword">int</span> max_index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] same = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        <span class="keyword">int</span> same_index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; mid) &#123;</span><br><span class="line">                min[min_index] = a[i];</span><br><span class="line">                min_index++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; mid) &#123;</span><br><span class="line">                max[max_index] = a[i];</span><br><span class="line">                max_index++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                same[same_index] = a[i];</span><br><span class="line">                same_index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        merge_arr(a, min, min_index, max, max_index, same, same_index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min_index + same_index;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> lo ,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lo&gt;=hi)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = kuaisu_sort(array,lo,hi);</span><br><span class="line">        sort(array,lo,index-<span class="number">1</span>);</span><br><span class="line">        sort(array,index+<span class="number">1</span>,hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge_arr</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] min, <span class="keyword">int</span> min_index, <span class="keyword">int</span>[] max, <span class="keyword">int</span> max_index, <span class="keyword">int</span>[] same, <span class="keyword">int</span> same_index)</span></span>&#123;</span><br><span class="line">         System.arraycopy(min, <span class="number">0</span>, a, <span class="number">0</span>,min_index );</span><br><span class="line">         System.arraycopy(same, <span class="number">0</span>, a, min_index,same_index );</span><br><span class="line">         System.arraycopy(max, <span class="number">0</span>, a, min_index + same_index , max_index );</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="/2019/03/31/06-递归（下）：分而治之，从归并排序到MapReduce/lesson6.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 网络学习 </category>
          
          <category> 极客时间 </category>
          
          <category> 程序员的数学基础课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬汉计划第六天</title>
      <link href="/2019/03/31/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E5%85%AD%E5%A4%A9/"/>
      <url>/2019/03/31/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E5%85%AD%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>跑步0公里， 60个俯卧撑， 0个仰卧起坐， 100个深蹲</p><p><img src="/2019/03/31/硬汉计划第六天/jiayou.png" alt><br><a id="more"></a></p><p>感觉脚没啥力气，不要跑了，明天跑！今天主要是恢复期！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬汉计划第五天</title>
      <link href="/2019/03/30/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E4%BA%94%E5%A4%A9/"/>
      <url>/2019/03/30/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>跑步9.23公里， 0个俯卧撑， 0个仰卧起坐， 100个深蹲</p><p><img src="/2019/03/30/硬汉计划第五天/jiayou.jpg" alt><br><a id="more"></a></p><p>脚休息了2天终于出去跑步啦， 戴上了髌骨带，一开始没啥，后面跑了1公里，感觉有点紧，<br>需要放松，并且上提，不然感觉会伤。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬汉计划第四天</title>
      <link href="/2019/03/29/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
      <url>/2019/03/29/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>跑步0公里， 4个俯卧撑， 50个仰卧起坐， 100个深蹲<br>身体需要休息。</p><p><img src="/2019/03/29/硬汉计划第四天/jiayou.jpg" alt><br><a id="more"></a></p><p>牛肉到了，感觉还行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode面试题-05</title>
      <link href="/2019/03/29/Leetcode%E9%9D%A2%E8%AF%95%E9%A2%98-05/"/>
      <url>/2019/03/29/Leetcode%E9%9D%A2%E8%AF%95%E9%A2%98-05/</url>
      
        <content type="html"><![CDATA[<p>栈先进后出，堆先进先出<br><a id="more"></a><br><!-- 面试题 --></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p><pre><code>push(x) -- 将元素 x 推入栈中。pop() -- 删除栈顶的元素。top() -- 获取栈顶元素。getMin() -- 检索栈中的最小元素。</code></pre><p>示例:</p><p>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      –&gt; 返回 0.<br>minStack.getMin();   –&gt; 返回 -2.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.做一个辅助栈，保存最小值，还有一个栈正常push,pop<br>2.当放入的值和最小栈最上面的值比较，如果比最小栈上的值小，则放入正常栈的同时也放入最小栈</p><h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">        Stack normal_stack  = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack min_stack  = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            normal_stack.push(x);</span><br><span class="line">            <span class="keyword">if</span>(min_stack.isEmpty())&#123;</span><br><span class="line">                min_stack.push(x);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> last_min = (<span class="keyword">int</span>)min_stack.peek();</span><br><span class="line">                <span class="keyword">if</span>(last_min &gt;= x)&#123;</span><br><span class="line">                    min_stack.push(x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> is_min = (<span class="keyword">int</span>)normal_stack.peek();</span><br><span class="line">            <span class="keyword">int</span> last_min = (<span class="keyword">int</span>)min_stack.peek();</span><br><span class="line">            normal_stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(is_min == last_min)&#123;</span><br><span class="line">                min_stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span>  (<span class="keyword">int</span>)normal_stack.peek();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) min_stack.peek();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="网上的代码"><a href="#网上的代码" class="headerlink" title="网上的代码"></a>网上的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 面试题 --&gt;</span><br><span class="line"></span><br><span class="line"># 问题</span><br><span class="line"></span><br><span class="line">在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>] 和 k = <span class="number">2</span></span><br><span class="line">输出: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>] 和 k = <span class="number">4</span></span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">你可以假设 k 总是有效的，且 <span class="number">1</span> ≤ k ≤ 数组的长度。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 思路</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.简单的方式，进行排序然后选择第k个大的值。</span><br><span class="line"><span class="number">2</span>.这边我使用最大堆得方式，也就是先创建一个数组，大小就是k。这个数组是有序的！！</span><br><span class="line"><span class="number">3</span>.第一次初始化这个最大堆，是要排序的，然后遍历数组，和里面的值比较，如果给定的数组中有大于其中数组的值，则大的值放入最大堆。</span><br><span class="line"><span class="number">4</span>.最后返回k-<span class="number">1</span>下标的值即可。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 自己的代码</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] max_arr = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        init_max_arr(max_arr, nums, k);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k ; i &lt; nums.length; i++) &#123;</span><br><span class="line">            insert(max_arr, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_arr[k - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init_max_arr</span><span class="params">(<span class="keyword">int</span>[] max_arr,<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            max_arr[i] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">while</span> (start&lt; max_arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> second = start + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(max_arr[start] &lt; max_arr[second])&#123;</span><br><span class="line">                tmp = max_arr[start];</span><br><span class="line">                max_arr[start] = max_arr[second];</span><br><span class="line">                max_arr[second] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>[] max_arr, <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">while</span> (start&lt; max_arr.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max_arr[start] &lt; num)&#123;</span><br><span class="line">                tmp = max_arr[start];</span><br><span class="line">                max_arr[start] = num;</span><br><span class="line">                num = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网上的代码-1"><a href="#网上的代码-1" class="headerlink" title="网上的代码"></a>网上的代码</h2><pre><code class="java"></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 堆 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode面试题-04</title>
      <link href="/2019/03/29/Leetcode%E9%9D%A2%E8%AF%95%E9%A2%98-04/"/>
      <url>/2019/03/29/Leetcode%E9%9D%A2%E8%AF%95%E9%A2%98-04/</url>
      
        <content type="html"><![CDATA[<p>数组主要活用下标，可以创建额外的空间<br><a id="more"></a></p><!-- 面试题 --><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。</p><p>示例 1:</p><p>输入: [2,3,-2,4]<br>输出: 6<br>解释: 子数组 [2,3] 有最大乘积 6。</p><p>示例 2:</p><p>输入: [-2,0,-1]<br>输出: 0<br>解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.取最大值进行比较，但是也需要取最小值，因为可能存在最小值为负数然后乘以一个负数变正数，而正数乘以负数就变最小值的情况<br>2.可能遇到的问题就是乘积是可以多个乘积的也就是说数组可以是1个，2个，3个。。。<br>3.中间必须要有个tmp变量值表示上一把最大值，而不是直接用min = Math.min(Math.min(tmp <em> nums[i], min </em> nums[i]), nums[i]);这样出来的最大值是这一次计算的，是不对的！！！！</p><h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>], min = nums[<span class="number">0</span>], result = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = max;</span><br><span class="line">            max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);</span><br><span class="line">            min = Math.min(Math.min(tmp * nums[i], min * nums[i]), nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (max &gt; result) &#123;</span><br><span class="line">                result = max;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网上的代码"><a href="#网上的代码" class="headerlink" title="网上的代码"></a>网上的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 面试题 --&gt;</span><br><span class="line"></span><br><span class="line"># 问题</span><br><span class="line"></span><br><span class="line">给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>] 和 k = <span class="number">3</span></span><br><span class="line">输出: [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">解释:</span><br><span class="line">向右旋转 <span class="number">1</span> 步: [<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">向右旋转 <span class="number">2</span> 步: [<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">向右旋转 <span class="number">3</span> 步: [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: [-<span class="number">1</span>,-<span class="number">100</span>,<span class="number">3</span>,<span class="number">99</span>] 和 k = <span class="number">2</span></span><br><span class="line">输出: [<span class="number">3</span>,<span class="number">99</span>,-<span class="number">1</span>,-<span class="number">100</span>]</span><br><span class="line">解释: </span><br><span class="line">向右旋转 <span class="number">1</span> 步: [<span class="number">99</span>,-<span class="number">1</span>,-<span class="number">100</span>,<span class="number">3</span>]</span><br><span class="line">向右旋转 <span class="number">2</span> 步: [<span class="number">3</span>,<span class="number">99</span>,-<span class="number">1</span>,-<span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 思路</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.旋转数组的思路，首先将所有数组翻转，然后在翻转前K个，最后翻转第K+<span class="number">1</span>个到最后一个即可！</span><br><span class="line"><span class="number">2</span>.可能遇到的问题就是K超过了数组本身的长度。使用取余的方式做</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 自己的代码</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>( k == <span class="number">0</span> || k%nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse_arr(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        reverse_arr(nums, <span class="number">0</span>, (k-<span class="number">1</span>)%nums.length);</span><br><span class="line">        reverse_arr(nums,  k%nums.length , nums.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change_arr</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[start];</span><br><span class="line">        nums[start] = nums[end];</span><br><span class="line">        nums[end] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse_arr</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            change_arr(nums, start, end);</span><br><span class="line">            start ++;</span><br><span class="line">            end --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网上的代码-1"><a href="#网上的代码-1" class="headerlink" title="网上的代码"></a>网上的代码</h2><pre><code class="java"></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬汉计划第三天</title>
      <link href="/2019/03/28/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
      <url>/2019/03/28/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>27号休息了，去吃饭了。（身体巨累）</p><p>跑步0公里， 30个俯卧撑， 40个仰卧起坐， 55个深蹲</p><p><img src="/2019/03/28/硬汉计划第三天/jiayou.jpg" alt><br><a id="more"></a></p><p>脚断了，是真的。两个小腿筋一直一抽一抽的。可能是周二，脚外侧疼的时候，垫脚跑导致的。</p><p>哈麻皮，买了髌骨带和运动耳机。还买了牛排！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬汉计划第二天</title>
      <link href="/2019/03/26/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/2019/03/26/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>跑步7.9公里， 30个俯卧撑， 40个仰卧起坐， 0个深蹲</p><p><img src="/2019/03/26/硬汉计划第二天/jiayou.jpg" alt><br><a id="more"></a></p><p>跑完感觉脚断了，脚掌外侧巨疼，查了后是软组织挫伤导致的。</p><p>先贴点伤筋膏药吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬汉计划第一天</title>
      <link href="/2019/03/25/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/2019/03/25/%E7%A1%AC%E6%B1%89%E8%AE%A1%E5%88%92%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。<br><img src="/2019/03/25/硬汉计划第一天/yiquan.jpg" alt><br><a id="more"></a></p><p>看了微博的一片文章，硬汉挑战计划<br>具体实施内容<br>每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。</p><p>准备循序渐进。</p><p>从家附近的操场跑起。 准备分level.</p><p>lv1  每天1公里， 10个俯卧撑， 10个仰卧起坐， 10个深蹲。<br>lv2  每天2公里， 20个俯卧撑， 20个仰卧起坐， 20个深蹲。<br>lv3  每天3公里， 30个俯卧撑， 30个仰卧起坐， 30个深蹲。<br>lv4  每天4公里， 40个俯卧撑， 40个仰卧起坐， 40个深蹲。<br>lv5  每天5公里， 50个俯卧撑， 50个仰卧起坐， 50个深蹲。<br>lv6  每天6公里， 60个俯卧撑， 60个仰卧起坐， 60个深蹲。<br>lv7  每天7公里， 70个俯卧撑， 70个仰卧起坐， 70个深蹲。<br>lv8  每天8公里， 80个俯卧撑， 80个仰卧起坐， 80个深蹲。<br>lv9  每天9公里， 90个俯卧撑， 90个仰卧起坐， 90个深蹲。<br>lv10  每天10公里， 100个俯卧撑， 100个仰卧起坐， 100个深蹲。</p><p>结果第一天，好久没锻炼了。</p><p>跑步lv7  7.0公里跑的够呛。。<br>俯卧撑lv3 30个，跑完之后做的，完全没劲。。<br>深蹲lv0  没做。。。。<br>仰卧起坐lv0 没做。。。。</p><p>多加一个引体向上<br>lv0  4个。。我日啊难的一批。</p><p>跑步用的悦跑圈。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode面试题-03</title>
      <link href="/2019/03/24/Leetcode%E9%9D%A2%E8%AF%95%E9%A2%98-03/"/>
      <url>/2019/03/24/Leetcode%E9%9D%A2%E8%AF%95%E9%A2%98-03/</url>
      
        <content type="html"><![CDATA[<p>Leetcode 算法 - 字符串<br><a id="more"></a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p><p>说明：本题中，我们将空字符串定义为有效的回文串。</p><p>示例 1:</p><p>输入: “A man, a plan, a canal: Panama”<br>输出: true<br>示例 2:</p><p>输入: “race a car”<br>输出: false</p><p>回文串的解释：</p><p>正过来和反过来的字符串一致，不算特殊符号</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.使用双指针，一个指向前一个指向后<br>2.同时往前和后，比较，如果遇到非字母和数字的就向下移，然后比较指针的值</p><h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String cs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">char</span>[] cs_c = cs.toLowerCase().toCharArray();</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = cs_c.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(right &lt; cs_c.length &amp;&amp; left &gt;=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> tmp = cs_c[right];</span><br><span class="line">        <span class="keyword">char</span> tmp2 = cs_c[left];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!Pattern.matches(<span class="string">"[a-z0-9]"</span>, String.valueOf(tmp)) &amp;&amp; right &lt; cs_c.length - <span class="number">1</span>)&#123;</span><br><span class="line">            right++;</span><br><span class="line">            tmp = cs_c[right];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!Pattern.matches(<span class="string">"[a-z0-9]"</span>, String.valueOf(tmp2)) &amp;&amp; left &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            left--;</span><br><span class="line">            tmp2 = cs_c[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!Pattern.matches(<span class="string">"[a-z0-9]"</span>, String.valueOf(tmp2)))&#123;</span><br><span class="line">            tmp2 = <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!Pattern.matches(<span class="string">"[a-z0-9]"</span>, String.valueOf(tmp)))&#123;</span><br><span class="line">            tmp = <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!String.valueOf(tmp).equals(String.valueOf(tmp2)))&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        right++;</span><br><span class="line">        left--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网上的代码"><a href="#网上的代码" class="headerlink" title="网上的代码"></a>网上的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 面试题 --&gt;</span><br><span class="line"></span><br><span class="line"># 问题</span><br><span class="line"></span><br><span class="line">给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</span><br><span class="line"></span><br><span class="line">返回 s 所有可能的分割方案。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: <span class="string">"aab"</span></span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [<span class="string">"aa"</span>,<span class="string">"b"</span>],</span><br><span class="line">  [<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 思路</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.主思想是递归。 返回值是[[<span class="string">'m'</span>,<span class="string">'m'</span>,<span class="string">'a'</span>,<span class="string">'n'</span>],[<span class="string">'mm'</span>,<span class="string">'a'</span>,<span class="string">'n'</span>]]</span><br><span class="line"><span class="number">2</span>.返回list&lt;list&lt;String&gt;&gt;,最后返回的时候，然后主要是add list,完成的list添加进list&lt;list&lt;String&gt;&gt;</span><br><span class="line"><span class="number">3</span>.变量是字符串，当字符串长度为<span class="number">1</span>，或者<span class="number">0</span>的是否返回list&lt;list&lt;String&gt;&gt;</span><br><span class="line"></span><br><span class="line">## 自己的代码</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String cs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">char</span>[] cs_c = cs.toLowerCase().toCharArray();</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = cs_c.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; cs_c.length &amp;&amp; left &gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> tmp = cs_c[right];</span><br><span class="line">            <span class="keyword">char</span> tmp2 = cs_c[left];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(!Pattern.matches(<span class="string">"[a-z0-9]"</span>, String.valueOf(tmp)) &amp;&amp; right &lt; cs_c.length - <span class="number">1</span>)&#123;</span><br><span class="line">                right++;</span><br><span class="line">                tmp = cs_c[right];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!Pattern.matches(<span class="string">"[a-z0-9]"</span>, String.valueOf(tmp2)) &amp;&amp; left &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                left--;</span><br><span class="line">                tmp2 = cs_c[left];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!Pattern.matches(<span class="string">"[a-z0-9]"</span>, String.valueOf(tmp2)))&#123;</span><br><span class="line">                tmp2 = <span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!Pattern.matches(<span class="string">"[a-z0-9]"</span>, String.valueOf(tmp)))&#123;</span><br><span class="line">                tmp = <span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!String.valueOf(tmp).equals(String.valueOf(tmp2)))&#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">            left--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; find_huiwen_str(String s,List&lt;String&gt; list, List&lt;List&lt;String&gt;&gt; llist)&#123;</span><br><span class="line">        <span class="keyword">int</span> s_len ;</span><br><span class="line">        <span class="keyword">if</span>(s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            llist.add(list);</span><br><span class="line">            <span class="keyword">return</span> llist;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s.length() == <span class="number">1</span>)&#123;</span><br><span class="line">            list.add(s);</span><br><span class="line">            llist.add(list);</span><br><span class="line">            <span class="keyword">return</span> llist;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList tmp_list = (ArrayList) list;</span><br><span class="line">        List&lt;String&gt; tl = (List&lt;String&gt;)tmp_list.clone();;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length() ; i++) &#123;</span><br><span class="line">            String tmp = s.substring(<span class="number">0</span>,i);</span><br><span class="line">            <span class="keyword">if</span>(isPalindrome(tmp))&#123;</span><br><span class="line">                tl = (List&lt;String&gt;)tmp_list.clone();</span><br><span class="line">                tl.add(tmp);</span><br><span class="line">                <span class="keyword">int</span> ss = tl.get(tl.size() - <span class="number">1</span>).toString().replace(<span class="string">"["</span>,<span class="string">""</span>).replace(<span class="string">"]"</span>,<span class="string">""</span>).replace(<span class="string">","</span>,<span class="string">""</span>).replace(<span class="string">" "</span>,<span class="string">""</span>).length();</span><br><span class="line">                s_len = s.length();</span><br><span class="line">                String tmp_s = s.substring(ss, s_len);</span><br><span class="line">                find_huiwen_str(tmp_s, tl, llist);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> llist;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; xunhuan_huiwen_str_list(String s, List&lt;List&lt;String&gt;&gt; list) &#123;</span><br><span class="line">        List&lt;String&gt; f_list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list = find_huiwen_str(s, f_list, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; first_list = <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> xunhuan_huiwen_str_list(s, first_list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网上的代码-1"><a href="#网上的代码-1" class="headerlink" title="网上的代码"></a>网上的代码</h2><pre><code class="java"></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode面试题-02</title>
      <link href="/2019/03/20/Leetcode%E9%9D%A2%E8%AF%95%E9%A2%98-02/"/>
      <url>/2019/03/20/Leetcode%E9%9D%A2%E8%AF%95%E9%A2%98-02/</url>
      
        <content type="html"><![CDATA[<p>Leetcode面试题-02  共2道</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p><p>每行的元素从左到右升序排列。<br>每列的元素从上到下升序排列。<br>示例:</p><p>现有矩阵 matrix 如下：</p><p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p><p>给定 target = 5，返回 true。</p><p>给定 target = 20，返回 false。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.从右上角开始运行也就是上面的15开始（也可以是左下角18开始）<br>2.比较目标值如果目标大的就下移，遇到小的就左移</p><h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(matrix.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> hang_index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lie_index =  matrix[<span class="number">0</span>].length -<span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">while</span>(hang_index &lt;  matrix.length &amp;&amp; lie_index &gt;= <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp =matrix[hang_index][lie_index];</span><br><span class="line">            <span class="keyword">if</span>(tmp &lt; target)&#123;</span><br><span class="line">                hang_index ++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp &gt; target)&#123;</span><br><span class="line">                lie_index --;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网上的代码"><a href="#网上的代码" class="headerlink" title="网上的代码"></a>网上的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 问题</span><br><span class="line"></span><br><span class="line">你将获得 K 个鸡蛋，并可以使用一栋从 <span class="number">1</span> 到 N  共有 N 层楼的建筑。</span><br><span class="line"></span><br><span class="line">每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</span><br><span class="line"></span><br><span class="line">你知道存在楼层 F ，满足 <span class="number">0</span> &lt;= F &lt;= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。</span><br><span class="line"></span><br><span class="line">每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 <span class="number">1</span> &lt;= X &lt;= N）。</span><br><span class="line"></span><br><span class="line">你的目标是确切地知道 F 的值是多少。</span><br><span class="line"></span><br><span class="line">无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？</span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：K = <span class="number">1</span>, N = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line">鸡蛋从 <span class="number">1</span> 楼掉落。如果它碎了，我们肯定知道 F = <span class="number">0</span> 。</span><br><span class="line">否则，鸡蛋从 <span class="number">2</span> 楼掉落。如果它碎了，我们肯定知道 F = <span class="number">1</span> 。</span><br><span class="line">如果它没碎，那么我们肯定知道 F = <span class="number">2</span> 。</span><br><span class="line">因此，在最坏的情况下我们需要移动 <span class="number">2</span> 次以确定 F 是多少。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：K = <span class="number">2</span>, N = <span class="number">6</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：K = <span class="number">3</span>, N = <span class="number">14</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= K &lt;= <span class="number">100</span></span><br><span class="line"><span class="number">1</span> &lt;= N &lt;= <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 思路</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>.简单理解 <span class="number">2</span>个鸡蛋，<span class="number">6</span>层，如果二分法，第三层碎了，那么就必须是从<span class="number">1</span>,<span class="number">2</span>层都扔一次鸡蛋随意会有<span class="number">3</span>次步骤</span><br><span class="line"><span class="number">1</span>.选择每m步能求出最大的层数！即使用d[k][m] = 最大的层数 k是鸡蛋 m是步数</span><br><span class="line"><span class="number">2</span>.如果在d[k][m] = X层 摔出鸡蛋 <span class="number">1</span>.碎了 d[k-<span class="number">1</span>][m-<span class="number">1</span>] &lt;= X <span class="number">2</span>.没碎 d[k][m-<span class="number">1</span>] + X &gt; X</span><br><span class="line"><span class="number">3</span>.如果要求d[k][m]的最大的层数，d[k][m] = d[k][m-<span class="number">1</span>] + X = d[k][m-<span class="number">1</span>] + d[k-<span class="number">1</span>][m-<span class="number">1</span>] + <span class="number">1</span>(本层)</span><br><span class="line"></span><br><span class="line">分析<span class="number">2</span>：</span><br><span class="line"><span class="number">1</span>.如果一个鸡蛋，确认有哪层，那就是必须每层都扔一次！所以有d[<span class="number">1</span>][m] = m</span><br><span class="line"><span class="number">2</span>.如果没有鸡蛋，那么没法确认层数 所以有d[<span class="number">0</span>][m] = <span class="number">0</span> 同理d[k][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 自己的代码</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span> <span class="title">superEggDrop</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(K == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(K == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(N==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">int</span>[][] qiu_max_floor = <span class="keyword">new</span> <span class="keyword">int</span>[K+<span class="number">1</span>][N+<span class="number">1</span>];</span><br><span class="line">        qiu_max_floor[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; K + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            qiu_max_floor[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            qiu_max_floor[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                qiu_max_floor[<span class="number">1</span>][j] = j;</span><br><span class="line">                qiu_max_floor[i][j] = qiu_max_floor[i][j-<span class="number">1</span>] + qiu_max_floor[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                tmp = qiu_max_floor[i][j];</span><br><span class="line">                <span class="keyword">if</span>(tmp &gt;= N)&#123;</span><br><span class="line">                    res = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="网上的代码-1"><a href="#网上的代码-1" class="headerlink" title="网上的代码"></a>网上的代码</h2><pre><code class="java"></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 数学归纳法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05 | 递归（上）：泛化数学归纳，如何将复杂问题简单化？</title>
      <link href="/2019/03/17/05-%E9%80%92%E5%BD%92%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E6%B3%9B%E5%8C%96%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%EF%BC%8C%E5%A6%82%E4%BD%95%E5%B0%86%E5%A4%8D%E6%9D%82%E9%97%AE%E9%A2%98%E7%AE%80%E5%8D%95%E5%8C%96%EF%BC%9F/"/>
      <url>/2019/03/17/05-%E9%80%92%E5%BD%92%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E6%B3%9B%E5%8C%96%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%EF%BC%8C%E5%A6%82%E4%BD%95%E5%B0%86%E5%A4%8D%E6%9D%82%E9%97%AE%E9%A2%98%E7%AE%80%E5%8D%95%E5%8C%96%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>在某些情况下，循环和递归是可以相互转换的。</p><a id="more"></a><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h2 id="既然有了迭代，为何还要用递归？"><a href="#既然有了迭代，为何还要用递归？" class="headerlink" title="既然有了迭代，为何还要用递归？"></a>既然有了迭代，为何还要用递归？</h2><p>因为有的时候递归比迭代可以更好的实现需求</p><h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><h2 id="有1-2-5-10元的面额，给定整数N，求出所有可能的面额方式？"><a href="#有1-2-5-10元的面额，给定整数N，求出所有可能的面额方式？" class="headerlink" title="有1,2,5,10元的面额，给定整数N，求出所有可能的面额方式？"></a>有1,2,5,10元的面额，给定整数N，求出所有可能的面额方式？</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1.使用递归，然后返回值就直接print出来<br>2.每条记录print完，使用return表示这个循环结束了<br>3.遍历4个面额，大于0接着遍历，小于0总数说明不是合格的数据也直接return结束训话，只有当为0的时候输出打印list<br>4.每次遍历4个面额时，要克隆list,确保每个分支都能走通</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    pro_all_sum(<span class="number">10</span>, list) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> ArrayList list2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pro_all_sum</span><span class="params">(<span class="keyword">int</span> sum, ArrayList list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class="line">            ArrayList new_list = (ArrayList) list.clone();</span><br><span class="line">            new_list.add(tmp[i]);</span><br><span class="line">            pro_all_sum(sum - tmp[i], new_list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用递归的好处？"><a href="#使用递归的好处？" class="headerlink" title="使用递归的好处？"></a>使用递归的好处？</h2><p>递归就是函数嵌套的使用，可以保存中间状态和变量值</p><h2 id="如何把复杂的问题简化？"><a href="#如何把复杂的问题简化？" class="headerlink" title="如何把复杂的问题简化？"></a>如何把复杂的问题简化？</h2><p>当n=k-1的时候问题已经解决，那么n=k的时候问题如何解决。<br>当n=1的时候问题如何解决</p><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3-用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8-8X1-2X4-4X2-1X2X2X2…"><a href="#一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3-用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8-8X1-2X4-4X2-1X2X2X2…" class="headerlink" title="一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3,用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8,8X1,2X4,4X2,1X2X2X2…"></a>一个整数可以被拆分成多个整数相乘，例如6可以分解为2X3,用递归编程，给定整数n，找出所有的可能解，如给8，输出结果1X8,8X1,2X4,4X2,1X2X2X2…</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>1.和上面的思路差不多，主要关注结束条件和中间的过滤条件<br>2.结束条件就是list &gt; 1才能算相乘， 并且sum == 1的时候表示已经结束了<br>3.中间的条件主要是为了过滤存在1的情况，</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">chengji</span><span class="params">(<span class="keyword">int</span> sum, ArrayList&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!list.contains(<span class="number">1</span>))&#123;</span><br><span class="line">                ArrayList list_new = (ArrayList) list.clone();</span><br><span class="line">                list_new.add(<span class="number">1</span>);</span><br><span class="line">                System.out.println(list_new);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(list.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sum; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; list.contains(<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> tmp = sum %i;</span><br><span class="line">                <span class="keyword">if</span>(tmp == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    ArrayList list_new = (ArrayList) list.clone();</span><br><span class="line">                    list_new.add(i);</span><br><span class="line">                    <span class="keyword">int</span> sum_tmp = sum / i;</span><br><span class="line">                    chengji(sum_tmp, list_new);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="/2019/03/17/05-递归（上）：泛化数学归纳，如何将复杂问题简单化？/lesson5.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 网络学习 </category>
          
          <category> 极客时间 </category>
          
          <category> 程序员的数学基础课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode面试题-01</title>
      <link href="/2019/03/13/Leetcode%E9%9D%A2%E8%AF%95%E9%A2%98-01/"/>
      <url>/2019/03/13/Leetcode%E9%9D%A2%E8%AF%95%E9%A2%98-01/</url>
      
        <content type="html"><![CDATA[<p>Leetcode面试题-01  共3道</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>只出现一次的数字</p><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。<br>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p>示例 1:</p><p>输入: [2,2,1]<br>输出: 1<br>示例 2:</p><p>输入: [4,1,2,1,2]<br>输出: 4</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.所有数组内的数值都做异或处理<br>异或的共性 相同数值做异或为0！</p><h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = nums[<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x =<span class="number">1</span>; x &lt; nums.length; x++)&#123;</span><br><span class="line">            result = result^nums[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h1><p>求众数</p><p>给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于  n/2  的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p><p>示例 1:</p><p>输入: [3,2,3]<br>输出: 3<br>示例 2:</p><p>输入: [2,2,1,1,1,2,2]<br>输出: 2</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>1.遍历一次数组，使用额外存储HASHMAP，key存值，val存计数器<br>2.当计数器超过或等于n/2+1直接跳出循环<br>3.返回得到的结果</p><h2 id="自己的代码-1"><a href="#自己的代码-1" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> result =nums[<span class="number">0</span>] ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(hashMap.containsKey(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = (Integer)hashMap.get(nums[i])+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(tmp &gt;= (nums.length/<span class="number">2</span> +<span class="number">1</span>))&#123;</span><br><span class="line">                    result = nums[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    hashMap.put(nums[i],(Integer)hashMap.get(nums[i])+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                hashMap.put(nums[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h1><p>合并两个有序数组</p><p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p><p>说明:</p><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。<br>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。<br>示例:</p><p>输入:<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3</p><p>输出: [1,2,2,3,5,6]</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>1.使用额外的数组存储比较2个数组的最小值<br>2.每次都取2个数组的头一个，如果小，存入额外的数组<br>3.直到结束，将额外的数组赋值给一开始的数组</p><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>1.直接从m,n处从后往前比较，将比较大的值放入第一个数组的最末位<br>2.和思路一类似</p><h2 id="自己的代码-2"><a href="#自己的代码-2" class="headerlink" title="自己的代码"></a>自己的代码</h2><h3 id="思路二-1"><a href="#思路二-1" class="headerlink" title="思路二"></a>思路二</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = m -<span class="number">1</span> , j = n- <span class="number">1</span>, count = nums1.length - <span class="number">1</span>;<span class="comment">//定义三个指针，分别指向三个数组的第一个元素</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &gt;=<span class="number">0</span> &amp;&amp; j &gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i] &gt;= nums2[j]) &#123;</span><br><span class="line">                nums1[count--] = nums1[i--];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums1[count--] = nums2[j--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"111111"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[count--] = nums1[i--];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[count--] = nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆栈算法面试题</title>
      <link href="/2019/03/11/%E5%A0%86%E6%A0%88%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/03/11/%E5%A0%86%E6%A0%88%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>堆栈面试题：<br>堆是先进后出的。栈是先进先出的。<br><a id="more"></a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.遍历字符串,碰到左括号，push到堆。 碰到右括号，Pop堆得最上层。<br>2.判断pop出来的右括号是不是和碰到的一样</p><h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">check_kuohao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>);</span><br><span class="line">        map.put(<span class="string">'['</span>,<span class="string">']'</span>);</span><br><span class="line">        map.put(<span class="string">'('</span>,<span class="string">')'</span>);</span><br><span class="line">        Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">char</span>[] as = a.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">'['</span> == as[i] || <span class="string">'&#123;'</span> == as[i] || <span class="string">'('</span> == as[i])&#123;</span><br><span class="line">                stack.push(as[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">']'</span> == as[i] || <span class="string">'&#125;'</span> == as[i] || <span class="string">')'</span> == as[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(stack.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">char</span> tmp = (<span class="keyword">char</span>) stack.pop();</span><br><span class="line">                <span class="keyword">if</span>((<span class="keyword">char</span>)map.get(tmp) != as[i])&#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">"[&#123;()]"</span>;</span><br><span class="line">        System.out.println(check(a));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网上好的代码"><a href="#网上好的代码" class="headerlink" title="网上好的代码"></a>网上好的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> aChar : chars) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                stack.push(aChar);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSym(stack.peek(), aChar)) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(aChar);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSym</span><span class="params">(<span class="keyword">char</span> c1, <span class="keyword">char</span> c2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (c1 == <span class="string">'('</span> &amp;&amp; c2 == <span class="string">')'</span>) || (c1 == <span class="string">'['</span> &amp;&amp; c2 == <span class="string">']'</span>) || (c1 == <span class="string">'&#123;'</span> &amp;&amp; c2 == <span class="string">'&#125;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h1><p>用两个栈来实现一个队列，完成队列的 Push 和 Pop 操作</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>1.一个堆插入数字，然后pop到第二个堆<br>2.这样第二个堆pop出来的数字就是第一个插入的</p><h2 id="自己的代码-1"><a href="#自己的代码-1" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">two_stack_queue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>  Stack stack1 = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">static</span> Stack stack2 = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queue_push</span><span class="params">(String a )</span></span>&#123;</span><br><span class="line">        stack1.push(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">queue_pop</span><span class="params">(String a )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack2.size() == <span class="number">0</span> &amp;&amp; stack1.size() != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(stack1.size() != <span class="number">0</span>)&#123;</span><br><span class="line">                Object tmp = stack1.pop();</span><br><span class="line">                stack2.push(tmp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(stack2.size() == <span class="number">0</span> &amp;&amp; stack1.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> NullPointerException.class;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网上的代码"><a href="#网上的代码" class="headerlink" title="网上的代码"></a>网上的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; in = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">Stack&lt;Integer&gt; out = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">    in.push(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (out.isEmpty())</span><br><span class="line">        <span class="keyword">while</span> (!in.isEmpty())</span><br><span class="line">            out.push(in.pop());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (out.isEmpty())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"queue is empty"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h1><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。<br>假设压入栈的所有数字均不相等。例如序列输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。<br>假设压入栈的所有数字均不相等。例如序列 1，2，3，4，5 是某栈的压入顺序，序列 4，5，3，2，1是该压栈序列对应的一个弹出序列，<br>但4，3，5，1，2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>1.用一个辅助堆，一直插入第一个数组的元素，直到等于第二个数组的第一个值<br>2.然后判断二个数组的第二位，是否等于这个辅助堆得第一个数值，如果等于则pop，否则接着push<br>3.最后判断辅助堆得大小即可，等于0则true,否则false.</p><h2 id="自己的代码-2"><a href="#自己的代码-2" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stack_push_pop_shunxu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRightSX</span><span class="params">(<span class="keyword">int</span>[] org, <span class="keyword">int</span>[] hou)</span></span>&#123;</span><br><span class="line">        Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; org.length; i++) &#123;</span><br><span class="line">            stack.push(org[i]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(stack.size() != <span class="number">0</span> &amp; a &lt; hou.length)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = (<span class="keyword">int</span>)stack.peek();</span><br><span class="line">                <span class="keyword">if</span>(tmp == hou[a])&#123;</span><br><span class="line">                    a ++;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.size() ==<span class="number">0</span> ? <span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(isRightSX(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网上的代码-1"><a href="#网上的代码-1" class="headerlink" title="网上的代码"></a>网上的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsPopOrder</span><span class="params">(<span class="keyword">int</span>[] pushSequence, <span class="keyword">int</span>[] popSequence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = pushSequence.length;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> pushIndex = <span class="number">0</span>, popIndex = <span class="number">0</span>; pushIndex &lt; n; pushIndex++) &#123;</span><br><span class="line">        stack.push(pushSequence[pushIndex]);</span><br><span class="line">        <span class="keyword">while</span> (popIndex &lt; n &amp;&amp; !stack.isEmpty() </span><br><span class="line">                &amp;&amp; stack.peek() == popSequence[popIndex]) &#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">            popIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h1><p>定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的 min 函数</p><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>1.用2个辅助堆，第一个放数组的元素，第二个放每次比较后较小的元素（第一个堆一定大于等于第二个堆）<br>2.第一个堆是每次都放入元素，第二个堆是每次那放入第一个堆得元素比较第二个堆自己最上面的元素，如果不一样，就push<br>3.最后使2个堆得大小一致，然后pop第二个堆，得到的第一个元素就是最小值。</p><h2 id="自己的代码-3"><a href="#自己的代码-3" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by v_yuyifei on 19/3/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">minNums</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min_num= -<span class="number">1</span>;</span><br><span class="line">        Stack stack1 = <span class="keyword">new</span> Stack();</span><br><span class="line">        Stack stack2 = <span class="keyword">new</span> Stack();</span><br><span class="line">        stack1.push(nums[<span class="number">0</span>]);</span><br><span class="line">        stack2.push(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> last_val = (<span class="keyword">int</span>)stack2.peek() ;</span><br><span class="line">            <span class="keyword">int</span> tmp = Math.min(last_val, nums[i]);</span><br><span class="line">            stack1.push(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(tmp != (<span class="keyword">int</span>)stack2.peek() )&#123;</span><br><span class="line">                stack2.push(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(stack1.size() != stack2.size())&#123;</span><br><span class="line">            stack1.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(min(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">12</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网上的代码-2"><a href="#网上的代码-2" class="headerlink" title="网上的代码"></a>网上的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Stack&lt;Integer&gt; dataStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> Stack&lt;Integer&gt; minStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">    dataStack.push(node);</span><br><span class="line">    minStack.push(minStack.isEmpty() ? node : Math.min(minStack.peek(), node));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dataStack.pop();</span><br><span class="line">    minStack.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dataStack.peek();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> minStack.peek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04 | 数学归纳法：如何用数学归纳提升代码的运行效率？</title>
      <link href="/2019/03/07/04-%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E7%94%A8%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%90%E8%A1%8C%E6%95%88%E7%8E%87%EF%BC%9F/"/>
      <url>/2019/03/07/04-%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95%EF%BC%9A%E5%A6%82%E4%BD%95%E7%94%A8%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%90%E8%A1%8C%E6%95%88%E7%8E%87%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>有些迭代我们可以通过理论证明某个结论，避免一次一次的计算，节约大量的计算资源。<br>归纳法的特点在于归纳2字，它已经总结了规律，不用逐步计算，可以节省很多时间和资源。</p><a id="more"></a><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>有些迭代我们可以通过理论证明某个结论，避免一次一次的计算，节约大量的计算资源。<br>归纳法的特点在于归纳2字，它已经总结了规律，不用逐步计算，可以节省很多时间和资源。</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h2 id="什么是数学归纳法？"><a href="#什么是数学归纳法？" class="headerlink" title="什么是数学归纳法？"></a>什么是数学归纳法？</h2><p>根据现象，得出结论，进行验证后。一般用于无穷数列的问题。</p><h2 id="和迭代法相比有什么优势吗？"><a href="#和迭代法相比有什么优势吗？" class="headerlink" title="和迭代法相比有什么优势吗？"></a>和迭代法相比有什么优势吗？</h2><p>数学归纳法最大的特点就是归纳，他总结了规律，不用逐步的计算。</p><h3 id="使用迭代和数学归纳法来比较舍罕王给米的数据"><a href="#使用迭代和数学归纳法来比较舍罕王给米的数据" class="headerlink" title="使用迭代和数学归纳法来比较舍罕王给米的数据"></a>使用迭代和数学归纳法来比较舍罕王给米的数据</h3><h3 id="使用System-currentTimeMillis获取时间戳进行运行完成的计算"><a href="#使用System-currentTimeMillis获取时间戳进行运行完成的计算" class="headerlink" title="使用System.currentTimeMillis获取时间戳进行运行完成的计算"></a>使用System.currentTimeMillis获取时间戳进行运行完成的计算</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    Long start = <span class="number">1L</span>;</span><br><span class="line">    Long result = <span class="number">1L</span>;</span><br><span class="line">    Long f = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">        start = start * <span class="number">2</span>;</span><br><span class="line">        result = result + start ;</span><br><span class="line">    &#125;</span><br><span class="line">    Long e = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"迭代："</span>+(f-e) + result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数学归纳法</span></span><br><span class="line">    f = System.currentTimeMillis();</span><br><span class="line">    Double result2 =  (Math.pow(<span class="number">2</span>,<span class="number">63</span>))  - <span class="number">1</span>;</span><br><span class="line">    e = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"归纳："</span>+(f-e) + result2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归调用和数学归纳法的逻辑是一样的吗？"><a href="#递归调用和数学归纳法的逻辑是一样的吗？" class="headerlink" title="递归调用和数学归纳法的逻辑是一样的吗？"></a>递归调用和数学归纳法的逻辑是一样的吗？</h2><p>逻辑是一致的。<br>只要数学归纳法的逻辑是对的，那么写的递归逻辑也是对的</p><h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><h2 id="数学归纳法证明的步骤"><a href="#数学归纳法证明的步骤" class="headerlink" title="数学归纳法证明的步骤"></a>数学归纳法证明的步骤</h2><p>1.证明基本情况（n=1的时候）是否成立<br>2.假设n = k-1成立，在证明 n=k也成立（k&gt;1的自然数）</p><h2 id="舍罕王的总米数，使用递归实现推导逻辑"><a href="#舍罕王的总米数，使用递归实现推导逻辑" class="headerlink" title="舍罕王的总米数，使用递归实现推导逻辑"></a>舍罕王的总米数，使用递归实现推导逻辑</h2><h3 id="数学归纳法证明舍罕王给的总数"><a href="#数学归纳法证明舍罕王给的总数" class="headerlink" title="数学归纳法证明舍罕王给的总数"></a>数学归纳法证明舍罕王给的总数</h3><p>证明第一个命题：第K个麦粒总数2^（k-1）<br>1.n=1时 2^(1-1)=1成立<br>2.n=k -1时 当前数为 2^(k-2) 那么当n=k时，是为k-1格的2倍所以为 2*2^(k-2) = 2^(k-1) 成立</p><p>证明第二个命题： 第K个麦粒和之前的格子加起来的总数2^（k+1）-1<br>1.n=1时 2^(1-1)=1成立<br>2.n=k -1时 当前数为 2^(k)-1 那么当n=k时，是为k-1格的2倍所以为 2^(k)-1 + 2^(k) = 2^（k+1）-1 成立</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1.经过数学归纳法可以看出其实总数是2^k-1<br>2.过程就是先从最后开始算起<br>3.证明过程最后返回的是true,是比较前后函数成功</p><h4 id="一个参数即可，看循环几次都是否为true"><a href="#一个参数即可，看循环几次都是否为true" class="headerlink" title="一个参数即可，看循环几次都是否为true"></a>一个参数即可，看循环几次都是否为true</h4><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>  <span class="keyword">double</span> cur_nums = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> cur_all = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tuidao</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>)&#123;</span><br><span class="line">        lesson4.cur_nums=<span class="number">1</span>;</span><br><span class="line">        lesson4.cur_all=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> proveOfPreviousOne = tuidao(k-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        cur_nums = cur_nums*<span class="number">2</span>;</span><br><span class="line">        cur_all = cur_all + cur_nums;</span><br><span class="line">        <span class="keyword">boolean</span> proveOfCurrentOne = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur_all == Math.pow(<span class="number">2</span>, k) - <span class="number">1</span>)&#123;</span><br><span class="line">            proveOfCurrentOne = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proveOfCurrentOne &amp;&amp; proveOfPreviousOne ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逆向递推和正向递推"><a href="#逆向递推和正向递推" class="headerlink" title="逆向递推和正向递推"></a>逆向递推和正向递推</h2><p>迭代就是循环也就是正向递推。递归就是从后往前，就是你想递推。</p><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="日常工作中，什么地方用到了归纳法来提升代码效率？"><a href="#日常工作中，什么地方用到了归纳法来提升代码效率？" class="headerlink" title="日常工作中，什么地方用到了归纳法来提升代码效率？"></a>日常工作中，什么地方用到了归纳法来提升代码效率？</h2><p>递归清理文件夹或者文件<br>使用栈来实现递归</p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>一般发现有递归的情况，可以查看是否使用动态规划。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="/2019/03/07/04-数学归纳法：如何用数学归纳提升代码的运行效率？/lesson4.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 网络学习 </category>
          
          <category> 极客时间 </category>
          
          <category> 程序员的数学基础课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03 | 迭代法：不用编程语言的自带函数，你会如何计算平方根?</title>
      <link href="/2019/03/06/03-%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%9A%E4%B8%8D%E7%94%A8%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E8%87%AA%E5%B8%A6%E5%87%BD%E6%95%B0%EF%BC%8C%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
      <url>/2019/03/06/03-%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%9A%E4%B8%8D%E7%94%A8%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E8%87%AA%E5%B8%A6%E5%87%BD%E6%95%B0%EF%BC%8C%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<p>人不擅长重复性的劳动，但是计算机擅长，以重复为特点的迭代法在编程中有广泛的应用。<br>迭代的场景包括求近似解，范围内查找目标值，机器算法中的迭代（局部最优解）等。<br><a id="more"></a></p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>人不擅长重复性的劳动，但是计算机擅长，以重复为特点的迭代法在编程中有广泛的应用。<br>迭代的场景包括求近似解，范围内查找目标值，机器算法中的迭代（局部最优解）等。</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h2 id="什么是迭代？"><a href="#什么是迭代？" class="headerlink" title="什么是迭代？"></a>什么是迭代？</h2><p>不断用旧的变量值递推出新的变量值。</p><h2 id="迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？"><a href="#迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？" class="headerlink" title="迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？"></a>迭代通过一个案例来实现，有63个位置，第一个位置放1粒米，第二个位置放第一个位置的2倍米，依次类推，问63个位置放满总共要多少米？</h2><p>可以使用循环来解决上述问题。注意：必须使用Long类型不然返回结果为-1</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Long start = <span class="number">1L</span>;</span><br><span class="line">Long result = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">start = start * <span class="number">2</span>;</span><br><span class="line">result = result + start ;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代的具体应用？"><a href="#迭代的具体应用？" class="headerlink" title="迭代的具体应用？"></a>迭代的具体应用？</h2><p>1.求数值的精确或近似解<br>2.范围内查找目标值<br>3.机器算法中的迭代（局部最优解），K-MEANS算法，PageRank的马尔科夫链，梯度算法等等</p><h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><h2 id="求方程或者数值的近似解"><a href="#求方程或者数值的近似解" class="headerlink" title="求方程或者数值的近似解"></a>求方程或者数值的近似解</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1.使用指针，指向最小值和最大值，2分法<br>2.然后与中间的值平方做大小比较<br>3.添加了误差，和最大值的限制，防止无线循环！</p><h3 id="使用二分法使，必须保证数组是有序的！！！！！！！"><a href="#使用二分法使，必须保证数组是有序的！！！！！！！" class="headerlink" title="使用二分法使，必须保证数组是有序的！！！！！！！"></a>使用二分法使，必须保证数组是有序的！！！！！！！</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">pinfanggeng</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max_try = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">double</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> max = a ;</span><br><span class="line">    <span class="keyword">double</span> tmp = (min+max) /<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//误差</span></span><br><span class="line">    <span class="keyword">double</span> wc = <span class="number">0.00001</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max_try; i++) &#123;</span><br><span class="line">        <span class="keyword">double</span> t = tmp* tmp;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(t-a) &lt;= wc)&#123;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t &gt; a)&#123;</span><br><span class="line">            max = tmp;</span><br><span class="line">            tmp =(min+max) /<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t &lt; a)&#123;</span><br><span class="line">            min = tmp;</span><br><span class="line">            tmp = (min+max) /<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章内容匹配"><a href="#文章内容匹配" class="headerlink" title="文章内容匹配"></a>文章内容匹配</h2><h3 id="在字母a到g中找到f字典"><a href="#在字母a到g中找到f字典" class="headerlink" title="在字母a到g中找到f字典"></a>在字母a到g中找到f字典</h3><p>1.还是如上使用2分法</p><h3 id="字符串的比较用equals-比较其字符串的大小用compareTo"><a href="#字符串的比较用equals-比较其字符串的大小用compareTo" class="headerlink" title="字符串的比较用equals, 比较其字符串的大小用compareTo!"></a>字符串的比较用equals, 比较其字符串的大小用compareTo!</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String[] dir, String key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = dir.length -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dir.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = min + (max - min)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(dir[tmp].equals(key))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dir[tmp].compareTo(key) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            max = tmp;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dir[tmp].compareTo(key) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            min = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？"><a href="#项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？" class="headerlink" title="项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？"></a>项目中是否用过迭代？迭代的最大特点是什么？如果没用过，现在的项目中哪些地方可以使用迭代？</h2><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="PageRank的马尔科夫链"><a href="#PageRank的马尔科夫链" class="headerlink" title="PageRank的马尔科夫链"></a>PageRank的马尔科夫链</h2><p>TODO</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="/2019/03/06/03-迭代法：不用编程语言的自带函数，你会如何计算平方根/lessons3.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 网络学习 </category>
          
          <category> 极客时间 </category>
          
          <category> 程序员的数学基础课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 | 余数：原来取余操作本身就是个哈希函数 </title>
      <link href="/2019/03/05/02-%E4%BD%99%E6%95%B0%EF%BC%9A%E5%8E%9F%E6%9D%A5%E5%8F%96%E4%BD%99%E6%93%8D%E4%BD%9C%E6%9C%AC%E8%BA%AB%E5%B0%B1%E6%98%AF%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/"/>
      <url>/2019/03/05/02-%E4%BD%99%E6%95%B0%EF%BC%9A%E5%8E%9F%E6%9D%A5%E5%8F%96%E4%BD%99%E6%93%8D%E4%BD%9C%E6%9C%AC%E8%BA%AB%E5%B0%B1%E6%98%AF%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>余数总是在一个固定的范围内。<br>余数的应用场景，WEB分页，散列函数，加密算法，也有循环冗余校验等</p><a id="more"></a><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>余数总是在一个固定的范围内。<br>余数的应用场景WEB分页，散列函数，加密算法，也有循环冗余校验等</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h2 id="当1900年1月1日为周三时，这天后的第10000天是周几？"><a href="#当1900年1月1日为周三时，这天后的第10000天是周几？" class="headerlink" title="当1900年1月1日为周三时，这天后的第10000天是周几？"></a>当1900年1月1日为周三时，这天后的第10000天是周几？</h2><p>思路：<br>10000/7的余数是 4<br>那么1900年1月1日后的10000天就是周3+4天那就是周7</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"10000/7 的余数 ："</span> + <span class="number">10000</span>%<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">Date date = sdf.parse(<span class="string">"1991-01-01"</span>);</span><br><span class="line">Calendar  ca = Calendar.getInstance();</span><br><span class="line">ca.setTime(date);</span><br><span class="line"><span class="keyword">int</span> weekday=ca.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">System.out.println(<span class="string">"1991-01-01 是周几 ："</span>+weekday);</span><br><span class="line"></span><br><span class="line">ca.add(Calendar.DATE, <span class="number">10000</span>);</span><br><span class="line"><span class="keyword">int</span> dt = ca.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">System.out.println(<span class="string">"1991-01-01 后的10000天 是周几 ："</span>+dt);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><h2 id="同余定理"><a href="#同余定理" class="headerlink" title="同余定理"></a>同余定理</h2><p>基本概念：<br>数论中的重要概念。给定一个正整数m，如果两个整数a和b满足a-b能够被m整除，即(a-b)/m得到一个整数，那么就称整数a与b对模m同余，记作a≡b(mod m)。对模m同余是整数的一个等价关系。</p><p>举例说明：<br>今天是星期一，从今天开始的 100 天里，都有多少个星期呢？你拿 100 除以 7，得到商 14 余 2，也就是说这 100 天里有 14 周多 2 天。<br>换个角度看，我们可以说，这 100 天里，你的第 1 天、第 8 天、第 15 天等等，在余数的世界里都被认为是同一天，因为它们的余数都是 1，都是星期一.<br>同理，第 2 天、第 9 天、第 16 天余数都是 2，它们都是星期二。</p><p>结论：<br>同余定理其实就是用来分类的</p><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p>基本概念：<br>任意长度的输入，通过哈希算法，压缩为某一固定长的输出。</p><p>举例说明：<br>有100万调数据需要存放，为了实现快速的写入和读取。<br>可以使用hash。好处是不用将数据都存在一个连续的地址空间。<br>可以开辟多个连续地址空间，通过余数，将任意数值转换为有限范围内的一个数值，<br>然后根据这个数值，确定新存放的地址空间。</p><p>扩充说明：<br>可以增加一个最大值，来增加它散列的随机程度。<br>假如： 原本是 1 %9 = 1 存放到1号地址空间<br>那么现在 （1 + 590199） % 9 = 7 现在就存放到了7号地址空间<br>像这样的场景一般用于加密算法，mapreduce的数据分发，记录的高速查询和定位等</p><h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><p>自己定义一个加密算法，加密规则：<br>1.先对每个三位数的个、十和百位数，都加上一个较大的随机数。<br>2.然后将每位上的数都除以9，用所得的余数代替原有的个、十、百位数<br>3.最后将第一位和第三位交换</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt_str</span><span class="params">(<span class="keyword">int</span> org)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fix_bigint = <span class="number">298357</span>;</span><br><span class="line">String org_s = String.valueOf(org);</span><br><span class="line"><span class="keyword">int</span> bai = Integer.valueOf(String.valueOf(org_s.charAt(<span class="number">0</span>)));</span><br><span class="line"><span class="keyword">int</span> shi = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class="number">1</span>]));</span><br><span class="line"><span class="keyword">int</span> ge = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">int</span> new_bai = (bai + fix_bigint) % <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> new_shi = (shi + fix_bigint) % <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> new_ge = (ge + fix_bigint) % <span class="number">9</span>;</span><br><span class="line">String result = String.valueOf(new_ge) + String.valueOf(new_shi) + String.valueOf(new_bai);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">yu_count</span><span class="params">(<span class="keyword">int</span> shi, <span class="keyword">int</span> base)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> new_shi = shi;</span><br><span class="line"><span class="keyword">if</span>(shi&lt; base)&#123;</span><br><span class="line">new_shi = <span class="number">9</span> - base + shi;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(shi&gt; base)&#123;</span><br><span class="line">new_shi = shi - base;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">new_shi = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> new_shi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dencrypt_str</span><span class="params">(<span class="keyword">int</span> org)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fix_bigint = <span class="number">298357</span>;</span><br><span class="line">String org_s = String.valueOf(org);</span><br><span class="line"><span class="keyword">int</span> bai = Integer.valueOf(String.valueOf(org_s.charAt(<span class="number">0</span>)));</span><br><span class="line"><span class="keyword">int</span> shi = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class="number">1</span>]));</span><br><span class="line"><span class="keyword">int</span> ge = Integer.valueOf(String.valueOf(org_s.toCharArray()[<span class="number">2</span>]));</span><br><span class="line"><span class="keyword">int</span> base = <span class="number">298357</span> % <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> new_bai = yu_count(bai, base);</span><br><span class="line"><span class="keyword">int</span> new_shi = yu_count(shi, base);</span><br><span class="line"><span class="keyword">int</span> new_ge = yu_count(ge, base);</span><br><span class="line"></span><br><span class="line">String result = String.valueOf(new_ge) + String.valueOf(new_shi) + String.valueOf(new_bai);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="生活和编程中哪些用到了余数思想？"><a href="#生活和编程中哪些用到了余数思想？" class="headerlink" title="生活和编程中哪些用到了余数思想？"></a>生活和编程中哪些用到了余数思想？</h2><p>mapreduce，reduce端的partition</p><p>网上的答案：</p><p>生活中的话，闰年的计算就是典型的余数决定了</p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="闰年"><a href="#闰年" class="headerlink" title="闰年"></a>闰年</h2><p>闰年是能被4整除但是不能被100整除，但是能被400整除。</p><h3 id="判断那年是闰年"><a href="#判断那年是闰年" class="headerlink" title="判断那年是闰年"></a>判断那年是闰年</h3><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">is_runnian</span><span class="params">(String nian)</span></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag =<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> int_nian = Integer.valueOf(nian);</span><br><span class="line"><span class="keyword">if</span>((int_nian % <span class="number">4</span> ==<span class="number">0</span> &amp;&amp; int_nian % <span class="number">100</span> !=<span class="number">0</span>) || int_nian % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="/2019/03/05/02-余数：原来取余操作本身就是个哈希函数/lesson2.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 网络学习 </category>
          
          <category> 极客时间 </category>
          
          <category> 程序员的数学基础课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 | 二进制：不了解计算机的源头，你学什么编程</title>
      <link href="/2019/03/05/01-%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%9A%E4%B8%8D%E4%BA%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E6%BA%90%E5%A4%B4%EF%BC%8C%E4%BD%A0%E5%AD%A6%E4%BB%80%E4%B9%88%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/03/05/01-%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%9A%E4%B8%8D%E4%BA%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E6%BA%90%E5%A4%B4%EF%BC%8C%E4%BD%A0%E5%AD%A6%E4%BB%80%E4%B9%88%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>计算机起源是数学中的二进制法。<br>二进制用于很多概念和思想,如逻辑判断，二分法，二叉树等<br><a id="more"></a></p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>计算机起源是数学中的二进制法。<br>二进制用于很多概念和思想,如逻辑判断，二分法，二叉树等</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h2 id="什么是二进制"><a href="#什么是二进制" class="headerlink" title="什么是二进制"></a>什么是二进制</h2><p>十进制是以10为基数，二进制是以2为基数<br>二进制就是2^n的形式 </p><p>java二进制转十进制和十进制转二进制</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 十进制转换成二进制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> decimalSource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decimalToBinary</span><span class="params">(<span class="keyword">int</span> decimalSource)</span> </span>&#123;</span><br><span class="line">    BigInteger bi = <span class="keyword">new</span> BigInteger(String.valueOf(decimalSource)); <span class="comment">// 转换成 BigInteger 类型，默认是十进制</span></span><br><span class="line">    <span class="keyword">return</span> bi.toString(<span class="number">2</span>); <span class="comment">// 参数 2 指定的是转化成二进制</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 二进制转换成十进制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> binarySource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binaryToDecimal</span><span class="params">(String binarySource)</span> </span>&#123;</span><br><span class="line">    BigInteger bi = <span class="keyword">new</span> BigInteger(binarySource, <span class="number">2</span>);  <span class="comment">// 转换为 BigInteger 类型，参数 2 指定的是二进制</span></span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(bi.toString());     <span class="comment">// 默认转换成十进制</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么计算机使用二进制？"><a href="#为什么计算机使用二进制？" class="headerlink" title="为什么计算机使用二进制？"></a>为什么计算机使用二进制？</h2><p>计算机的逻辑电路只有2个状态，断开与接通，一般断开是0，接通为1<br>二进制的数据表达具有抗干扰能力强，可靠性高的优点，也符合逻辑运算！</p><h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><h2 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h2><p>向左位移 &lt;&lt;<br>向右位移 &gt;&gt; 或 &gt;&gt;&gt;<br>逻辑位移 &gt;&gt; 算数右移 &gt;&gt;&gt;<br>逻辑右移：最高位补0<br>算数右移： 最高位原位</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 向左移位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num- 等待移位的十进制数, m- 向左移的位数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int- 移位后的十进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leftShift</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num &lt;&lt; m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 向右移位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num- 等待移位的十进制数, m- 向右移的位数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int- 移位后的十进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rightShift</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num &gt;&gt;&gt; m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>二进制的0,1分别对应逻辑中的真和假<br>或 0 | 1 = 1<br>与 0 &amp; 1 = 0<br>异或 0 ^ 1 = 1 （只要2进制相同位上的2个数不同，即为真）</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 二进制按位“或”的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num1- 第一个数字，num2- 第二个数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 二进制按位“或”的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">or</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (num1 | num2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 二进制按位“与”的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num1- 第一个数字，num2- 第二个数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 二进制按位“与”的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">and</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (num1 &amp; num2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 二进制按位“异或”的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num1- 第一个数字，num2- 第二个数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 二进制按位“异或”的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">xor</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (num1 ^ num2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="用什么方法来实现十进制到二进制的转化？-不使用BigInteger类"><a href="#用什么方法来实现十进制到二进制的转化？-不使用BigInteger类" class="headerlink" title="用什么方法来实现十进制到二进制的转化？(不使用BigInteger类)"></a>用什么方法来实现十进制到二进制的转化？(不使用BigInteger类)</h2><p>补充： BigInteger类无法打印负数的2进制！！就无法用于验证了，具体验证方法看扩展的反码补码源码</p><p>个人思路整理：</p><ol><li>用位移运算 首先与1做与操作，获取一位2进制的结果 </li><li>再用右位移1位的操作， 再与1做与操作， 获取第二位2进制的结果 </li><li>上述过程以此类推，获取到的字符串再做个倒序即可（获取的第一位是二进制的最后一位。）</li></ol><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">manual_decimal2binary</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    String result = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = (num &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        result += String.valueOf(tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(result).reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上答案： </p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: decimalToBinary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 十进制转二进制，方法1：余数短除法除以二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> decimalSource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*public static String decimalToBinary(int decimalSource) &#123;</span></span><br><span class="line"><span class="comment">    StringBuilder sb = new StringBuilder();</span></span><br><span class="line"><span class="comment">    while (decimalSource != 0) &#123;</span></span><br><span class="line"><span class="comment">        sb.append(decimalSource % 2);</span></span><br><span class="line"><span class="comment">        decimalSource = decimalSource &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return sb.reverse().toString();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: decimalToBinary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 十进制转二进制，方法2：降二次幂及减法混合运算</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> decimalSource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*public static String decimalToBinary(int decimalSource) &#123;</span></span><br><span class="line"><span class="comment">    int length = (int) (Math.log(decimalSource) / Math.log(2));</span></span><br><span class="line"><span class="comment">    StringBuffer sb = new StringBuffer();</span></span><br><span class="line"><span class="comment">    do &#123;</span></span><br><span class="line"><span class="comment">        decimalSource = (int) (decimalSource - Math.pow(2, length));</span></span><br><span class="line"><span class="comment">        int power = decimalSource &lt;= 0 ? -1 : (int) (Math.log(decimalSource) / Math.log(2));</span></span><br><span class="line"><span class="comment">        for (int i = length; i &gt; power; i--) &#123;</span></span><br><span class="line"><span class="comment">            if (i == length) &#123;</span></span><br><span class="line"><span class="comment">                sb.append("1");</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                sb.append("0");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        length = power;</span></span><br><span class="line"><span class="comment">    &#125; while (decimalSource &gt; 0);</span></span><br><span class="line"><span class="comment">    return sb.toString();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: decimalToBinary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 十进制转二进制，方法3：位运算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> decimalSource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decimalToBinary</span><span class="params">(<span class="keyword">int</span> decimalSource)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">while</span> (decimalSource != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//此&amp;运算，decimalSource &amp; 1，目的是获取最低位的二进制数值</span></span><br><span class="line">        sb.append(decimalSource &amp; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//此&gt;&gt;运算，decimalSource &gt;&gt; 1，目的是将获取到的最低位二进制数值除去</span></span><br><span class="line">        decimalSource = decimalSource &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="原码与反码与补码"><a href="#原码与反码与补码" class="headerlink" title="原码与反码与补码"></a>原码与反码与补码</h2><p> 原码：一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补1，称为原码。<br> 比如 00000000 00000000 00000000 00000101 是 5的 原码；10000000 00000000 00000000 00000101 是 -5的 原码。 　</p><p> 反码：正数的反码与原码相同，负数的反码为对该数的原码除符号位外各位取反。<br> 取反操作指：原为1，得0；原为0，得1。（1变0; 0变1）<br> 比如：正数00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101 ；<br> 负数10000000 00000000 00000000 00000101每一位取反（除符号位），得11111111 11111111 11111111 11111010。<br> 称：10000000 00000000 00000000 00000101 和 11111111 11111111 11111111 11111010互为反码。 　</p><p> 补码：正数的补码与原码相同，负数的补码为对该数的原码除符号位外各位取反，然后在最后一位加1.<br> 比如：10000000 00000000 00000000 00000101 的反码是：11111111 11111111 11111111 11111010。<br> 那么，补码为：<br> 11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011<br> 所以，-5 在计算机中表达为：11111111 11111111 11111111 11111011。转换为十六进制：0xFFFFFFFB。</p><p> 假设这也是一个int类型，那么： </p><ol><li>先取-1的原码：10000000 00000000 00000000 00000001 </li><li>得反码： 11111111 11111111 11111111 11111110（除符号位按位取反） </li><li>得补码： 11111111 11111111 11111111 11111111<br>可见，－1在计算机里用二进制表达就是全1。16进制为：0xFFFFFF</li></ol><h2 id="位移运算-小窍门"><a href="#位移运算-小窍门" class="headerlink" title="位移运算 小窍门"></a>位移运算 小窍门</h2><p>向左位移1位 等于原数乘以2<br>向右位移1位 等于原数除以2的整数商</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="/2019/03/05/01-二进制：不了解计算机的源头，你学什么编程/lesson1.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 网络学习 </category>
          
          <category> 极客时间 </category>
          
          <category> 程序员的数学基础课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章结构</title>
      <link href="/2019/03/04/%E6%96%87%E7%AB%A0%E7%BB%93%E6%9E%84%E6%9E%84%E5%BB%BA/"/>
      <url>/2019/03/04/%E6%96%87%E7%AB%A0%E7%BB%93%E6%9E%84%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>摘要 - 疑问 - 基本内容 - 思考题 - 扩展 - 小结</strong><br><strong>问题 - 思路 - 代码 - 网上代码</strong><br><a id="more"></a></p><!-- 文章 --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h1 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h1><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><!-- 面试题 --><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">## 网上的代码</span><br><span class="line"></span><br><span class="line">```java</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
